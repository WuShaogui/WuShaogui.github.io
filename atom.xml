<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>年轻人起来冲</title>
  
  
  <link href="https://shaogui.life/atom.xml" rel="self"/>
  
  <link href="https://shaogui.life/"/>
  <updated>2021-02-20T15:31:32.749Z</updated>
  <id>https://shaogui.life/</id>
  
  <author>
    <name>绍桂</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客速度优化</title>
    <link href="https://shaogui.life/2021/02/20/Hexo%E5%8D%9A%E5%AE%A2%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
    <id>https://shaogui.life/2021/02/20/Hexo%E5%8D%9A%E5%AE%A2%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/</id>
    <published>2021-02-20T14:06:09.824Z</published>
    <updated>2021-02-20T15:31:32.749Z</updated>
    
    <content type="html"><![CDATA[<p>本文对Hexo博客进行访问优化，使得访问速度更快了，主要是安装hexo-neat插件，实现对html、css、js、image等静态资源的高效压缩。通过压缩这些静态资源，可以减少请求的数据量从而达到优化博客访问速度的目的</p><a id="more"></a><h2 id="资源压缩"><a class="markdownIt-Anchor" href="#资源压缩"></a> 资源压缩<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2><p><strong>安装插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><p><strong>配置插件</strong><br />打开博客根目录文件<code>_config.yml</code>，添加以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat 压缩</span></span><br><span class="line">neat_enable: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line">neat_html:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line">neat_css:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line">neat_js:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mangle: <span class="literal">true</span></span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    - <span class="string">&#x27;**/jquery.fancybox.pack.js&#x27;</span></span><br><span class="line">    - <span class="string">&#x27;**/index.js&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="图片懒加载"><a class="markdownIt-Anchor" href="#图片懒加载"></a> 图片懒加载<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h2><p>即文字先出来，图片慢慢出来，显著提高加载速度</p><p><strong>安装插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><p>打开配置文件<code>_config.yml</code>，添加以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片懒加载</span></span><br><span class="line">lazyload:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> </span><br><span class="line">  onlypost: <span class="literal">false</span></span><br><span class="line">  loadingImg: /images/loading.gif <span class="comment">#如果不填写图片则使用默认的图片</span></span><br></pre></td></tr></table></figure><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://www.difashi.com/2020-02/20-hexo-neat.html">hexo优化静态JS等资源压缩</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://www.cnblogs.com/lfri/p/12221963.html">Hexo-Next提高加载速度</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文对Hexo博客进行访问优化，使得访问速度更快了，主要是安装hexo-neat插件，实现对html、css、js、image等静态资源的高效压缩。通过压缩这些静态资源，可以减少请求的数据量从而达到优化博客访问速度的目的&lt;/p&gt;</summary>
    
    
    
    <category term="软件工具" scheme="https://shaogui.life/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="hexo" scheme="https://shaogui.life/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>为Hexo安装Next主题</title>
    <link href="https://shaogui.life/2021/02/19/%E4%B8%BAHexo%E5%AE%89%E8%A3%85Next%E4%B8%BB%E9%A2%98/"/>
    <id>https://shaogui.life/2021/02/19/%E4%B8%BAHexo%E5%AE%89%E8%A3%85Next%E4%B8%BB%E9%A2%98/</id>
    <published>2021-02-19T13:10:44.000Z</published>
    <updated>2021-02-20T13:49:02.066Z</updated>
    
    <content type="html"><![CDATA[<p>基于github pages完成博客搭建后，已经可以正常发文了，但是文字展示不美观，本文展示如何在Linux为Hexo博客安装Next主题，并进行详细配置</p><a id="more"></a><h2 id="安装next主题"><a class="markdownIt-Anchor" href="#安装next主题"></a> 安装Next主题</h2><p><strong>下载主题</strong></p><p>在博客的目录下，运行以下命令获得Next主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p><strong>更新主题</strong></p><p>运行以下命令即可更新主题，但这会覆盖原来的自定义修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next;git pull</span><br></pre></td></tr></table></figure><h2 id="配置next主题"><a class="markdownIt-Anchor" href="#配置next主题"></a> 配置Next主题</h2><p>配置博客涉及两个配置文件，一个路径是<code>[myblog]/_config.yml</code>和<code>[myblog]/theme/next/_config.yml</code>，前一个是站点配置，后一个是主题配置。下面就分别就这两个文件进行配置：</p><h3 id="配置站点_configyml"><a class="markdownIt-Anchor" href="#配置站点_configyml"></a> 配置站点_config.yml</h3><p>打开文件<code>[myblog]/_config.yml</code>，每个配置项按如下配置</p><h4 id="配置站点基本信息"><a class="markdownIt-Anchor" href="#配置站点基本信息"></a> 配置站点基本信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 年轻人起来冲</span><br><span class="line">subtitle: <span class="string">&#x27;&#x27;</span></span><br><span class="line">description: <span class="string">&#x27;害怕失败是本能，勇敢面对才是本事&#x27;</span></span><br><span class="line">keywords:</span><br><span class="line">author: 绍桂</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="主题配置"><a class="markdownIt-Anchor" href="#主题配置"></a> 主题配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><h4 id="url配置"><a class="markdownIt-Anchor" href="#url配置"></a> URL配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line">url: https://shaogui.life/</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  trailing_html: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><h4 id="翻页配置"><a class="markdownIt-Anchor" href="#翻页配置"></a> 翻页配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 8</span><br><span class="line">pagination_dir: page</span><br></pre></td></tr></table></figure><h3 id="配置主题_configyml"><a class="markdownIt-Anchor" href="#配置主题_configyml"></a> 配置主题_config.yml</h3><p>根据 Hexo 官方的推荐，不要直接修改主题的配置文件</p><blockquote><p>The file should be placed in your site folder, both <code>yml</code> and <code>json</code> are supported. <code>theme</code> inside <code>_config.yml</code> must be configured for Hexo to read <code>_config.[theme].yml</code></p></blockquote><p>而是将配置文件复制到和<code>[myblog]/_config.yml</code>同目录下，并命名为：<code>_config.next.yml</code>，在该文件上填写<strong>自己需要自定义的内容</strong>。</p><h4 id="网站logo配置"><a class="markdownIt-Anchor" href="#网站logo配置"></a> 网站logo配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure><h4 id="主题风格配置"><a class="markdownIt-Anchor" href="#主题风格配置"></a> 主题风格配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h4 id="菜单栏配置"><a class="markdownIt-Anchor" href="#菜单栏配置"></a> 菜单栏配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure><p>注：||后面指的是图标，各个菜单实际显示的是中文，中英文对应配置文件位于<code>\themes\next\languages\zh-CN.yml</code>中，如果有其他菜单项可以在该文件配置其中文</p><h4 id="文章分类及标签"><a class="markdownIt-Anchor" href="#文章分类及标签"></a> 文章分类及标签<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h4><p>菜单栏中<code>categories</code>，<code>tags</code>，<code>about</code>点击后提示找不到页面，这时需要使用以下命令新建这三个页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>运行三个命令后，均在<code>source</code>目录下生成相应的文件夹，此时菜单栏中可以打开这些项，但是没有内容，需要配置各自的<code>index.md</code></p><p>打开<code>source/categories/index.md</code>，添加type项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2021-02-18 21:44:21</span><br><span class="line"><span class="built_in">type</span>: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>打开<code>source/tags/index.md</code>，添加type项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2021-02-18 21:44:21</span><br><span class="line"><span class="built_in">type</span>: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>编辑文章时，在开头加入<code>categories</code>，<code>tags</code>项即刻对文章进行分类及打标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: xxx</span><br><span class="line">date: 2020-06-01 23:47:44</span><br><span class="line">tags: [xx,xx]</span><br><span class="line">categories: xx</span><br></pre></td></tr></table></figure><h4 id="顶部加载条"><a class="markdownIt-Anchor" href="#顶部加载条"></a> 顶部加载条</h4><p><strong>安装插件到Next主题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace themes/next/<span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure><p><strong>开启进度条</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pace</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/HubSpot/pace</span></span><br><span class="line">pace:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  theme: minimal</span><br></pre></td></tr></table></figure><h4 id="添加访问量"><a class="markdownIt-Anchor" href="#添加访问量"></a> 添加访问量</h4><p>修改<code>themes/next/layout/_partials/footer.swig</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;powered-by&quot;</span>&gt;</span><br><span class="line">    &#123;%- <span class="built_in">set</span> next_site = <span class="string">&#x27;https://theme-next.org&#x27;</span> %&#125;</span><br><span class="line">    &#123;%- <span class="keyword">if</span> theme.scheme !== <span class="string">&#x27;Gemini&#x27;</span> %&#125;</span><br><span class="line">      &#123;%- <span class="built_in">set</span> next_site = <span class="string">&#x27;https://&#x27;</span> + theme.scheme | lower + <span class="string">&#x27;.theme-next.org&#x27;</span> %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">    &#123;&#123;- __(<span class="string">&#x27;footer.powered&#x27;</span>, next_url(<span class="string">&#x27;https://hexo.io&#x27;</span>, <span class="string">&#x27;Hexo&#x27;</span>, &#123;class: <span class="string">&#x27;theme-link&#x27;</span>&#125;) + <span class="string">&#x27; &amp; &#x27;</span> + next_url(next_site, <span class="string">&#x27;NexT.&#x27;</span> + theme.scheme, &#123;class: <span class="string">&#x27;theme-link&#x27;</span>&#125;)) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>以上修改为以下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;powered-by&quot;</span>&gt;</span><br><span class="line">&lt;i class=<span class="string">&quot;fa fa-user-md&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br><span class="line">本站访客数:&lt;span id=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span class=<span class="string">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br><span class="line">本站访问量&lt;span id=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="返回顶部按钮"><a class="markdownIt-Anchor" href="#返回顶部按钮"></a> 返回顶部按钮</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  sidebar: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  scrollpercent: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="修改底部标签样式"><a class="markdownIt-Anchor" href="#修改底部标签样式"></a> 修改底部标签样式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class="line">tag_icon: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="社交链接"><a class="markdownIt-Anchor" href="#社交链接"></a> 社交链接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/WuShaogui || fab fa-github</span><br><span class="line">  E-Mail: wshglearn@163.com || fa fa-envelope</span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  icons_only: <span class="literal">false</span></span><br><span class="line">  transition: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="打赏配置"><a class="markdownIt-Anchor" href="#打赏配置"></a> 打赏配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line">reward_settings:</span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  animation: <span class="literal">true</span></span><br><span class="line">  comment: 坚持原创技术分享，您的支持将鼓励我继续创作！.</span><br><span class="line"></span><br><span class="line">reward:</span><br><span class="line">  wechatpay: /images/wechatpay.png</span><br><span class="line">  alipay: /images/alipay.png</span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure><h4 id="follow_me"><a class="markdownIt-Anchor" href="#follow_me"></a> Follow_me</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">follow_me:</span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class="line">  RSS: /atom.xml || fa fa-rss</span><br></pre></td></tr></table></figure><h4 id="github角标"><a class="markdownIt-Anchor" href="#github角标"></a> Github角标</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line">github_banner:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  permalink: https://github.com/WuShaogui</span><br><span class="line">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure><h4 id="搜索功能"><a class="markdownIt-Anchor" href="#搜索功能"></a> 搜索功能</h4><p>搜索功能需要安装插件实现，使用npm管理器安装以下插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>在主题配置文件配置以下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="扩增markdown的功能"><a class="markdownIt-Anchor" href="#扩增markdown的功能"></a> 扩增Markdown的功能<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h4><p>hexo默认的渲染插件marked功能比较少，比如不支持脚注功能，部署时，脚注会出错，可以通过安装更强的渲染插件实现功能扩展。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载原始markdown渲染插件</span></span><br><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装新的markdown渲染插件</span></span><br><span class="line">npm i @upupming/hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure><p>修改站点的配置文件<code>[myblog]/_config.yml</code>，增加以下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Markdown config</span></span><br><span class="line">markdown_it_plus:</span><br><span class="line">  render:</span><br><span class="line">    html: <span class="literal">true</span></span><br><span class="line">    xhtmlOut: <span class="literal">false</span></span><br><span class="line">    breaks: <span class="literal">true</span></span><br><span class="line">    linkify: <span class="literal">true</span></span><br><span class="line">    typographer: <span class="literal">true</span></span><br><span class="line">    quotes: <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">  anchors:</span><br><span class="line">    level: 2</span><br><span class="line">    collisionSuffix: <span class="string">&#x27;v&#x27;</span></span><br><span class="line">    permalink: <span class="literal">true</span></span><br><span class="line">    permalinkClass: header-anchor</span><br><span class="line">    permalinkSide: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    permalinkSymbol: ¶</span><br></pre></td></tr></table></figure><p><code>plugins</code>指定需要扩展的功能，支持添加以下功能</p><ul><li><code>markdown-it-emoji</code>支持emoji，<code>:cat:</code>→`🐱</li><li><code>markdown-it-sub</code> 支持<code>H~2~O</code>→H2O</li><li><code>markdown-it-sup</code> 支持<code>X^2^</code>→X2</li><li><code>markdown-it-deflist</code> 支持自定义列表</li><li><code>markdown-it-abbr</code>支持<code>&lt;abbr&gt;</code>标签</li><li><code>markdown-it-footnote</code>支持引入参考文献。emmm就是上标数字，最后附上文献那种</li><li><code>markdown-it-ins</code>支持<code>++Inserted++</code> →Inserted， <code>~~Del~~ →</code>Del</li><li><code>markdown-it-mark</code>支持<code>==marked==</code>→inserted</li><li><code>markdown-it-katex</code><strong>支持katex公式</strong></li><li><code>markdown-it-toc-and-anchor</code>支持<code>@[toc]</code>生成目录</li></ul><p>使用以上扩展功能前，需使用以下命令安装该功能的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install markdown-it-... --save</span><br></pre></td></tr></table></figure><p><strong>添加MathJax 数学公式支持</strong></p><p>在以上配置基础上，修改两个文件</p><h4 id="访客统计"><a class="markdownIt-Anchor" href="#访客统计"></a> 访客统计</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line">busuanzi_count:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  total_visitors: <span class="literal">true</span></span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: <span class="literal">true</span></span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: <span class="literal">true</span></span><br><span class="line">  post_views_icon: fa fa-eye</span><br></pre></td></tr></table></figure><h4 id="阅读全文"><a class="markdownIt-Anchor" href="#阅读全文"></a> 阅读全文<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h4><p>在文章中，使用标记<code>&lt;!-- more --&gt;</code>实现文章摘要功能，该标记前的内容为文章摘要，显示在首页上</p><h4 id="文章置顶"><a class="markdownIt-Anchor" href="#文章置顶"></a> 文章置顶<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h4><p>两个步骤完成该操作</p><p><strong>更换插件</strong></p><p>通过以下命令更换支持置顶的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p><strong>设置置顶标志</strong></p><p>打开文件：<code>/blog/themes/next/layout/_macro/post.swig</code>，在<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下插入以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> post.top %&#125;</span><br><span class="line">   &lt;i class=<span class="string">&quot;fa fa-thumb-tack&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">   &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">   &lt;span class=<span class="string">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>往后写文章时，准备置顶的文章需要在Front-matter中添加<code>top: true</code></p><h4 id="文章字数统计"><a class="markdownIt-Anchor" href="#文章字数统计"></a> 文章字数统计</h4><p><strong>安装字数统计插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure><p><strong>配置开启数字统计</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  item_text_post: <span class="literal">true</span></span><br><span class="line">  item_text_total: <span class="literal">true</span></span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure><h4 id="文章内链接样式"><a class="markdownIt-Anchor" href="#文章内链接样式"></a> 文章内链接样式</h4><p>原始样式只是加一条下划线，为了更加明显显示链接，通过在文件<code>Blog/themes/next/source/css/_common/components/post/post.styl</code>添加以下样式实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: <span class="comment">#0593d3; //原始链接颜色</span></span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid <span class="comment">#0593d3; //底部分割线颜色</span></span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: <span class="comment">#fc6423; //鼠标经过颜色</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid <span class="comment">#fc6423; //底部分割线颜色</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文章结束标志"><a class="markdownIt-Anchor" href="#文章结束标志"></a> 文章结束标志</h4><p>通过3个步骤完成该优化</p><p><strong>新建结束文件</strong></p><p>在目录<code>Blog\themes\next\layout\_macro</code>新建文件<code>passage-end-tag.swig</code>，并添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &lt;div style=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;-------------本文结束&lt;i class=<span class="string">&quot;fa fa-paw&quot;</span>&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>配置结束文件至文章末尾</strong></p><p>打开文件<code>Blog\themes\next\layout\_macro\post.swig</code>，将以下代码添加到post-body之后，post-footer之前</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    &#123;% include <span class="string">&#x27;passage-end-tag.swig&#x27;</span> %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>配置主题配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="文章添加阴影"><a class="markdownIt-Anchor" href="#文章添加阴影"></a> 文章添加阴影</h4><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>，向里面加入以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="文字底部评论"><a class="markdownIt-Anchor" href="#文字底部评论"></a> 文字底部评论</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  appid: xxxxxxxxxxxxxxxxx <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  appkey: xxxxxxxxxxxxxxxxx <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  notify: <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  verify: <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  placeholder: 留下你的评论吧 <span class="comment"># Comment box placeholder</span></span><br><span class="line">  avatar: mm <span class="comment"># Gravatar style</span></span><br><span class="line">  guest_info: nick,mail,link <span class="comment"># Custom comment header</span></span><br><span class="line">  pageSize: 10 <span class="comment"># Pagination size</span></span><br><span class="line">  language: <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  visitor: <span class="literal">true</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  comment_count: <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  recordIP: <span class="literal">true</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  serverURLs: <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure><h4 id="版权声明"><a class="markdownIt-Anchor" href="#版权声明"></a> 版权声明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"><span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: <span class="literal">true</span></span><br><span class="line">  post: <span class="literal">true</span></span><br><span class="line">  language:</span><br></pre></td></tr></table></figure><h4 id="侧边栏配置"><a class="markdownIt-Anchor" href="#侧边栏配置"></a> 侧边栏配置</h4><p>将菜单栏配置在左边还是右边，以及大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.org/docs/theme-settings/sidebar</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">sidebar:</span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  position: left</span><br><span class="line">  <span class="comment"># position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  width: 240</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  display: post</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar padding in pixels.</span></span><br><span class="line">  padding: 18</span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  offset: 12</span><br><span class="line">  <span class="comment"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class="line">  onmobile: <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line">avatar:</span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  url: /images/avatar.gif</span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  rounded: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  rotated: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="rss及rss侧边栏"><a class="markdownIt-Anchor" href="#rss及rss侧边栏"></a> RSS及RSS侧边栏</h4><p><strong>安装rss插件</strong></p><p>运行下面命令安装rss插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p><strong>配置rss功能</strong></p><p>在<code>_config.next.yml</code>中找到rss配置项，修改为以下形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><h4 id="设置头像"><a class="markdownIt-Anchor" href="#设置头像"></a> 设置头像</h4><p>无</p><h4 id="网站背景"><a class="markdownIt-Anchor" href="#网站背景"></a> 网站背景</h4><p>无</p><h4 id="动态背景"><a class="markdownIt-Anchor" href="#动态背景"></a> 动态背景</h4><p>略，暂不设置，需要消耗电脑资源，并且干扰阅读</p><h4 id="网站运行时间"><a class="markdownIt-Anchor" href="#网站运行时间"></a> 网站运行时间</h4><p>打开文件<code>themes/next/layout/_partials/footer.swig</code>，添加以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;timeDate&quot;</span>&gt;载入天数...&lt;/span&gt;&lt;span id=<span class="string">&quot;times&quot;</span>&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">createtime</span></span>() &#123;</span><br><span class="line">        var grt= new Date(<span class="string">&quot;03/04/2020 00:00:00&quot;</span>);</span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">        <span class="keyword">if</span>(String(hnum).length ==1 )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes); <span class="keyword">if</span>(String(mnum).length ==1 )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds); <span class="keyword">if</span>(String(snum).length ==1 )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125;</span><br><span class="line">        document.getElementById(<span class="string">&quot;timeDate&quot;</span>).innerHTML = <span class="string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>;</span><br><span class="line">        document.getElementById(<span class="string">&quot;times&quot;</span>).innerHTML = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(<span class="string">&quot;createtime()&quot;</span>,250);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="添加网易云音乐"><a class="markdownIt-Anchor" href="#添加网易云音乐"></a> 添加网易云音乐</h4><p>获得单曲或者歌单的<code>外链播放器</code>，将代码添加到<code>themes/next/layout/_macro/sidebar.swig</code>下，以下是一个外链播放器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> marginwidth=<span class="string">&quot;0&quot;</span> marginheight=<span class="string">&quot;0&quot;</span> width=330 height=86 src=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=481853876&amp;auto=1&amp;height=66&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><strong>参考资料<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>：</strong></p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://www.jianshu.com/p/4d37bc01290b">Hexo 添加分类及标签</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://blog.csdn.net/qq_36667170/article/details/105846999">hexo markdown渲染器 @upupming/hexo-renderer-markdown-it-plus</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://blog.csdn.net/yueyue200830/article/details/104470646/">设置hexo首页只显示部分摘要（不显示全文）</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://blog.csdn.net/qwerty200696/article/details/79010629">hexo博客优化之文章置顶+置顶标签</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/">Hexo博客设置以及Next主题美化</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/129644138">hexo+next个性化配置</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;基于github pages完成博客搭建后，已经可以正常发文了，但是文字展示不美观，本文展示如何在Linux为Hexo博客安装Next主题，并进行详细配置&lt;/p&gt;</summary>
    
    
    
    <category term="软件工具" scheme="https://shaogui.life/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Hexo" scheme="https://shaogui.life/tags/Hexo/"/>
    
    <category term="博客" scheme="https://shaogui.life/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Next" scheme="https://shaogui.life/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>在Linux上完成Hexo博客的搭建</title>
    <link href="https://shaogui.life/2021/02/18/%E5%9C%A8Linux%E4%B8%8A%E5%AE%8C%E6%88%90Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://shaogui.life/2021/02/18/%E5%9C%A8Linux%E4%B8%8A%E5%AE%8C%E6%88%90Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2021-02-18T07:00:44.000Z</published>
    <updated>2021-02-18T15:23:44.625Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍在Linux完成Hexo博客的搭建，包括安装和配置Hexo，将博客部署到github，使得可以通过github page的方式进行访问博客</p><a id="more"></a><h2 id="系统环境"><a class="markdownIt-Anchor" href="#系统环境"></a> 系统环境</h2><p>本系列文章所有操作在系统<code>Linux Mint 20 Cinnamon</code>上完成，其他关联应用版本为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node@v10.19.0</span><br><span class="line">npm@6.14.4</span><br><span class="line">hexo@5.3.0</span><br><span class="line">git@2.25.1</span><br></pre></td></tr></table></figure><h2 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h2><h3 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装nodejs</h3><p>Hexo是基于nodeJS编写的，所以需要安装nodeJs和npm工具，其安装使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nodejs</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure><h3 id="配置npm镜像"><a class="markdownIt-Anchor" href="#配置npm镜像"></a> 配置npm镜像<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h3><p>npm是nodeJs的包管理工具，用于从NPM服务器下载第三方包到本地使用或上传自己编写的包，但是国内直接使用npm的官方镜像往往较慢，因此建议使用<code>淘宝镜像</code>，可以通过两种方式达到这个目地：</p><ul><li><strong>更改npm的默认镜像</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前镜像地址</span></span><br><span class="line">npm get registry</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置为淘宝镜像</span></span><br><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br><span class="line">yarn config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br><span class="line"></span><br><span class="line"><span class="comment">#还原为原始配置</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><ul><li><strong>安装淘宝定制的cnpm工具</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装cnpm工具</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用cnpm工具</span></span><br><span class="line">cnpm install [name]</span><br></pre></td></tr></table></figure><h2 id="博客初始化"><a class="markdownIt-Anchor" href="#博客初始化"></a> 博客初始化</h2><h3 id="安装hexo-2"><a class="markdownIt-Anchor" href="#安装hexo-2"></a> 安装hexo</h3><p>通过npm工具安装hexo，使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="博客初始化-2"><a class="markdownIt-Anchor" href="#博客初始化-2"></a> 博客初始化</h3><p>使用hexo初始化博客，初始化文件夹为空或不存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化+安装npm</span></span><br><span class="line">hexo init myblog;<span class="built_in">cd</span> myblog;sudo npm install</span><br></pre></td></tr></table></figure><p>安装完成后，得到以下文件结构</p><p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218110745470.png" alt="image-20210218110745470" /></p><h3 id="测试博客"><a class="markdownIt-Anchor" href="#测试博客"></a> 测试博客</h3><p>在新建的博客目录下，使用以下命令测试博客是否初始化完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>浏览器打开：<a href="http://localhost:4000/%E5%90%8E%EF%BC%8C%E5%BE%97%E5%88%B0%E4%BB%A5%E4%B8%8B%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%A1%A8%E9%9D%A2%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%A7%8B%E5%8C%96%E6%88%90%E5%8A%9F">http://localhost:4000/后，得到以下页面，表面博客初始化成功</a></p><p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218111018667.png" alt="image-20210218111018667" /></p><h2 id="发布博客到github-page"><a class="markdownIt-Anchor" href="#发布博客到github-page"></a> 发布博客到Github Page</h2><h3 id="配置本地及github"><a class="markdownIt-Anchor" href="#配置本地及github"></a> 配置本地及github</h3><p>为了将博客部署到github，需要在本地生成SSH key，并将公钥配置到github</p><h5 id="本地生成公钥及密钥"><a class="markdownIt-Anchor" href="#本地生成公钥及密钥"></a> 本地生成公钥及密钥</h5><p>使用以下命令，一直回车生成公钥和密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-kengen -t rsa -C <span class="string">&quot;yourmail&quot;</span></span><br></pre></td></tr></table></figure><p>生成之后的公钥及密钥保存在目录<code>~/.ssh</code>内，其中<code>id_rsa</code>为私钥，不可泄漏，id_rsa.pub为公钥，将配置到github上，上传代码时，公钥和私钥相互匹配，才能顺利上传代码。</p><h5 id="公钥配置到github"><a class="markdownIt-Anchor" href="#公钥配置到github"></a> 公钥配置到github</h5><p>登录github后，依次进入<code>Settings</code>-&gt;<code>SSH and GPG keys</code>，然后点击<code>New SSH key</code>，将公钥文件id_rsa.pub里面的内容全部填到<code>Key</code>上</p><p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218154730042.png" alt="image-20210218154730042" /></p><h5 id="测试是否配置成功"><a class="markdownIt-Anchor" href="#测试是否配置成功"></a> 测试是否配置成功</h5><p>使用以下命令检查，配置是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="安装部署插件"><a class="markdownIt-Anchor" href="#安装部署插件"></a> 安装部署插件</h3><p>通过npm安装git插件，以便进行github部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="新建github-pages仓库"><a class="markdownIt-Anchor" href="#新建github-pages仓库"></a> 新建github pages仓库</h3><p>推送前需先新建一个用于存储博客的仓库，该仓库为用户的github page（GitHub Pages is a static site hosting service designed to host your  personal, organization, or project pages directly from a GitHub  repository）<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>，以下两个操作完成此步骤：</p><ol><li>新建一个公开（Public）仓库，仓库名为<code>你的用户名.github.io</code>；</li><li>进入仓库的<code>Settings</code>，找到Github Page，在<code>Source</code>选择分支，并保存</li><li>浏览器访问<code>https://[YourUserName].github.io/</code>，成功访问即配置成功（这可能需要科学上网）</li></ol><h3 id="设置博客部署仓库"><a class="markdownIt-Anchor" href="#设置博客部署仓库"></a> 设置博客部署仓库</h3><p>将远程仓库地址配置到博客配置文件中，部署时往此仓库推送，打开<code>_config.yml</code>文件，在最后找到Deployment配置项，按以下方式配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/[YourUserName]/[YourUserName].github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="推送博客到github-pages仓库"><a class="markdownIt-Anchor" href="#推送博客到github-pages仓库"></a> 推送博客到github pages仓库</h3><p>使用以下命令推送hexo博客到github page仓库上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean;hexo generate;hexo deploy</span><br></pre></td></tr></table></figure><p>在浏览器上再次访问<code>https://[YourUserName].github.io/</code>，出现以下画面表示成功</p><p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218111018667.png" alt="image-20210218111018667" /></p><h2 id="绑定域名"><a class="markdownIt-Anchor" href="#绑定域名"></a> 绑定域名</h2><p>每次访问博客，均需使用<code>https://[YourUserName].github.io/</code>打开，本着<s>装逼</s>的原则，申请一个个人使用的域名，即可以便于记忆/宣传，又隐藏博客在github page的行为，代价是需要RMB（一年几十）。</p><h3 id="申请域名"><a class="markdownIt-Anchor" href="#申请域名"></a> 申请域名</h3><p>我是在腾讯云申请的域名，阿里云也可以通过申请，访问：<a href="https://dnspod.cloud.tencent.com/%EF%BC%8C%E6%90%9C%E7%B4%A2%E8%87%AA%E5%B7%B1%E8%AE%A1%E5%88%92%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%8C%E9%80%89%E6%8B%A9%E5%AE%8C%E6%88%90%E5%90%8E%E4%BB%98%E8%B4%B9%EF%BC%8C%E5%AE%8C%E6%88%90%E5%AE%9E%E5%90%8D%E8%AE%A4%E8%AF%81%EF%BC%8B%E5%A4%87%E6%A1%88%EF%BC%8C%E5%8D%B3%E5%8F%AF%E4%BD%BF%E7%94%A8%E3%80%82">https://dnspod.cloud.tencent.com/，搜索自己计划使用的域名，选择完成后付费，完成实名认证＋备案，即可使用。</a></p><p>完成域名申请后，需配置域名的解析地址，按照以下方式添加两个记录</p><p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218163454662.png" alt="image-20210218163454662" /></p><h3 id="绑定域名-2"><a class="markdownIt-Anchor" href="#绑定域名-2"></a> 绑定域名</h3><p>通过以下两个步骤完成域名的绑定</p><p><strong>1.配置Hexo博客</strong></p><p>在hexo/source目录下新建一个名为<code>CNAME</code>的文件，然后将申请的域名填写到里面</p><p><strong>2.配置Github Pages</strong></p><p>到仓库的Github Pages页面，在<code>Custom domain</code>配置申请的域名（注意：配置成功后不会立马生效）</p><p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218165026184.png" alt="image-20210218165026184" /></p><p>在浏览器上通过申请的域名访问博客，如果成功，则配置成功！！！</p><h2 id="发文流程"><a class="markdownIt-Anchor" href="#发文流程"></a> 发文流程</h2><p>使用以下命令新建一个博文，然后使用markdwn格式写博文，再然后部署到github pages上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文件名.md&quot;</span></span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a class="markdownIt-Anchor" href="#遇到的问题"></a> 遇到的问题</h2><p>1.<code>sudo npm install -g hexo</code>遇到rollbackFailedOptional: verb npm-session<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p><p>原因：（1）网络原因；（2）未配置国内镜像服务器；</p><p>解决：配置npm使用淘宝镜像服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>参考资料<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup>：</p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://www.runoob.com/nodejs/nodejs-npm.html">NPM 使用介绍</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://blog.csdn.net/shangrila_kun/article/details/89633374">npm的镜像替换成淘宝</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://docs.github.com/en/enterprise/2.14/user/articles/what-is-github-pages">What is GitHub Pages?</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://blog.csdn.net/qq_34458791/article/details/82705345">npm install rollbackFailedOptional: verb npm-session</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html">使用hexo+github搭建免费个人博客详细教程</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://segmentfault.com/a/1190000017986794">超详细Hexo+Github Page搭建技术博客教程【持续更新】</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p></li><li id="fn8" class="footnote-item"><p><a href="https://cloud.tencent.com/developer/article/1520557">这可能是迄今为止最全的hexo博客搭建教程</a> <a href="#fnref8" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍在Linux完成Hexo博客的搭建，包括安装和配置Hexo，将博客部署到github，使得可以通过github page的方式进行访问博客&lt;/p&gt;</summary>
    
    
    
    <category term="软件工具" scheme="https://shaogui.life/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Hexo" scheme="https://shaogui.life/tags/Hexo/"/>
    
    <category term="博客" scheme="https://shaogui.life/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>404</title>
    <link href="https://shaogui.life/2021/02/15/404/"/>
    <id>https://shaogui.life/2021/02/15/404/</id>
    <published>2021-02-15T02:28:10.000Z</published>
    <updated>2021-02-18T08:43:35.489Z</updated>
    
    
    <summary type="html">你来到了没有知识的荒原 :(</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>如何释放Linux存储空间</title>
    <link href="https://shaogui.life/2021/02/06/%E5%A6%82%E4%BD%95%E9%87%8A%E6%94%BELinux%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4/"/>
    <id>https://shaogui.life/2021/02/06/%E5%A6%82%E4%BD%95%E9%87%8A%E6%94%BELinux%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4/</id>
    <published>2021-02-06T01:45:34.000Z</published>
    <updated>2021-02-18T08:43:35.673Z</updated>
    
    <content type="html"><![CDATA[<p>由于服务器上存储空间即将用完，不得不需要释放新的空间，及挂载新的硬盘，本文展示如何在Linux查看硬盘情况，释放硬盘空间及挂载新的硬盘</p><a id="more"></a><h2 id="查看当前硬盘情况"><a class="markdownIt-Anchor" href="#查看当前硬盘情况"></a> 查看当前硬盘情况<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -lh</span><br></pre></td></tr></table></figure><p>查看当前挂载的硬盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p><strong>释放空间</strong></p><p>通过以下命令逐级搜索Linux目录，找出占用空间的最大的文件，将其删除或移除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du --max-depth&#x3D;1 -lh</span><br></pre></td></tr></table></figure><h2 id="格式化分区"><a class="markdownIt-Anchor" href="#格式化分区"></a> 格式化分区</h2><p>在linux上挂载新硬盘前，尽量使用ext4格式，所以不是该格式的建议提前先格式化（格式化时需提前卸载硬盘）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sda1</span><br></pre></td></tr></table></figure><p>ext4格式的硬盘下，经常能看见 系统创建的lost+found的文件夹<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><ul><li>通常是未链接的文件（名字已经被删除），但是这些文件还被一些进程使用（数据没有删除），在突然关机时（内核panic或者突然断电）出现，这些文件系统会自动删除。</li><li>当因为软件或者硬件出现错误，导致文件系统不一致，也有可能把有问题的文件放到lost+found目录。它提供了恢复丢失文件的一种方法</li><li>如果你不小心删除了lost+found目录，不能使用mkdir命令创建lost+found目录，应该使用mklost+found命令创建它</li></ul><h2 id="挂载硬盘"><a class="markdownIt-Anchor" href="#挂载硬盘"></a> 挂载硬盘</h2><p>使用以下命令将新硬盘挂载到系统上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda1 /mnt</span><br></pre></td></tr></table></figure><p><strong>开机挂载硬盘</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fatab</span><br></pre></td></tr></table></figure><p>在该文件内添加一行，指明待加载的硬盘<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><p><img src="C:%5CUsers%5Cwushaogui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210205155011394.png" alt="image-20210205155011394" /></p><p>参数解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">要挂载的设备或伪文件系统：设备文件、LABEL(LABEL&#x3D;&quot;&quot;)、UUID(UUID&#x3D;&quot;&quot;)、伪文件系统名称(proc, sysfs)</span><br><span class="line">挂载点：指定的文件夹</span><br><span class="line">挂载选项：defaults</span><br><span class="line">转储频率：0：不做备份;1：每天转储;2：每隔一天转储</span><br><span class="line">自检次序：0：不自检；1：首先自检；一般只有rootfs才用1；</span><br></pre></td></tr></table></figure><h2 id="卸载磁盘"><a class="markdownIt-Anchor" href="#卸载磁盘"></a> 卸载磁盘</h2><p>通过以下命令卸载磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sda1或/mnt</span><br></pre></td></tr></table></figure><p>查看分区的uuid<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blkid</span><br></pre></td></tr></table></figure><p><strong>对挂载及挂载点的理解</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3:1]</a></sup></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</span><br></pre></td></tr></table></figure><ol><li>挂载：根文件系统外通过关联至根文件系统上的某个目录来实现访问</li><li>挂载点：mount_point，用于作为另一个文件系统的访问入口</li></ol><p>挂载点必须满足以下要求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) 事先存在；</span><br><span class="line">(2) 应该使用未被或不会被其它进程使用到的目录；</span><br><span class="line">(3) 挂载点下原有的文件将会被隐藏；</span><br></pre></td></tr></table></figure><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Linux下挂载机械硬盘(<a href="https://blog.csdn.net/m0_37407756/article/details/79529399">https://blog.csdn.net/m0_37407756/article/details/79529399</a>) <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://www.cnblogs.com/cheyunhua/p/14158174.html">Linux系统中根目录下或者新挂载的磁盘目录下有一个叫lost+found，它的作用是什么？</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://www.linuxidc.com/linux/2016-08/134666.htm">Linux基础知识之挂载详解（mount,umount及开机自动挂载）</a> <a href="#fnref3" class="footnote-backref">↩︎</a> <a href="#fnref3:1" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://www.linuxprobe.com/partition-file-system.html">Linux查看分区文件系统类型的几种方法</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于服务器上存储空间即将用完，不得不需要释放新的空间，及挂载新的硬盘，本文展示如何在Linux查看硬盘情况，释放硬盘空间及挂载新的硬盘&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://shaogui.life/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="https://shaogui.life/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>如何编译opencv（带cuda模块）</title>
    <link href="https://shaogui.life/2021/02/05/%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91opencv%EF%BC%88%E5%B8%A6cuda%E6%A8%A1%E5%9D%97%EF%BC%89/"/>
    <id>https://shaogui.life/2021/02/05/%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91opencv%EF%BC%88%E5%B8%A6cuda%E6%A8%A1%E5%9D%97%EF%BC%89/</id>
    <published>2021-02-05T02:23:44.000Z</published>
    <updated>2021-02-18T08:43:35.717Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍编译包含cuda模块的opencv，可以在GPU上完成opencv的操作，加速opencv的处理速度，本文用于记录在Linux上编译opencv的过程、问题</p><a id="more"></a><p><strong>编译环境</strong>：</p><ul><li><p>系统：Ubuntu 16.04</p></li><li><p>显卡：RTX3090</p></li><li><p>cmake：3.19.3</p></li><li><p>gcc：6.5.0</p></li></ul><blockquote><p>注：cmake、gcc系统自带版本不是3.19.3、6.5.0，为解决cmake过程中文件下载问题，升级cmake到3.19.3，但是感觉没有作用；gcc原始是5.x.x，升级之后避免了一些错误，是有效的</p></blockquote><p><strong>软件依赖</strong>：</p><ul><li>cuda    11.1</li><li>cudnn  8.0.5</li></ul><p>默认在以上环境下，编译<code>opencv4.4.0</code>，包括C++和Python3的接口。（编译v4.4.0之前，使用v4.2.0进行编译，一直无法找到cudnn，可能是cuda及cudnn版本较高，较低版本的opencv还未适配，所以建议对opencv4.4.0及以上版本进行编译，类似经历出现在<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>）</p><h2 id="下载源码"><a class="markdownIt-Anchor" href="#下载源码"></a> 下载源码</h2><p>从<a href="https://github.com/opencv/opencv/tags">github</a>下载opencv4.4.0及opencv_contrib-4.4.0</p><p>解压后，将opencv_contrib-4.4.0放进opencv4.4.0目录下，并新建编译文件夹（build），文件目录结构如下：</p><p><img src="C:%5CUsers%5Cwushaogui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210205104342803.png" alt="image-20210205104342803" /></p><h2 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h2><blockquote><p>以下参考：<a href="https://medium.com/@sb.jaduniv/how-to-install-opencv-4-2-0-with-cuda-10-1-on-ubuntu-20-04-lts-focal-fossa-bdc034109df3">How to install OpenCV 4.2.0 with CUDA 10.1 on Ubuntu 20.04 LTS (Focal Fossa)</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新系统</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译工具</span></span><br><span class="line">sudo apt install build-essential cmake pkg-config unzip yasm git checkinstall</span><br><span class="line"></span><br><span class="line"><span class="comment">#Image I/O libs</span></span><br><span class="line">sudo apt install libjpeg-dev libpng-dev libtiff-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#Video/Audio Libs — FFMPEG, GSTREAMER, x264 and so on.</span></span><br><span class="line">sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev </span><br><span class="line">sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev </span><br><span class="line">sudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev  </span><br><span class="line">sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#OpenCore — Adaptive Multi Rate Narrow Band (AMRNB) and Wide Band (AMRWB) speech codec</span></span><br><span class="line">sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#Cameras programming interface libs</span></span><br><span class="line">sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils </span><br><span class="line"><span class="built_in">cd</span> /usr/include/linux </span><br><span class="line">sudo ln -s -f ../libv4l1-videodev.h videodev.h </span><br><span class="line"></span><br><span class="line"><span class="comment">#GTK lib for the graphical user functionalites coming from OpenCV highghui module</span></span><br><span class="line">sudo apt-get install libgtk-3-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python libraries for python3（本文安装至conda下，无次步骤）</span></span><br><span class="line">sudo apt-get install python3-dev python3-pip</span><br><span class="line">sudo -H pip3 install -U pip numpy</span><br><span class="line">sudo apt install python3-testresources</span><br><span class="line"></span><br><span class="line"><span class="comment">#Parallelism library C++ for CPU</span></span><br><span class="line">sudo apt-get install libtbb-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#Optimization libraries for OpenCV</span></span><br><span class="line">sudo apt-get install libatlas-base-dev gfortran</span><br><span class="line"></span><br><span class="line"><span class="comment">#Optional libraries</span></span><br><span class="line">sudo apt-get install libprotobuf-dev protobuf-compiler </span><br><span class="line">sudo apt-get install libgoogle-glog-dev libgflags-dev </span><br><span class="line">sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen</span><br></pre></td></tr></table></figure><h2 id="cmake生成待编译文件"><a class="markdownIt-Anchor" href="#cmake生成待编译文件"></a> cmake生成待编译文件</h2><p>进入build目录下，执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">-D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> \</span><br><span class="line">-D CMAKE_C_COMPILER=/usr/bin/gcc-6 \</span><br><span class="line">-D INSTALL_PYTHON_EXAMPLES=ON \</span><br><span class="line">-D INSTALL_C_EXAMPLES=ON \</span><br><span class="line">-D OPENCV_ENABLE_NONFREE=ON \</span><br><span class="line">-D BUILD_opencv_python3=ON \</span><br><span class="line">-D WITH_CUDA=ON \</span><br><span class="line">-D WITH_CUDNN=ON \</span><br><span class="line">-D WITH_TBB=ON \</span><br><span class="line">-D OPENCV_DNN_CUDA=ON \</span><br><span class="line">-D ENABLE_FAST_MATH=1 \</span><br><span class="line">-D CUDA_FAST_MATH=1 \</span><br><span class="line">-D CUDA_ARCH_BIN=8.6 \</span><br><span class="line">-D WITH_CUBLAS=1 \</span><br><span class="line">-D OPENCV_GENERATE_PKGCONFIG=ON \</span><br><span class="line">-D OPENCV_EXTRA_MODULES_PATH=/home/xx/soft/opencv_gpu/opencv-4.4.0/opencv_contrib-4.4.0/modules \</span><br><span class="line">-D PYTHON3_EXECUTABLE=/home/xx/anaconda3/envs/py37/bin/python3.7m \</span><br><span class="line">-D PYTHON3_INCLUDE_DIR=/home/xx/anaconda3/envs/py37/include/python3.7m \</span><br><span class="line">-D PYTHON3_LIBRARY=/home/xx/anaconda3/envs/py37/lib/libpython3.7m.so \</span><br><span class="line">-D PYTHON3_NUMPY_INCLUDE_DIRS=/home/xx/anaconda3/envs/py37/lib/python3.7/site-packages/numpy/core/include \</span><br><span class="line">-D PYTHON3_PACKAGES_PATH=/home/xx/anaconda3/envs/py37/lib/python3.7/site-packages \</span><br><span class="line">-D PYTHON_DEFAULT_EXECUTABLE=/home/xx/anaconda3/envs/py37/bin/python3.7m \</span><br><span class="line">-D CUDNN_LIBRARY=/usr/<span class="built_in">local</span>/cuda/lib64/libcudnn.so.8.0.5 \</span><br><span class="line">-D CUDNN_INCLUDE_DIR=/usr/<span class="built_in">local</span>/cuda/include  \</span><br><span class="line">-D CUDA_CUDA_LIBRARY=/usr/<span class="built_in">local</span>/cuda/lib64/stubs/libcuda.so \</span><br><span class="line">-D OPENCV_PYTHON3_INSTALL_PATH=/home/xx/anaconda3/envs/py37/lib/python3.7/site-packages \</span><br><span class="line">-D WITH_WEBP=OFF \</span><br><span class="line">-D WITH_OPENCL=OFF \</span><br><span class="line">-D ETHASHLCL=OFF \</span><br><span class="line">-D ENABLE_CXX11=ON \</span><br><span class="line">-D BUILD_EXAMPLES=OFF \</span><br><span class="line">-D OPENCV_ENABLE_NONFREE=ON \</span><br><span class="line">-D WITH_OPENGL=ON \</span><br><span class="line">-D WITH_GSTREAMER=ON \</span><br><span class="line">-D WITH_V4L=ON \</span><br><span class="line">-D WITH_QT=OFF \</span><br><span class="line">-D BUILD_opencv_python3=ON \</span><br><span class="line">-D BUILD_opencv_python2=OFF \</span><br><span class="line">-D HAVE_opencv_python3=ON   ..</span><br></pre></td></tr></table></figure><p><strong>关键参数说明</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BUILD_opencv_python3：</span><br><span class="line">CUDA_ARCH_BIN:显卡算力,Nvidia官网查询，RTX3090对应8.6</span><br><span class="line">OPENCV_GENERATE_PKGCONFIG：生成pkg-config，这个务必打开，不然安装成功找不到opencv</span><br></pre></td></tr></table></figure><p>cmake后最终确认得到以下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">-- General configuration <span class="keyword">for</span> OpenCV 4.4.0 =====================================</span><br><span class="line">Version control:               unknown</span><br><span class="line">-- </span><br><span class="line">Extra modules:</span><br><span class="line">  Location (extra):            /home/xx/soft/opencv_gpu/opencv-4.4.0/opencv_contrib-4.4.0/modules</span><br><span class="line">  Version control (extra):     unknown</span><br><span class="line">-- </span><br><span class="line">Platform:</span><br><span class="line">  Timestamp:                   2021-02-05T02:31:19Z</span><br><span class="line">  Host:                        Linux 4.15.0-133-generic x86_64</span><br><span class="line">  CMake:                       3.19.3</span><br><span class="line">  CMake generator:             Unix Makefiles</span><br><span class="line">  CMake build tool:            /usr/bin/make</span><br><span class="line">  Configuration:               RELEASE</span><br><span class="line">-- </span><br><span class="line">CPU/HW features:</span><br><span class="line">  Baseline:                    SSE SSE2 SSE3</span><br><span class="line">    requested:                 SSE3</span><br><span class="line">  Dispatched code generation:  SSE4_1 SSE4_2 FP16 AVX AVX2 AVX512_SKX</span><br><span class="line">    requested:                 SSE4_1 SSE4_2 AVX FP16 AVX2 AVX512_SKX</span><br><span class="line">    SSE4_1 (17 files):         + SSSE3 SSE4_1</span><br><span class="line">    SSE4_2 (2 files):          + SSSE3 SSE4_1 POPCNT SSE4_2</span><br><span class="line">    FP16 (1 files):            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 AVX</span><br><span class="line">    AVX (5 files):             + SSSE3 SSE4_1 POPCNT SSE4_2 AVX</span><br><span class="line">    AVX2 (31 files):           + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2</span><br><span class="line">    AVX512_SKX (7 files):      + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2 AVX_512F AVX512_COMMON AVX512_SKX</span><br><span class="line">-- </span><br><span class="line">C/C++:</span><br><span class="line">  Built as dynamic libs?:      YES</span><br><span class="line">  C++ standard:                11</span><br><span class="line">  C++ Compiler:                /usr/bin/c++  (ver 6.5.0)</span><br><span class="line">  C++ flags (Release):         -fsigned-char -ffast-math -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-psabi -Wsuggest-override -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -fvisibility-inlines-hidden -O3 -DNDEBUG  -DNDEBUG</span><br><span class="line">  C++ flags (Debug):           -fsigned-char -ffast-math -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-psabi -Wsuggest-override -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -fvisibility-inlines-hidden -g  -O0 -DDEBUG -D_DEBUG</span><br><span class="line">  C Compiler:                  /usr/bin/gcc-6</span><br><span class="line">  C flags (Release):           -fsigned-char -ffast-math -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-psabi -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -O3 -DNDEBUG  -DNDEBUG</span><br><span class="line">  C flags (Debug):             -fsigned-char -ffast-math -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-psabi -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -g  -O0 -DDEBUG -D_DEBUG</span><br><span class="line">  Linker flags (Release):      -Wl,--gc-sections -Wl,--as-needed  </span><br><span class="line">  Linker flags (Debug):        -Wl,--gc-sections -Wl,--as-needed  </span><br><span class="line">  ccache:                      NO</span><br><span class="line">  Precompiled headers:         NO</span><br><span class="line">  Extra dependencies:          m pthread cudart_static dl rt nppc nppial nppicc nppidei nppif nppig nppim nppist nppisu nppitc npps cublas cudnn cufft -L/usr/<span class="built_in">local</span>/cuda/lib64 -L/usr/lib/x86_64-linux-gnu</span><br><span class="line">  3rdparty dependencies:</span><br><span class="line">-- </span><br><span class="line">OpenCV modules:</span><br><span class="line">  To be built:                 alphamat aruco bgsegm bioinspired calib3d ccalib core cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev datasets dnn dnn_objdetect dnn_superres dpm face features2d flann freetype fuzzy gapi hdf hfs highgui img_hash imgcodecs imgproc intensity_transform line_descriptor ml objdetect optflow phase_unwrapping photo plot python3 quality rapid reg rgbd saliency sfm shape stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab xfeatures2d ximgproc xobjdetect xphoto</span><br><span class="line">  Disabled:                    python2 world</span><br><span class="line">  Disabled by dependency:      -</span><br><span class="line">  Unavailable:                 cnn_3dobj cvv java js julia matlab ovis viz</span><br><span class="line">  Applications:                tests perf_tests apps</span><br><span class="line">  Documentation:               NO</span><br><span class="line">  Non-free algorithms:         YES</span><br><span class="line">-- </span><br><span class="line">GUI: </span><br><span class="line">  GTK+:                        YES (ver 3.18.9)</span><br><span class="line">    GThread :                  YES (ver 2.48.2)</span><br><span class="line">    GtkGlExt:                  NO</span><br><span class="line">  OpenGL support:              NO</span><br><span class="line">  VTK support:                 NO</span><br><span class="line">-- </span><br><span class="line">Media I/O: </span><br><span class="line">  ZLib:                        /usr/lib/x86_64-linux-gnu/libz.so (ver 1.2.8)</span><br><span class="line">  JPEG:                        /usr/lib/x86_64-linux-gnu/libjpeg.so (ver 80)</span><br><span class="line">  PNG:                         /usr/lib/x86_64-linux-gnu/libpng.so (ver 1.2.54)</span><br><span class="line">  TIFF:                        /usr/lib/x86_64-linux-gnu/libtiff.so (ver 42 / 4.0.6)</span><br><span class="line">  JPEG 2000:                   OpenJPEG (ver 2.4.0)</span><br><span class="line">  OpenEXR:                     build (ver 2.3.0)</span><br><span class="line">  HDR:                         YES</span><br><span class="line">  SUNRASTER:                   YES</span><br><span class="line">  PXM:                         YES</span><br><span class="line">  PFM:                         YES</span><br><span class="line">-- </span><br><span class="line">Video I/O:</span><br><span class="line">  DC1394:                      YES (2.2.4)</span><br><span class="line">  FFMPEG:                      YES</span><br><span class="line">    avcodec:                   YES (56.60.100)</span><br><span class="line">    avformat:                  YES (56.40.101)</span><br><span class="line">    avutil:                    YES (54.31.100)</span><br><span class="line">    swscale:                   YES (3.1.101)</span><br><span class="line">    avresample:                YES (2.1.0)</span><br><span class="line">  GStreamer:                   YES (1.8.3)</span><br><span class="line">  v4l/v4l2:                    YES (linux/videodev2.h)</span><br><span class="line">-- </span><br><span class="line">Parallel framework:            TBB (ver 4.4 interface 9002)</span><br><span class="line">-- </span><br><span class="line">Trace:                         YES (with Intel ITT)</span><br><span class="line">-- </span><br><span class="line">Other third-party libraries:</span><br><span class="line">  Lapack:                      YES (/usr/lib/libopenblas.so)</span><br><span class="line">  Eigen:                       YES (ver 3.2.92)</span><br><span class="line">  Custom HAL:                  NO</span><br><span class="line">  Protobuf:                    build (3.5.1)</span><br><span class="line">-- </span><br><span class="line">NVIDIA CUDA:                   YES (ver 11.1, CUFFT CUBLAS FAST_MATH)</span><br><span class="line">  NVIDIA GPU arch:             86</span><br><span class="line">  NVIDIA PTX archs:</span><br><span class="line">-- </span><br><span class="line">cuDNN:                         YES (ver 8.0.5)</span><br><span class="line">-- </span><br><span class="line">Python 3:</span><br><span class="line">  Interpreter:                 /home/xx/anaconda3/envs/py37/bin/python3.7m (ver 3.7.9)</span><br><span class="line">  Libraries:                   /home/xx/anaconda3/envs/py37/lib/libpython3.7m.so (ver 3.7.9)</span><br><span class="line">  numpy:                       /home/xx/anaconda3/envs/py37/lib/python3.7/site-packages/numpy/core/include (ver 1.19.2)</span><br><span class="line">  install path:                /home/xx/anaconda3/envs/py37/lib/python3.7/site-packages/cv2/python-3.7</span><br><span class="line">-- </span><br><span class="line">Python (<span class="keyword">for</span> build):            /home/xx/anaconda3/envs/py37/bin/python3.7m</span><br><span class="line">-- </span><br><span class="line">Java:                          </span><br><span class="line">  ant:                         NO</span><br><span class="line">  JNI:                         NO</span><br><span class="line">  Java wrappers:               NO</span><br><span class="line">  Java tests:                  NO</span><br><span class="line">-- </span><br><span class="line">Install to:                    /usr/<span class="built_in">local</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注：系统用户名使用<code>xx</code>替代</p></blockquote><h2 id="gcc编译"><a class="markdownIt-Anchor" href="#gcc编译"></a> gcc编译</h2><p>在build目录下执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j16</span><br></pre></td></tr></table></figure><blockquote><p>注：虽然直接make出问题的概率更小，但是为了加速编译速度，这里指使用16个多线程进行编译，这里多线程数量一般不大于CPU核心数，可以通过<code>nproc</code>命令查看CPU核心数。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p></blockquote><h2 id="安装到系统"><a class="markdownIt-Anchor" href="#安装到系统"></a> 安装到系统</h2><p>在build目录下执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h2><p>执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /bin/bash -c <span class="string">&#x27;echo &quot;/usr/local/lib&quot; &gt;&gt; /etc/ld.so.conf.d/opencv.conf&#x27;</span></span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>如果想将opencv安装到Python，建议在cmake编译参数中使用<code>-D OPENCV_PYTHON3_INSTALL_PATH</code>指定安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-D OPENCV_PYTHON3_INSTALL_PATH=/home/xx/anaconda3/envs/py37/lib/python3.7/site-packages \</span><br></pre></td></tr></table></figure><h2 id="查看opencv是否安装成功"><a class="markdownIt-Anchor" href="#查看opencv是否安装成功"></a> 查看opencv是否安装成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg-config --modversion opencv</span><br><span class="line">pkg-config --libs opencv4</span><br></pre></td></tr></table></figure><h2 id="编译过程遇到的问题"><a class="markdownIt-Anchor" href="#编译过程遇到的问题"></a> 编译过程遇到的问题</h2><p>编译opencv主要有两个过程，cmake和make，错误主要出现在cmake阶段，根据出现的错误情况，主要分为以下几类</p><h3 id="下载失败"><a class="markdownIt-Anchor" href="#下载失败"></a> 下载失败</h3><p>cmake过程中，需要下载的文件会放在opencv4.4.0下的隐藏目录<code>.cache</code>下，如果下载失败，可以手动下载，放入相应目录解决。</p><p><strong>xfeatures2d</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">boostdesc_bgm.i</span><br><span class="line">boostdesc_bgm_bi.i</span><br><span class="line">boostdesc_bgm_hd.i</span><br><span class="line">boostdesc_lbgm.i</span><br><span class="line">boostdesc_binboost_064.i</span><br><span class="line">boostdesc_binboost_128.i</span><br><span class="line">boostdesc_binboost_256.i</span><br><span class="line">vgg_generated_120.i</span><br><span class="line">vgg_generated_64.i</span><br><span class="line">vgg_generated_80.i</span><br><span class="line">vgg_generated_48.i</span><br></pre></td></tr></table></figure><p>进入opencv4.4.0下的隐藏目录<code>.cache/xfeatures2d</code>，执行以下命令解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> boostdesc</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_lbgm.i &gt; 0ae0675534aa318d9668f2a179c2a052-boostdesc_lbgm.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_binboost_256.i &gt; e6dcfa9f647779eb1ce446a8d759b6ea-boostdesc_binboost_256.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_binboost_128.i &gt; 98ea99d399965c03d555cef3ea502a0b-boostdesc_binboost_128.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_binboost_064.i &gt; 202e1b3e9fec871b04da31f7f016679f-boostdesc_binboost_064.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_bgm_hd.i &gt; 324426a24fa56ad9c5b8e3e0b3e5303e-boostdesc_bgm_hd.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_bgm_bi.i &gt; 232c966b13651bd0e46a1497b0852191-boostdesc_bgm_bi.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_bgm.i &gt; 0ea90e7a8f3f7876d450e4149c97c74f-boostdesc_bgm.i</span><br><span class="line"><span class="built_in">cd</span> vgg</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_120.i &gt; 151805e03568c9f490a5e3a872777b75-vgg_generated_120.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_64.i &gt; 7126a5d9a8884ebca5aea5d63d677225-vgg_generated_64.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_48.i &gt; e8d0dcd54d1bcfdc29203d011a797179-vgg_generated_48.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_80.i &gt; 7cd47228edec52b6d82f46511af325c5-vgg_generated_80.i</span><br></pre></td></tr></table></figure><blockquote><p>注：如何curl无法下载，可以通过浏览器挨个下载，并按照以上进行命名各文件</p></blockquote><p><strong>ippicv</strong></p><p>手动从<a href="https://link.jianshu.com/?t=https%3A%2F%2Fraw.githubusercontent.com%2FItseez%2Fopencv_3rdparty%2F81a676001ca8075ada498583e4166079e5744668%2Fippicv%2Fippicv_linux_20151201.tgz">github</a>下载，放入<code>.cache/ppicv</code>目录下</p><p>**face_landmark_model.dat **</p><p>手动从<a href="https://raw.githubusercontent.com/opencv/opencv_3rdparty/8afa57abc8229d611c4937165d20e2a2d9fc5a12/face_landmark_model.dat">github</a>下载，放入<code>.cache/data</code>目录下，注意文件名前部是该文件的md5值，可以通过命令<code>md5sum file</code>计算该值</p><h3 id="软件未安装not-found"><a class="markdownIt-Anchor" href="#软件未安装not-found"></a> 软件未安装（Not Found）</h3><p>此类错误比较简单，缺什么安装什么，比如安装过程中遇到以下缺失软件的解决办法</p><p><strong>tesserocr安装失败</strong><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libleptonica-dev libtesseract-dev</span><br><span class="line">python -m pip install tesserocr</span><br></pre></td></tr></table></figure><p><strong>lapacke.h缺失</strong><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></p><p>明明已经按照该软件，但是OpenBLAS一致没找到该文件，但是搜索文件发现该文件在<code>/usr/include/</code>下，只能手动拷贝<code>ls /usr/include/lapacke*</code>文件至<code>/usr/include/openblas/</code>目录下</p><p><strong>Could NOT find CUDNN: Found unsuitable version “…”, but required is at least “7.5” (found /usr/local/cuda-10.2/lib64/libcudnn.so)</strong></p><p>这是在编译opencv4.2.0时出现的错误，实际已经安装cudnn，也满足7.5以上的要求，但是就是找不，可以在cmake中加入参数：<code>-D CUDNN_VERSION='8.0'</code>解决<sup class="footnote-ref"><a href="#fn1" id="fnref1:1">[1:1]</a></sup>，但是后续还会遇到其他问题，编译opencv4.4.0时，该问题不再出现</p><p><strong>No package ‘gtk±3.0’ found</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libgtk-3-dev</span><br></pre></td></tr></table></figure><h2 id="卸载opencv"><a class="markdownIt-Anchor" href="#卸载opencv"></a> 卸载opencv</h2><p>通过源码安装的opencv，可以进入编译目录下（build）执行以下命令，卸载opencv</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make uninstall</span><br></pre></td></tr></table></figure><h2 id="使用cuda模块的简单例子"><a class="markdownIt-Anchor" href="#使用cuda模块的简单例子"></a> 使用cuda模块的简单例子</h2><p>查看opencv的cuda模块支持的功能，进入python终端，输入以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="built_in">dir</span>(cv2.cuda)</span><br><span class="line"><span class="built_in">dir</span>(cv2.cuda_GpuMat())</span><br></pre></td></tr></table></figure><p>例子：在GPU做resize</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">frame=cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传到gpu进行处理</span></span><br><span class="line">gpu_frame=cv2.cuda_GpuMat()</span><br><span class="line">gpu_frame.upload(frame)</span><br><span class="line">print(gpu_frame.cudaPtr())</span><br><span class="line"></span><br><span class="line"><span class="comment">#resize</span></span><br><span class="line">gpu_resframe=cv2.cuda.resize(gpu_frame,(<span class="number">1024</span>,<span class="number">512</span>))</span><br><span class="line">cpu_resfram=gpu_resframe.download()</span><br><span class="line">print(cpu_resfram.shape)</span><br></pre></td></tr></table></figure><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://blog.csdn.net/qq_33475105/article/details/111659692">Jetson Nano编译安装opencv4.3.0并使能cuDNN加速</a> <a href="#fnref1" class="footnote-backref">↩︎</a> <a href="#fnref1:1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://www.codenong.com/cs109055604/">Ubuntu20.04+GeForce RTX 2080 SUPER+cuda11.1+cudnn8.0.4+openCV4.4.0编译</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://blog.csdn.net/zhongqli/article/details/112212072">Opencv-3.4.0编译时报错缺少boostdesc_bgm.i等文件</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://stackoverflow.com/questions/43486636/error-while-trying-to-install-tesserocr/">error while trying to install tesserocr</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://github.com/opencv/opencv/issues/9953">Building against OpenBLAS complains about missing lapacke.h</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍编译包含cuda模块的opencv，可以在GPU上完成opencv的操作，加速opencv的处理速度，本文用于记录在Linux上编译opencv的过程、问题&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://shaogui.life/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="cuda" scheme="https://shaogui.life/tags/cuda/"/>
    
    <category term="机器视觉" scheme="https://shaogui.life/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
    <category term="opencv" scheme="https://shaogui.life/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>对中国身份证的了解（大陆、香港、澳门、台湾）</title>
    <link href="https://shaogui.life/2019/12/15/%E5%AF%B9%E4%B8%AD%E5%9B%BD%E8%BA%AB%E4%BB%BD%E8%AF%81%E7%9A%84%E4%BA%86%E8%A7%A3%EF%BC%88%E5%A4%A7%E9%99%86%E3%80%81%E9%A6%99%E6%B8%AF%E3%80%81%E6%BE%B3%E9%97%A8%E3%80%81%E5%8F%B0%E6%B9%BE%EF%BC%89/"/>
    <id>https://shaogui.life/2019/12/15/%E5%AF%B9%E4%B8%AD%E5%9B%BD%E8%BA%AB%E4%BB%BD%E8%AF%81%E7%9A%84%E4%BA%86%E8%A7%A3%EF%BC%88%E5%A4%A7%E9%99%86%E3%80%81%E9%A6%99%E6%B8%AF%E3%80%81%E6%BE%B3%E9%97%A8%E3%80%81%E5%8F%B0%E6%B9%BE%EF%BC%89/</id>
    <published>2019-12-15T02:35:23.000Z</published>
    <updated>2021-02-18T08:43:35.649Z</updated>
    
    <content type="html"><![CDATA[<p>本文在了解较多资料的情况下，总结中国现行的四类身份证（祖国大陆、香港、澳门、台湾）相关知识，包括身份证图解、编码规则、编码匹配校验、编码正确性校验等知识。</p><p>注：由于政策的改变，本文总结的身份证编码规则可能失效，查看时请留意当时政策变化。</p><a id="more"></a><h1 id="身份证图解"><a class="markdownIt-Anchor" href="#身份证图解"></a> 身份证图解</h1><h2 id="大陆身份证号码"><a class="markdownIt-Anchor" href="#大陆身份证号码"></a> 大陆身份证号码</h2><h3 id="号码构成"><a class="markdownIt-Anchor" href="#号码构成"></a> 号码构成</h3><blockquote><p>身份证号码共18位，由17位本体码和1位校验码组成:<br />1.前1、2位数字表示：所在省份的代码；<br />2.第3、4位数字表示：所在城市的代码；<br />3.第5、6位数字表示：所在区县的代码；<br />4.第7~14位数字表示：出生年、月、日；<br />5.第15、16位数字表示：所在地的派出所的代码；<br />6.第17位数字表示性别：奇数表示男性，偶数表示女性；<br />7.第18位数字是校检码：也有的说是个人信息码，一般是随计算机的随机产生，用来检验身份证的正确性。校检码可以是0~9的数字，有时也用x表示。</p></blockquote><h3 id="一代身份证与二代身份证差别"><a class="markdownIt-Anchor" href="#一代身份证与二代身份证差别"></a> 一代身份证与二代身份证差别</h3><blockquote><p>1.一代身份证是15位，二代身份证是18位；<br />2.一代身份证出生年月日采用YYMMDD格式，二代身份证出生年月日采用YYYYMMDD格式；</p></blockquote><ol start="3"><li>一代身份证无校验码，二代身份证有校验码。</li></ol><h2 id="香港身份证号码"><a class="markdownIt-Anchor" href="#香港身份证号码"></a> 香港身份证号码</h2><h3 id="号码构成-2"><a class="markdownIt-Anchor" href="#号码构成-2"></a> 号码构成</h3><blockquote><p>由三部分组成：一个英文字母；6个数字；括号及0-9中的任一个数字，或者字母A。括号中的数字或字母A，是校验码，用于检验括号前面的号码的逻辑正确性，如：A123456(7)</p></blockquote><h3 id="其他香港身份证知识"><a class="markdownIt-Anchor" href="#其他香港身份证知识"></a> 其他香港身份证知识</h3><blockquote><p>1.香港人在中国大陆的公民身份号码地址码使用810000开头。大陆发给他们的居住证与大陆人的身份证外观相同，使用功能相同<br />2.香港身份证由香港特别行政区入境事务处签发，为香港居民的主要身份证明文件。凡年满11岁或在香港逗留多于180天人士，必须于年满11岁后或抵港30天内登记领取身份证。</p></blockquote><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546736791.png" alt="香港身份证样卡" /></p><p><strong>身份证上的符号解释：</strong></p><blockquote><p>1.在姓名下方的数字串，是姓名的中文电报号码，代表中文姓名，比如2621 =李，2535=智，5174=能。<br />2.在出生日期右边是性别：女F，男M。F代表女，M代表男。<br />3.在签发日期的下方，分别为第一次领取身份证的时间和本证的签发（换发）时间。如上例：（01-79），表示第一次领取身份证的时间是1979年1月；<br />4.在出生日期之下，会印有一串符号及英文字母（例如***AZ），意思如下：持证人年龄为18岁或以上及有资格申领香港特别行政区回港证，* 持证人年龄为11岁至17岁及有资格申领香港特别行政区回港证。</p><ul><li>A 持证人拥有香港居留权</li><li>B 持证人所报称的出生日期或地点自首次登记以后，曾作出更改</li><li>C 持证人登记领证时在香港的居留受到入境事务处处长的限制</li><li>N 持证人所报的姓名自首次登记以后，曾作出更改</li><li>O 持证人报称在香港、澳门及中国以外其他地区或国家出生</li><li>R 持证人拥有香港入境权</li><li>U 持证人登记领证时在香港的居留不受入境事务处处长的限制</li><li>W 持证人报称在澳门地区出生</li><li>X 持证人报称在中国大陆出生</li><li>Z 持证人报称在香港出生</li></ul></blockquote><h2 id="澳门居民身份证"><a class="markdownIt-Anchor" href="#澳门居民身份证"></a> 澳门居民身份证</h2><h3 id="号码构成-3"><a class="markdownIt-Anchor" href="#号码构成-3"></a> 号码构成</h3><p>澳门居民身份证号码由8个拉丁数字组成格式为“X/NNNNNN/Y”或“XNNNNNN(Y)”，智能身份证将原有格式（X/NNNNNN/Y）改为XNNNNNN(Y)</p><blockquote><blockquote><p>1.在“/”符号前加上一个拉丁数字1、5或7以代表其取证时代，可能是1、5、7。绝大多数人以1字开首；以5字开首的身份证号码代表持有或曾经持有葡萄牙国民身份证或葡萄牙给外国人身份证之人士；以7字开首代表曾经取得蓝卡之人士，大多都是在1970年代至1980年代期间从中国大陆持合法证件到澳门的人士。<br />2.在“/”符号后加上的拉丁数字则为查核用数码，是为方便电脑处理资料及检查号码输入的正确性而设</p></blockquote></blockquote><h3 id="其他香港身份证知识-2"><a class="markdownIt-Anchor" href="#其他香港身份证知识-2"></a> 其他香港身份证知识</h3><p>澳门居民身份证由澳门特别行政区身份证明局签发，种类分为“澳门特别行政区永久性居民身份证”和“澳门特别行政区非永久性居民身份证”,前者有居留权，后者没有居留权。</p><p>每张澳门身份证均有持证人的姓名、出生日期等个人资料，并把持证人的黑白照片和签名印在证上。年满18周岁者，当局会发出一张有效期为十年的身份证；而未满18岁者，其身份证有效期则为五年；年界60岁者则其居民身份证为终身。</p><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546736807.png" alt="澳门居民身份证样卡" /></p><blockquote><p>在澳门身份证的照片下面，会印有葡萄牙文字母（例如ASM），它代表的意思如下：<br />A 持证人于澳门出生<br />B 持证人于香港出生<br />C 持证人于中国大陆、台湾出生<br />D 持证人于其他国家及地区出生<br />N 持证人出生地不明，不知道自己在何处出生<br />S 持证人有出生证明文件。如无出生证明文件则会漏空。<br />M 持证人为男性（Masculino）<br />F 持证人为女性（Feminino）</p></blockquote><h2 id="台湾居民身份证"><a class="markdownIt-Anchor" href="#台湾居民身份证"></a> 台湾居民身份证</h2><h3 id="号码构成-4"><a class="markdownIt-Anchor" href="#号码构成-4"></a> 号码构成</h3><p>台湾居民身份证号码由字母+9为数字组成，如：eg:A123456789</p><blockquote><p>1.第一位数出生的县市，是用英文字母26个字母来分的，如：台北市为A、台北线为B，以此类推；<br />2.第二位是男性或女性，男性为1、女性为2；<br />3.后面的8位数字都为随机数</p></blockquote><h1 id="身份证号匹配规则"><a class="markdownIt-Anchor" href="#身份证号匹配规则"></a> 身份证号匹配规则</h1><p><strong>大陆身份证</strong><br />分为两种情况，18位：</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9X]$</span><br></pre></td></tr></table></figure><p>15位：</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\d&#123;5&#125;\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;$</span><br></pre></td></tr></table></figure><p><strong>香港身份证</strong></p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((\s?[A-Za-z])|([A-Za-z]&#123;2&#125;))\d&#123;6&#125;(\([0−9aA]\)|[0-9aA])$</span><br></pre></td></tr></table></figure><p><strong>澳门身份证</strong></p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1|5|7][0-9]&#123;6&#125;(\([0-9Aa]\)$</span><br></pre></td></tr></table></figure><p><strong>台湾身份证</strong></p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-ZＡ-Ｘ][0-9]&#123;9&#125;$</span><br></pre></td></tr></table></figure><p>注：以上规则在身份证格式无误的情况下可以校验出来，实际使用留意特殊字符，如18位身份证号码最后一位可以是X,也可能是x,还可能是半角状态的Ｘ；香港和澳门身份证前面可能加上香港、香港居民身份证等字眼。</p><h1 id="身份证号校验规则"><a class="markdownIt-Anchor" href="#身份证号校验规则"></a> 身份证号校验规则</h1><p><strong>大陆身份证</strong><br />可对18位大陆身份证进行校验，其中校验码为第18位，以下为计算方法：</p><blockquote><p>1.将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分 别为：7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2<br />2.将这17位数字和系数相乘的结果相加。<br />3.用加出来和除以11，看余数是多少？<br />4.余数只可能有0 1 2 3 4 5 6 7 8 9 10这11个数字。其分别对应的最后一位身份证的号码为1 0 X 9 8 7 6 5 4 3 2。<br />5.通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的Ⅹ。如果余数是10，身份证的最后一位号码就是2。</p></blockquote><p><strong>香港身份证</strong><br />最后一位为校验码，计算规则如下：</p><blockquote><p>1.首位字母改为数字代表，即A以1代表，B以2代表…Z以26代表，可以得到8个数字，之后第一个数字乘以8，第二个数字乘以7，依此类推，第七个数字乘以2<br />2.将以上所有乘积相加，得到一个数，再将这个数除以11，得到余数。如果整除，校验码为0，如果余数为1，则校验码为A，如果余数为2～10，则用11减去这个余数，则为校验码。</p></blockquote><p><strong>澳门身份证</strong></p><blockquote><p>暂未找到相关资料</p></blockquote><p><strong>台湾身份证</strong><br />最后一位为校验码，计算规则如下：</p><blockquote><p>1.第一位字符转为数字，(ABCDEFGHJKLMNPQRSTUVXYWZIO)对应一组数(10——35)。 令其十位数为X1，个位数为X2； D2到D9分别代表身份证号码的第二至第九位数，分别乘上8、7、6、…1。<br />2.将乘积相加除以10得出的余数结果。 再用10来减去这个余数结果。就得出身份证上的最后一位数字。 例如R123456783，R=25，检查公式是：<code>2+5*9+1*8+2*7+3*6+4*5+5*4+6*3+7*2+8*1=167</code>， 其167再除以10求余数结果。 其余数结果的个位数为7以10减去得3(检查码)。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文在了解较多资料的情况下，总结中国现行的四类身份证（祖国大陆、香港、澳门、台湾）相关知识，包括身份证图解、编码规则、编码匹配校验、编码正确性校验等知识。&lt;/p&gt;
&lt;p&gt;注：由于政策的改变，本文总结的身份证编码规则可能失效，查看时请留意当时政策变化。&lt;/p&gt;</summary>
    
    
    
    <category term="通识" scheme="https://shaogui.life/categories/%E9%80%9A%E8%AF%86/"/>
    
    
    <category term="身份证" scheme="https://shaogui.life/tags/%E8%BA%AB%E4%BB%BD%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>对流媒体传输关键指标作简单预测</title>
    <link href="https://shaogui.life/2019/04/01/%E5%AF%B9%E6%B5%81%E5%AA%92%E4%BD%93%E4%BC%A0%E8%BE%93%E5%85%B3%E9%94%AE%E6%8C%87%E6%A0%87%E4%BD%9C%E7%AE%80%E5%8D%95%E9%A2%84%E6%B5%8B/"/>
    <id>https://shaogui.life/2019/04/01/%E5%AF%B9%E6%B5%81%E5%AA%92%E4%BD%93%E4%BC%A0%E8%BE%93%E5%85%B3%E9%94%AE%E6%8C%87%E6%A0%87%E4%BD%9C%E7%AE%80%E5%8D%95%E9%A2%84%E6%B5%8B/</id>
    <published>2019-04-01T08:40:33.000Z</published>
    <updated>2021-02-18T08:43:35.229Z</updated>
    
    <content type="html"><![CDATA[<p>本文使用LSTM对流媒体的6个关键指标进行预测</p><a id="more"></a><p>现收集有流媒体传输过程中的６个指标，这些指标分别是：</p><blockquote><ul><li>PDCCH信道CCE可用个数    AvaPdcch</li><li>PDCCH信道CCE占用个数    OccPdcch</li><li>RRC连接最大数        ConRrc</li><li>上行PRB平均利用率       UpPrb</li><li>下行PRB平均利用率       DownPrb</li><li>有效RRC连接最大数     EffConRrc</li></ul></blockquote><h1 id="1数据情况"><a class="markdownIt-Anchor" href="#1数据情况"></a> 1.数据情况</h1><p>每个指标的数据格式为：<code>Data-Time-Value</code>，本文首先对数据进行预处理，然后使用LSTM对这６个指标作简单预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">filenames=[<span class="string">&#x27;AvaPdcch&#x27;</span>,<span class="string">&#x27;OccPdcch&#x27;</span>,<span class="string">&#x27;ConRrc&#x27;</span>,<span class="string">&#x27;UpPrb&#x27;</span>,<span class="string">&#x27;DownPrb&#x27;</span>,<span class="string">&#x27;EffConRrc&#x27;</span>]  <span class="comment">#属性列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取数据</span></span><br><span class="line">dataset=[]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">    df=pd.read_csv(filename+<span class="string">&#x27;.csv&#x27;</span>,delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    partfea=np.array(df)[:,-<span class="number">1</span>]</span><br><span class="line">    dataset.append(partfea)</span><br><span class="line"></span><br><span class="line">dataset=np.array(dataset)</span><br><span class="line">dataset=dataset.T</span><br><span class="line"></span><br><span class="line">print(dataset.shape,dataset[<span class="number">1302</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>(1378, 6) [nan nan 18.0 nan nan 8.0]</p></blockquote><p>从这输出可以看出，数据量就是1378个，每个数据量是前文的６个指标。并且数据中包含缺失值，为了简单，这里使用均值进行填充，实际上还可以更加灵活处理缺失值，比如整行/列去掉，进行插值等。</p><h1 id="2数据预处理"><a class="markdownIt-Anchor" href="#2数据预处理"></a> 2.数据预处理</h1><ul><li><strong>缺失值填充</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line">impute = preprocessing.Imputer()</span><br><span class="line">dataset = impute.fit_transform(dataset)</span><br><span class="line"></span><br><span class="line">print(dataset.shape,dataset[<span class="number">1302</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>(1378, 6) [  7.31026325e+07   9.40476974e+06   1.80000000e+01   3.38872727e-02<br />1.92543953e-01   8.00000000e+00]</p></blockquote><ul><li><strong>数据归一化</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line">scaler = MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">dataset = scaler.fit_transform(dataset)</span><br><span class="line"></span><br><span class="line">print(dataset.shape,dataset[<span class="number">1302</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>(1378, 6) [ 0.5072962   0.23767169  0.22222222  0.17733455  0.21859107  0.23809524]</p></blockquote><h1 id="3样本划分及标签处理"><a class="markdownIt-Anchor" href="#3样本划分及标签处理"></a> 3.样本划分及标签处理</h1><p>后一个数据作为前一个数据的标签，模型最终是基于当前的数据预测下一状态数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">train_size=<span class="built_in">int</span>(<span class="number">0.8</span>*<span class="built_in">len</span>(dataset))</span><br><span class="line"><span class="comment">#训练集</span></span><br><span class="line">train_X=dataset[<span class="number">0</span>:train_size,:]</span><br><span class="line">train_y=dataset[<span class="number">1</span>:train_size+<span class="number">1</span>,:]</span><br><span class="line"><span class="comment">#验证集</span></span><br><span class="line">vali_X=dataset[train_size:,:]</span><br><span class="line">vali_y=dataset[train_size+<span class="number">1</span>:,:]</span><br><span class="line"> </span><br><span class="line">train_X=train_X.reshape(train_X.shape[<span class="number">0</span>],<span class="number">1</span>,train_X.shape[<span class="number">1</span>])</span><br><span class="line">vali_X=vali_X.reshape(vali_X.shape[<span class="number">0</span>],<span class="number">1</span>,vali_X.shape[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(train_X.shape,train_y.shape,vali_X.shape,vali_y.shape)</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>(1102, 1, 6) (1102, 6) (276, 1, 6) (275, 6)</p></blockquote><h1 id="4模型训练"><a class="markdownIt-Anchor" href="#4模型训练"></a> 4.模型训练</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> LSTM</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> plot_model</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras.utils.vis_utils <span class="keyword">import</span> model_to_dot</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建LSTM网络</span></span><br><span class="line">model=Sequential()</span><br><span class="line">model.add(LSTM(<span class="number">32</span>,input_shape=(<span class="number">1</span>,<span class="number">6</span>)))</span><br><span class="line">model.add(Dense(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;mean_squared_error&#x27;</span>, optimizer=<span class="string">&#x27;adam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印模型</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存模型</span></span><br><span class="line">SVG(model_to_dot(model,show_shapes=<span class="literal">True</span>).create(prog=<span class="string">&#x27;dot&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;svg&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练LSTM网络</span></span><br><span class="line">model.fit(train_X, train_y, epochs=<span class="number">10</span>, batch_size=<span class="number">1</span>, verbose=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="5模型评估"><a class="markdownIt-Anchor" href="#5模型评估"></a> 5.模型评估</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#预测数据</span></span><br><span class="line">valipredict=model.predict(vali_X)</span><br><span class="line">print(valipredict.shape,vali_y.shape)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#画图模型预测显示</span></span><br><span class="line">finalypredict=[]</span><br><span class="line"><span class="comment">#归一化后的数据画图,有6列</span></span><br><span class="line">plt.subplots(<span class="number">2</span>,<span class="number">3</span>,figsize=(<span class="number">18</span>,<span class="number">6</span>)) </span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="comment">#归一化数据转换为真实数据</span></span><br><span class="line">    valipredict_real=valipredict[:,ind]*(scaler.data_max_[ind]-scaler.data_min_[ind])+scaler.data_min_[ind]</span><br><span class="line">    vali_y_real=vali_y[:,ind]*(scaler.data_max_[ind]-scaler.data_min_[ind])+scaler.data_min_[ind]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#未来的6个真实值</span></span><br><span class="line">    finalypredict.append(valipredict_real[-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>,ind+<span class="number">1</span>)</span><br><span class="line">    plt.title(filenames[ind]) </span><br><span class="line">    plt.plot(valipredict_real,color=<span class="string">&#x27;red&#x27;</span>,label=<span class="string">&#x27;valipredict&#x27;</span>)</span><br><span class="line">    plt.plot(vali_y_real,color=<span class="string">&#x27;green&#x27;</span>,label=<span class="string">&#x27;vali_y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613533169656.png" alt="模型在验证数据上的预测效果" /></p><p>由图可以看出，６个指标基本的趋势被正确预测，但是某个时刻的准确度不是很高，我认为原因有几个：</p><blockquote><ol><li>数据量太少，导致模型无法学习足够的特征</li><li>特征太简单，某个指标的预测仅仅依赖于包括自身在内的历史时刻的６个值，这明显不够，可以考虑加入更多特征。比如这几个值明显对”时间“敏感，不同的时间区间内，流媒体的传输需要不同，将时间考虑进去将使得模型学习到更加丰富的特征</li><li>模型太简单，在数据量少，特征不多的情况下，我只用了一层的LSTM。</li></ol></blockquote><h1 id="6预测未来下一个6个指标"><a class="markdownIt-Anchor" href="#6预测未来下一个6个指标"></a> 6.预测未来下一个６个指标</h1><p>将数据中的最后的６个指标输入已经训练好的模型，模型输出６个值，该６个值作为模型预测到的未来下一个６个指标值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前文已经存储，直接输出</span></span><br><span class="line">print(finalypredict)</span><br></pre></td></tr></table></figure><blockquote><p>[93690488.0, 25693568.0, 40.356155, 0.088783175, 0.64066094, 17.614025]</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文使用LSTM对流媒体的6个关键指标进行预测&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://shaogui.life/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="深度学习" scheme="https://shaogui.life/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LSTM" scheme="https://shaogui.life/tags/LSTM/"/>
    
  </entry>
  
  <entry>
    <title>Tex家族关系</title>
    <link href="https://shaogui.life/2019/02/06/Tex%E5%AE%B6%E6%97%8F%E5%85%B3%E7%B3%BB/"/>
    <id>https://shaogui.life/2019/02/06/Tex%E5%AE%B6%E6%97%8F%E5%85%B3%E7%B3%BB/</id>
    <published>2019-02-06T03:23:23.000Z</published>
    <updated>2021-02-18T08:43:35.725Z</updated>
    
    <content type="html"><![CDATA[<p>文章自<a href="https://liam.page/2014/09/08/latex-introduction/"><code>一份其实很短的 LaTeX 入门文档</code></a>学习，整理所得。</p><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613527698526.png" alt="Tex家族关系" /></p><a id="more"></a><h1 id="tex家族关系图"><a class="markdownIt-Anchor" href="#tex家族关系图"></a> Tex家族关系图</h1><h2 id="排版引擎"><a class="markdownIt-Anchor" href="#排版引擎"></a> 排版引擎</h2><blockquote><p>1.所谓的引擎，是指能够实现断行、分页等操作的程序（请注意这并不是定义）</p><p>2.标记语言，是指一种将控制命令和文本结合起来的格式，它的主体是其中的文本而控制命令则实现一些特殊效果（同样请注意这并不是定义）</p></blockquote><h3 id="tex"><a class="markdownIt-Anchor" href="#tex"></a> Tex</h3><blockquote><p>1.TeX 的源代码是后缀为 .tex 的纯文本文件。使用任意纯文本编辑器，都可以修改</p></blockquote><h3 id="pdftex"><a class="markdownIt-Anchor" href="#pdftex"></a> pdfTeX</h3><blockquote><p>dvi 格式是为了排版而产生的，它本身并不支持所谓的「交叉引用」，pdfTeX 直接输出 pdf 格式的文档，这也是 pdfTeX 相对 TeX 进步（易用性方面）的地方</p></blockquote><h3 id="pdflatex"><a class="markdownIt-Anchor" href="#pdflatex"></a> pdfLaTeX</h3><blockquote><p>pdfLaTeX 这个程序的主要工作依旧是将 LaTeX 格式的文档进行解释，不过此次是将解释之后的结果交付给 pdfTeX 引擎处理</p></blockquote><h3 id="xetex"><a class="markdownIt-Anchor" href="#xetex"></a> XeTeX</h3><blockquote><p>XeTeX 引擎直接支持 Unicode 字符。也就是说现在不使用 CJK 也能排版中日韩文的文档了，并且这种方式要比之前的方式更加优秀。</p></blockquote><h3 id="xelatex"><a class="markdownIt-Anchor" href="#xelatex"></a> XeLaTeX</h3><blockquote><p>XeLaTeX 和 XeTeX 的关系与 pdfLaTeX 和 pdfTeX 的关系类似</p></blockquote><h3 id="luatex"><a class="markdownIt-Anchor" href="#luatex"></a> LuaTeX</h3><blockquote><p>正在开发完善的一个 TeX 引擎</p></blockquote><h2 id="发行"><a class="markdownIt-Anchor" href="#发行"></a> 发行</h2><blockquote><p>所谓 TeX 发行，也叫 TeX 发行版、TeX 系统或者 TeX 套装，指的是包括 TeX 系统的各种可执行程序，以及他们执行时需要的一些辅助程序和宏包文档的集合：</p><ul><li>CTeX</li><li>MiKTeX</li><li>TeX Live<br />概要: 后面两个最流行的两个发行，自带TeXworks编辑器</li></ul></blockquote><h2 id="编辑器"><a class="markdownIt-Anchor" href="#编辑器"></a> 编辑器</h2><h3 id="专门的tex编辑器"><a class="markdownIt-Anchor" href="#专门的tex编辑器"></a> 专门的Tex编辑器</h3><ul><li>TeXworks</li></ul><blockquote><ul><li>TeXworks 是 TeX Live 自带的编辑器，而 TeX Live 是 TeX User Group</li><li>出品的跨平台发行版，各个操作系统都可以使用 几乎所有 TeX 发行版都带有 TeXworks TeXworks</li><li>十分简洁，除了最基本的功能之外，没有其他复杂的东西，能使你将注意力集中在 TeX 的学习上。</li></ul></blockquote><ul><li>TeXmaker</li><li>TeXstudio</li><li>WinEdt</li></ul><h3 id="文本编辑器"><a class="markdownIt-Anchor" href="#文本编辑器"></a> 文本编辑器</h3><ul><li>ATOM</li><li>Sublime Text</li><li>Visual Studio Code</li></ul><h2 id="宏包"><a class="markdownIt-Anchor" href="#宏包"></a> 宏包</h2><blockquote><ul><li><p>所谓宏包，就是一系列控制序列的合集。这些控制序列太常用，以至于人们会觉得每次将他们写在导言区太过繁琐，于是将他们打包放在同一个文件中，成为所谓的宏包</p></li><li><p>请注意，CTeX 宏集和 CTeX 套装是两个不同的东西。CTeX 宏集本质是 LaTeX 宏的集合，包含若干文档类（.cls 文件）和宏包（.sty 文件）。CTeX 套装是一个过时的 TeX 系统。</p></li></ul></blockquote><h3 id="ctex"><a class="markdownIt-Anchor" href="#ctex"></a> CTeX</h3><blockquote><ul><li><p>CTeX 宏集和 CTeX 套装是两个不同的东西。CTeX 宏集本质是 LaTeX 宏的集合，包含若干文档类（.cls 文件）和宏包（.sty 文件）。CTeX 套装是一个过时的 TeX 系统</p></li><li><p>新版 CTeX 宏集的默认能够自动检测用户的操作系统，并为之配置合适的字库</p></li></ul></blockquote><h2 id="latex"><a class="markdownIt-Anchor" href="#latex"></a> Latex</h2><blockquote><ul><li><p>排版系统： LaTeX 利用 TeX 的控制命令，定义了许多新的控制命令并封装成一个可执行文件。这个可执行文件会去解释 LaTeX 新定义的命令成为 TeX 的控制命令，并最终交由 TeX 引擎进行排版。</p></li><li><p>最终进行断行、分页等操作的，是 TeX 引擎</p></li><li><p>LaTeX 实际上是一个工具，它将用户按照它的格式编写的文档解释成 TeX 引擎能理解的形式并交付给 TeX 引擎处理，再将最终结果返回给用户</p></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;文章自&lt;a href=&quot;https://liam.page/2014/09/08/latex-introduction/&quot;&gt;&lt;code&gt;一份其实很短的 LaTeX 入门文档&lt;/code&gt;&lt;/a&gt;学习，整理所得。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613527698526.png&quot; alt=&quot;Tex家族关系&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="软件工具" scheme="https://shaogui.life/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Tex" scheme="https://shaogui.life/tags/Tex/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(10)-算法之五:广度优先与深度优先</title>
    <link href="https://shaogui.life/2018/09/30/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%94:%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E4%B8%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88/"/>
    <id>https://shaogui.life/2018/09/30/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%94:%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E4%B8%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88/</id>
    <published>2018-09-30T15:55:25.000Z</published>
    <updated>2021-02-18T08:43:35.469Z</updated>
    
    <content type="html"><![CDATA[<p>重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把<code>图论</code>中常用算法弄个明白在写这部分.</p><p>图论常用算法看我的博客:</p><p>下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.<br />我将图论的经典问题及常用算法的总结写在下面两篇博客中:<br /><a href="https://www.cnblogs.com/wushaogui/p/9222828.html">图论—问题篇</a><br /><a href="https://www.cnblogs.com/wushaogui/p/9237445.html">图论—算法篇</a></p><a id="more"></a><p>注意:如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h2 id="广度优先搜索算法bfs"><a class="markdownIt-Anchor" href="#广度优先搜索算法bfs"></a> 广度优先搜索算法(BFS)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建一个长度为10的路径</span></span><br><span class="line">G = nx.path_graph(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">nx.draw_spring(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#以4为顶点,广度遍历</span></span><br><span class="line">print(<span class="built_in">list</span>(nx.bfs_tree(G,<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613551009706.png" alt="广度优先搜索算法示例" /></p><p>输出:</p><blockquote><p>[4, 3, 5, 2, 6, 1, 7, 0, 8, 9]</p></blockquote><hr /><h2 id="深度优先搜索算法dfs"><a class="markdownIt-Anchor" href="#深度优先搜索算法dfs"></a> 深度优先搜索算法(DFS)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建一个长度为10的路径</span></span><br><span class="line">G = nx.path_graph(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">nx.draw_spring(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#以5为顶点,深度遍历,限定深度为3</span></span><br><span class="line">T = nx.dfs_tree(G, source=<span class="number">5</span>, depth_limit=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">list</span>(T)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613551009707.png" alt="深度优先搜索算法示例" /></p><p><strong>输出:</strong></p><blockquote><p>[5, 4, 3, 2, 6, 7, 8]</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把&lt;code&gt;图论&lt;/code&gt;中常用算法弄个明白在写这部分.&lt;/p&gt;
&lt;p&gt;图论常用算法看我的博客:&lt;/p&gt;
&lt;p&gt;下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.&lt;br /&gt;
我将图论的经典问题及常用算法的总结写在下面两篇博客中:&lt;br /&gt;
&lt;a href=&quot;https://www.cnblogs.com/wushaogui/p/9222828.html&quot;&gt;图论—问题篇&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.cnblogs.com/wushaogui/p/9237445.html&quot;&gt;图论—算法篇&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(10)-算法之四:拓扑排序与最大流问题</title>
    <link href="https://shaogui.life/2018/09/30/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E5%9B%9B:%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98/"/>
    <id>https://shaogui.life/2018/09/30/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E5%9B%9B:%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98/</id>
    <published>2018-09-30T04:45:21.000Z</published>
    <updated>2021-02-18T08:43:35.585Z</updated>
    
    <content type="html"><![CDATA[<p>重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把<code>图论</code>中常用算法弄个明白在写这部分.</p><p>图论常用算法看我的博客:</p><p>下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.<br />我将图论的经典问题及常用算法的总结写在下面两篇博客中:<br /><a href="https://www.cnblogs.com/wushaogui/p/9222828.html">图论—问题篇</a><br /><a href="https://www.cnblogs.com/wushaogui/p/9237445.html">图论—算法篇</a></p><a id="more"></a><p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h2 id="拓扑排序算法tsa"><a class="markdownIt-Anchor" href="#拓扑排序算法tsa"></a> 拓扑排序算法(TSA)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DG = nx.DiGraph([(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>),(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;e&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>),(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>),(<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;f&#x27;</span>), (<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>), (<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">nx.draw_spring(DG,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有向无环图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个graph拓扑排序序列有很多,这里只给出一种</span></span><br><span class="line">print(<span class="string">&#x27;扑排序序列:&#x27;</span>,<span class="built_in">list</span>(nx.topological_sort(DG)))</span><br><span class="line">print(<span class="string">&#x27;逆扑排序序列:&#x27;</span>,<span class="built_in">list</span>(<span class="built_in">reversed</span>(<span class="built_in">list</span>(nx.topological_sort(DG)))))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550926354.png" alt="拓扑排序算法示例" /></p><p><strong>输出:</strong></p><blockquote><p>拓扑序序列: [‘a’, ‘b’, ‘c’, ‘e’, ‘d’, ‘f’, ‘g’]<br />逆拓扑序序列: [‘g’, ‘f’, ‘d’,‘e’, ‘c’, ‘b’, ‘a’]</p></blockquote><hr /><h2 id="最大流问题"><a class="markdownIt-Anchor" href="#最大流问题"></a> 最大流问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建graph</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line">G.add_edge(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>, capacity=<span class="number">3.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;b&#x27;</span>, capacity=<span class="number">1.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>, capacity=<span class="number">3.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>, capacity=<span class="number">5.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>, capacity=<span class="number">4.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>, capacity=<span class="number">2.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;y&#x27;</span>, capacity=<span class="number">2.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;y&#x27;</span>, capacity=<span class="number">3.0</span>)</span><br><span class="line">pos=nx.spring_layout(G)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;capacity&#x27;</span>)</span><br><span class="line">nx.draw_networkx_nodes(G,pos)</span><br><span class="line">nx.draw_networkx_labels(G,pos)</span><br><span class="line">nx.draw_networkx_edges(G,pos)</span><br><span class="line">nx.draw_networkx_edge_labels(G, pos,edge_labels)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#求最大流</span></span><br><span class="line">flow_value, flow_dict = nx.maximum_flow(G, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;最大流值: &quot;</span>,flow_value)</span><br><span class="line">print(<span class="string">&quot;最大流流经途径: &quot;</span>,flow_dict)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550926359.png" alt="最大流问题示例" /></p><p><strong>输出:</strong></p><blockquote><p>最大流值:  3.0<br />最大流流经途径:  {‘x’: {‘a’: 2.0, ‘b’: 1.0}, ‘c’: {‘y’: 2.0}, ‘b’: {‘c’: 0, ‘d’: 1.0}, ‘y’: {}, ‘d’: {‘e’: 1.0}, ‘e’: {‘y’: 1.0}, ‘a’:{‘c’: 2.0}}</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把&lt;code&gt;图论&lt;/code&gt;中常用算法弄个明白在写这部分.&lt;/p&gt;
&lt;p&gt;图论常用算法看我的博客:&lt;/p&gt;
&lt;p&gt;下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.&lt;br /&gt;
我将图论的经典问题及常用算法的总结写在下面两篇博客中:&lt;br /&gt;
&lt;a href=&quot;https://www.cnblogs.com/wushaogui/p/9222828.html&quot;&gt;图论—问题篇&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.cnblogs.com/wushaogui/p/9237445.html&quot;&gt;图论—算法篇&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(10)-算法之三:关键路径问题</title>
    <link href="https://shaogui.life/2018/09/29/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%B8%89:%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>https://shaogui.life/2018/09/29/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%B8%89:%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</id>
    <published>2018-09-29T15:32:51.000Z</published>
    <updated>2021-02-18T08:43:35.737Z</updated>
    
    <content type="html"><![CDATA[<p>重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把<code>图论</code>中常用算法弄个明白在写这部分.</p><p>图论常用算法看我的博客:</p><p>下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.<br />我将图论的经典问题及常用算法的总结写在下面两篇博客中:<br /><a href="https://www.cnblogs.com/wushaogui/p/9222828.html">图论—问题篇</a><br /><a href="https://www.cnblogs.com/wushaogui/p/9237445.html">图论—算法篇</a></p><a id="more"></a><p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h2 id="关键路径算法cpa"><a class="markdownIt-Anchor" href="#关键路径算法cpa"></a> 关键路径算法(CPA)</h2><p>以下代码从<a href="https://gist.github.com/Wlodarski/b78c6662474028958b77ff302940ba33">这里</a>复制,由于版本问题,将代码中的:<code>nx.topological_sort(self, reverse=True)</code>改为<code>list(reversed(list(nx.topological_sort(self))))</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> *  </span><br><span class="line"></span><br><span class="line"><span class="comment">#定义自定义字体，文件名从1.b查看系统中文字体中来  </span></span><br><span class="line">myfont = FontProperties(fname=<span class="string">&#x27;/usr/share/fonts/truetype/wqy/wqy-zenhei.ttc&#x27;</span>)  </span><br><span class="line"><span class="comment">#解决负号&#x27;-&#x27;显示为方块的问题  </span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPM</span>(<span class="params">nx.DiGraph</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        self._critical_path_length = -<span class="number">1</span></span><br><span class="line">        self._criticalPath = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_node</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().add_node(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_nodes_from</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().add_nodes_from(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span>(<span class="params">self, *args</span>):</span>  <span class="comment"># , **kwargs):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().add_edge(*args)  <span class="comment"># , **kwargs)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edges_from</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().add_edges_from(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_node</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().remove_node(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_nodes_from</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().remove_nodes_from(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_edge</span>(<span class="params">self, *args</span>):</span>  <span class="comment"># , **kwargs):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().remove_edge(*args)  <span class="comment"># , **kwargs)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_edges_from</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().remove_edges_from(*args, **kwargs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#根据前向拓扑排序算弧的最早发生时间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_forward</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nx.topological_sort(self):</span><br><span class="line">            es = <span class="built_in">max</span>([self.node[j][<span class="string">&#x27;EF&#x27;</span>] <span class="keyword">for</span> j <span class="keyword">in</span> self.predecessors(n)], default=<span class="number">0</span>)</span><br><span class="line">            self.add_node(n, ES=es, EF=es + self.node[n][<span class="string">&#x27;duration&#x27;</span>])</span><br><span class="line">            </span><br><span class="line">    <span class="comment">#根据前向拓扑排序算弧的最迟发生时间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_backward</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#for n in nx.topological_sort(self, reverse=True):</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(<span class="built_in">list</span>(nx.topological_sort(self)))):</span><br><span class="line">            lf = <span class="built_in">min</span>([self.node[j][<span class="string">&#x27;LS&#x27;</span>] <span class="keyword">for</span> j <span class="keyword">in</span> self.successors(n)], default=self._critical_path_length)</span><br><span class="line">            self.add_node(n, LS=lf - self.node[n][<span class="string">&#x27;duration&#x27;</span>], LF=lf)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#最早发生时间=最迟发生时间,则判断该节点为关键路径上的关键活动</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_compute_critical_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        graph = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">if</span> self.node[n][<span class="string">&#x27;EF&#x27;</span>] == self.node[n][<span class="string">&#x27;LF&#x27;</span>]:</span><br><span class="line">                graph.add(n)</span><br><span class="line">        self._criticalPath = self.subgraph(graph)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical_path_length</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._dirty:</span><br><span class="line">            self._update()</span><br><span class="line">        <span class="keyword">return</span> self._critical_path_length</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._dirty:</span><br><span class="line">            self._update()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(self._criticalPath, key=<span class="keyword">lambda</span> x: self.node[x][<span class="string">&#x27;ES&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._forward()</span><br><span class="line">        self._critical_path_length = <span class="built_in">max</span>(nx.get_node_attributes(self, <span class="string">&#x27;EF&#x27;</span>).values())</span><br><span class="line">        self._backward()</span><br><span class="line">        self._compute_critical_path()</span><br><span class="line">        self._dirty = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#构建graph</span></span><br><span class="line">    G = CPM()</span><br><span class="line">    G.add_node(<span class="string">&#x27;A&#x27;</span>, duration=<span class="number">5</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;B&#x27;</span>, duration=<span class="number">2</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;C&#x27;</span>, duration=<span class="number">4</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;D&#x27;</span>, duration=<span class="number">4</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;E&#x27;</span>, duration=<span class="number">3</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;F&#x27;</span>, duration=<span class="number">7</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;G&#x27;</span>, duration=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    G.add_edges_from([</span><br><span class="line">        (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;G&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),</span><br><span class="line">    ])    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#显示graph</span></span><br><span class="line">    nx.draw_spring(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;AOE网络&#x27;</span>,fontproperties=myfont)</span><br><span class="line">    plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    print(<span class="string">&#x27;关键活动为:&#x27;</span>)</span><br><span class="line">    print(G.critical_path_length, G.critical_path)</span><br><span class="line"></span><br><span class="line">    G.add_node(<span class="string">&#x27;D&#x27;</span>, duration=<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;\n修改D活动持续时间4为2后的关键活动为:&#x27;</span>)</span><br><span class="line">print(G.critical_path_length, G.critical_path)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550834258.png" alt="关键路径示例(该图非黑色线为手工绘制,数字手工添加)" /></p><p>从graph中可以知道,有两条关键路径,分别是:<code>A-&gt;C-&gt;G-&gt;F</code>和<code>A-&gt;C-&gt;D-&gt;F</code>,长度都是20.</p><p><strong>输出:</strong></p><blockquote><p>关键活动为: 20 [‘A’, ‘C’, ‘D’, ‘G’, ‘F’]</p><p>修改D活动持续时间4为2后的关键活动为: 20 [‘A’, ‘C’, ‘G’, ‘F’]</p></blockquote><p>关键活动为: [‘A’, ‘C’, ‘D’, ‘G’, ‘F’],可以构成两条边.D活动持续时间4为2后,关键路径变化.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把&lt;code&gt;图论&lt;/code&gt;中常用算法弄个明白在写这部分.&lt;/p&gt;
&lt;p&gt;图论常用算法看我的博客:&lt;/p&gt;
&lt;p&gt;下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.&lt;br /&gt;
我将图论的经典问题及常用算法的总结写在下面两篇博客中:&lt;br /&gt;
&lt;a href=&quot;https://www.cnblogs.com/wushaogui/p/9222828.html&quot;&gt;图论—问题篇&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.cnblogs.com/wushaogui/p/9237445.html&quot;&gt;图论—算法篇&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(10)-算法之二:最小最大生成树问题</title>
    <link href="https://shaogui.life/2018/09/28/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C:%E6%9C%80%E5%B0%8F%E5%A4%A7%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98/"/>
    <id>https://shaogui.life/2018/09/28/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C:%E6%9C%80%E5%B0%8F%E5%A4%A7%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98/</id>
    <published>2018-09-28T14:45:23.000Z</published>
    <updated>2021-02-18T08:43:35.373Z</updated>
    
    <content type="html"><![CDATA[<p>重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把<code>图论</code>中常用算法弄个明白在写这部分.</p><p>图论常用算法看我的博客:</p><p>下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.<br />我将图论的经典问题及常用算法的总结写在下面两篇博客中:<br /><a href="https://www.cnblogs.com/wushaogui/p/9222828.html">图论—问题篇</a><br /><a href="https://www.cnblogs.com/wushaogui/p/9237445.html">图论—算法篇</a></p><a id="more"></a><p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h2 id="最小最大生成树问题"><a class="markdownIt-Anchor" href="#最小最大生成树问题"></a> 最小/最大生成树问题</h2><p>先构建graph,后面最小最大生成树在这个graph上求.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成graph</span></span><br><span class="line">G.clear()</span><br><span class="line">G = nx.Graph()</span><br><span class="line">G.add_weighted_edges_from([(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">7</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">8</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">4</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#边和节点信息</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;weight&#x27;</span>) </span><br><span class="line">labels=&#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>:<span class="string">&#x27;4&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成节点位置 </span></span><br><span class="line">pos=nx.spring_layout(G) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点画出来 </span></span><br><span class="line">nx.draw_networkx_nodes(G,pos,node_color=<span class="string">&#x27;g&#x27;</span>,node_size=<span class="number">500</span>,alpha=<span class="number">0.8</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#把边画出来 </span></span><br><span class="line">nx.draw_networkx_edges(G,pos,width=<span class="number">1.0</span>,alpha=<span class="number">0.5</span>,edge_color=[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>]) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点的标签画出来 </span></span><br><span class="line">nx.draw_networkx_labels(G,pos,labels,font_size=<span class="number">16</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边权重画出来 </span></span><br><span class="line">nx.draw_networkx_edge_labels(G, pos, edge_labels) </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">plt.title(<span class="string">&#x27;有权图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550727023.png" alt="最小/最大生成树示例" /></p><p>注:基本上,图示的红色线是最小生成树,蓝色是最大生成树,最小最大生成树都包含1-2这条边</p><hr /><h3 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求得最小生成树,algorithm可以是kruskal,prim,boruvka一种,默认是kruskal</span></span><br><span class="line">KA = nx.minimum_spanning_tree(G,algorithm=<span class="string">&#x27;kruskal&#x27;</span>)</span><br><span class="line">print(KA.edges(data=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接拿到构成最小生成树的边,algorithm可以是kruskal,prim,boruvka一种,默认是kruskal</span></span><br><span class="line">mst = nx.minimum_spanning_edges(G, algorithm=<span class="string">&#x27;kruskal&#x27;</span>, data=<span class="literal">False</span>)</span><br><span class="line">edgelist = <span class="built_in">list</span>(mst)</span><br><span class="line">print(edgelist)</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><pre><code>[('3', '4', &#123;'weight': 4&#125;), ('3', '2', &#123;'weight': 1&#125;), ('0', '1', &#123;'weight': 2&#125;), ('2', '1', &#123;'weight': 3&#125;)][('3', '2'), ('0', '1'), ('1', '2'), ('4', '3')]</code></pre></blockquote><hr /><h3 id="最大生成树"><a class="markdownIt-Anchor" href="#最大生成树"></a> 最大生成树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回无向图G上的最大生成树或森林。</span></span><br><span class="line">T = nx.maximum_spanning_tree(G)</span><br><span class="line">print(<span class="built_in">sorted</span>(T.edges(data=<span class="literal">True</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接拿到构成最大生成树,algorithm可以是kruskal,prim,boruvka一种,默认是kruskal</span></span><br><span class="line">mst = nx.tree.maximum_spanning_edges(G, algorithm=<span class="string">&#x27;kruskal&#x27;</span>, data=<span class="literal">False</span>)</span><br><span class="line">edgelist = <span class="built_in">list</span>(mst)</span><br><span class="line">print(edgelist)</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><pre><code>[('0', '2', &#123;'weight': 7&#125;), ('1', '4', &#123;'weight': 5&#125;), ('2', '1', &#123;'weight': 3&#125;), ('3', '1', &#123;'weight': 8&#125;)][('3', '1'), ('0', '2'), ('4', '1'), ('1', '2')]</code></pre></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把&lt;code&gt;图论&lt;/code&gt;中常用算法弄个明白在写这部分.&lt;/p&gt;
&lt;p&gt;图论常用算法看我的博客:&lt;/p&gt;
&lt;p&gt;下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.&lt;br /&gt;
我将图论的经典问题及常用算法的总结写在下面两篇博客中:&lt;br /&gt;
&lt;a href=&quot;https://www.cnblogs.com/wushaogui/p/9222828.html&quot;&gt;图论—问题篇&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.cnblogs.com/wushaogui/p/9237445.html&quot;&gt;图论—算法篇&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(10)-算法之一:最短路径问题</title>
    <link href="https://shaogui.life/2018/09/26/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%B8%80:%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <id>https://shaogui.life/2018/09/26/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%B8%80:%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</id>
    <published>2018-09-26T15:05:32.000Z</published>
    <updated>2021-02-18T08:43:35.533Z</updated>
    
    <content type="html"><![CDATA[<p>重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把<code>图论</code>中常用算法弄个明白在写这部分.</p><p>图论常用算法看我的博客:</p><p>下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.<br />我将图论的经典问题及常用算法的总结写在下面两篇博客中:<br /><a href="https://www.cnblogs.com/wushaogui/p/9222828.html">图论—问题篇</a><br /><a href="https://www.cnblogs.com/wushaogui/p/9237445.html">图论—算法篇</a></p><a id="more"></a><p>注意: #007e80如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h1 id="graph相关算法"><a class="markdownIt-Anchor" href="#graph相关算法"></a> Graph相关算法</h1><h2 id="最短路径"><a class="markdownIt-Anchor" href="#最短路径"></a> 最短路径</h2><h3 id="无向图和有向图"><a class="markdownIt-Anchor" href="#无向图和有向图"></a> 无向图和有向图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义并画出该图</span></span><br><span class="line">G = nx.path_graph(<span class="number">5</span>)</span><br><span class="line">nx.add_path(G,[<span class="number">0</span>,<span class="number">5</span>,<span class="number">2</span>])</span><br><span class="line">nx.add_path(G,[<span class="number">0</span>,<span class="number">6</span>,<span class="number">4</span>])</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;无向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算最短路径</span></span><br><span class="line">print(<span class="string">&#x27;0节点到4节点最短路径: &#x27;</span>,nx.shortest_path(G, source=<span class="number">0</span>, target=<span class="number">4</span>))</span><br><span class="line">p1 = nx.shortest_path(G, source=<span class="number">0</span>)</span><br><span class="line">print(<span class="string">&#x27;0节点到所有节点最短路径: &#x27;</span>,p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算图中所有的最短路径</span></span><br><span class="line">print(<span class="string">&#x27;计算图中节点0到节点2的所有最短路径: &#x27;</span>,[p <span class="keyword">for</span> p <span class="keyword">in</span> nx.all_shortest_paths(G, source=<span class="number">0</span>, target=<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算最短路径长度</span></span><br><span class="line">p2=nx.shortest_path_length(G, source=<span class="number">0</span>, target=<span class="number">2</span>)  <span class="comment">#最短路径长度</span></span><br><span class="line">p3=nx.average_shortest_path_length(G) <span class="comment">#计算平均最短路径长度</span></span><br><span class="line">print(<span class="string">&#x27;节点0到节点2的最短路径长度:&#x27;</span>,p2,<span class="string">&#x27; 平均最短路径长度: &#x27;</span>,p3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测是否有路径</span></span><br><span class="line">print(<span class="string">&#x27;检测节点0到节点2是否有路径&#x27;</span>,nx.has_path(G,<span class="number">0</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586655.png" alt="无向图和有向图最短路径示例" /></p><p><strong>输出:</strong></p><blockquote><pre><code>0节点到4节点最短路径:  [0, 6, 4]0节点到所有节点最短路径:  &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [0, 6, 4], 5: [0, 5], 6: [0, 6]&#125;计算图中节点0到节点2的所有最短路径:  [[0, 1, 2], [0, 5, 2]]节点0到节点2的最短路径长度: 2  平均最短路径长度:  1.8095238095238095检测节点0到节点2是否有路径 True</code></pre></blockquote><hr /><h3 id="无权图"><a class="markdownIt-Anchor" href="#无权图"></a> 无权图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">G = nx.path_graph(<span class="number">3</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;无权图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">path1 = nx.single_source_shortest_path(G, <span class="number">0</span>)  <span class="comment">#计算当前源与所有可达节点的最短路径</span></span><br><span class="line">length1 = nx.single_source_shortest_path_length(G, <span class="number">0</span>) <span class="comment">#计算当前源与所有可达节点的最短路径的长度</span></span><br><span class="line">path2 = <span class="built_in">dict</span>(nx.all_pairs_shortest_path(G))  <span class="comment">#计算graph两两节点之间的最短路径</span></span><br><span class="line">length2 = <span class="built_in">dict</span>(nx.all_pairs_shortest_path_length(G)) <span class="comment">#计算graph两两节点之间的最短路径的长度</span></span><br><span class="line">prede1=nx.predecessor(G, <span class="number">0</span>) <span class="comment">#返回G中从源到所有节点最短路径的前驱</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;当前源与所有可达节点的最短路径: &#x27;</span>,path1,<span class="string">&#x27;\n当前源与所有可达节点的最短路径的长度: &#x27;</span>,length1)</span><br><span class="line">print(<span class="string">&#x27;\ngraph两两节点之间的最短路径: &#x27;</span>,path2,<span class="string">&#x27;\ngraph两两节点之间的最短路径的长度: &#x27;</span>,length2)</span><br><span class="line">print(<span class="string">&#x27;\nG中从源到所有节点最短路径的前驱: &#x27;</span>,prede1)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586656.png" alt="无权图" /></p><p><strong>输出:</strong></p><blockquote><pre><code>当前源与所有可达节点的最短路径:  &#123;0: [0], 1: [0, 1], 2: [0, 1, 2]&#125; 当前源与所有可达节点的最短路径的长度:  &#123;0: 0, 1: 1, 2: 2&#125;graph两两节点之间的最短路径:  &#123;0: &#123;0: [0], 1: [0, 1], 2: [0, 1, 2]&#125;, 1: &#123;0: [1, 0], 1: [1], 2: [1, 2]&#125;, 2: &#123;0: [2, 1, 0], 1: [2, 1], 2: [2]&#125;&#125; graph两两节点之间的最短路径的长度:  &#123;0: &#123;0: 0, 1: 1, 2: 2&#125;, 1: &#123;0: 1, 1: 0, 2: 1&#125;, 2: &#123;0: 2, 1: 1, 2: 0&#125;&#125;G中从源到所有节点最短路径的前驱:  &#123;0: [], 1: [0], 2: [1]&#125;</code></pre></blockquote><hr /><h3 id="有权图迪杰斯特拉"><a class="markdownIt-Anchor" href="#有权图迪杰斯特拉"></a> 有权图(迪杰斯特拉)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">G = nx.path_graph(<span class="number">5</span>, create_using = nx.DiGraph())  </span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算加权图最短路径长度和前驱</span></span><br><span class="line">pred, dist = nx.dijkstra_predecessor_and_distance(G, <span class="number">0</span>)</span><br><span class="line">print(<span class="string">&#x27;\n加权图最短路径长度和前驱: &#x27;</span>,pred, dist)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回G中从源到目标的最短加权路径,要求边权重必须为数值</span></span><br><span class="line">print(<span class="string">&#x27;\nG中从源0到目标4的最短加权路径: &#x27;</span>,nx.dijkstra_path(G,<span class="number">0</span>,<span class="number">4</span>))</span><br><span class="line">print(<span class="string">&#x27;\nG中从源0到目标4的最短加权路径的长度: &#x27;</span>,nx.dijkstra_path_length(G,<span class="number">0</span>,<span class="number">4</span>))  <span class="comment">#最短路径长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单源节点最短加权路径和长度。</span></span><br><span class="line">length1, path1 = nx.single_source_dijkstra(G, <span class="number">0</span>)</span><br><span class="line">print(<span class="string">&#x27;\n单源节点最短加权路径和长度: &#x27;</span>,length1, path1)</span><br><span class="line"><span class="comment">#下面两条和是前面的分解</span></span><br><span class="line"><span class="comment"># path2=nx.single_source_dijkstra_path(G,0)</span></span><br><span class="line"><span class="comment"># length2 = nx.single_source_dijkstra_path_length(G, 0)</span></span><br><span class="line"><span class="comment">#print(length1,&#x27;$&#x27;, path1,&#x27;$&#x27;,length2,&#x27;$&#x27;,path2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多源节点最短加权路径和长度。</span></span><br><span class="line">path1 = nx.multi_source_dijkstra_path(G, &#123;<span class="number">0</span>, <span class="number">4</span>&#125;)</span><br><span class="line">length1 = nx.multi_source_dijkstra_path_length(G, &#123;<span class="number">0</span>, <span class="number">4</span>&#125;)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\n多源节点最短加权路径和长度:&#x27;</span>, path1,length1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#两两节点之间最短加权路径和长度。</span></span><br><span class="line">path1 = <span class="built_in">dict</span>(nx.all_pairs_dijkstra_path(G))</span><br><span class="line">length1 = <span class="built_in">dict</span>(nx.all_pairs_dijkstra_path_length(G))</span><br><span class="line">print(<span class="string">&#x27;\n两两节点之间最短加权路径和长度: &#x27;</span>,path1,length1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#双向搜索的迪杰斯特拉</span></span><br><span class="line">length, path = nx.bidirectional_dijkstra(G, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">print(<span class="string">&#x27;\n双向搜索的迪杰斯特拉:&#x27;</span>,length, path)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586657.png" alt="迪杰斯特拉算法使用" /></p><p><strong>输出:</strong></p><blockquote><pre><code>加权图最短路径长度和前驱:  &#123;0: [], 1: [0], 2: [1], 3: [2], 4: [3]&#125; &#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 4&#125;G中从源0到目标4的最短加权路径:  [0, 1, 2, 3, 4]G中从源0到目标4的最短加权路径的长度:  4单源节点最短加权路径和长度:  &#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 4&#125; &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [0, 1, 2, 3, 4]&#125;多源节点最短加权路径和长度: &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [4]&#125; &#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 0&#125;两两节点之间最短加权路径和长度:  &#123;0: &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [0, 1, 2, 3, 4]&#125;, 1: &#123;1: [1], 2: [1, 2], 3: [1, 2, 3], 4: [1, 2, 3, 4]&#125;, 2: &#123;2: [2], 3: [2, 3], 4: [2, 3, 4]&#125;, 3: &#123;3: [3], 4: [3, 4]&#125;, 4: &#123;4: [4]&#125;&#125; &#123;0: &#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 4&#125;, 1: &#123;1: 0, 2:1, 3: 2, 4: 3&#125;, 2: &#123;2: 0, 3: 1, 4: 2&#125;, 3: &#123;3: 0, 4: 1&#125;, 4: &#123;4: 0&#125;&#125;双向搜索的迪杰斯特拉: 4 [0, 1, 2, 3, 4]</code></pre></blockquote><hr /><h3 id="贝尔曼-福特bellman-ford算法"><a class="markdownIt-Anchor" href="#贝尔曼-福特bellman-ford算法"></a> 贝尔曼-福特(Bellman-Ford)算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">G = nx.path_graph(<span class="number">5</span>, create_using = nx.DiGraph())  </span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有权图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;G中从源到目标的最短加权路径: &#x27;</span>,nx.bellman_ford_path(G, <span class="number">0</span>, <span class="number">4</span>))</span><br><span class="line">print(<span class="string">&#x27;\nG中从源到目标的最短加权路径的长度:&#x27;</span>,nx.bellman_ford_path_length(G,<span class="number">0</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">path1=nx.single_source_bellman_ford_path(G,<span class="number">0</span>)</span><br><span class="line">length1 = <span class="built_in">dict</span>(nx.single_source_bellman_ford_path_length(G, <span class="number">0</span>))</span><br><span class="line">print(<span class="string">&#x27;\n单源节点最短加权路径和长度: &#x27;</span>,path1,<span class="string">&#x27;\n单源节点最短加权路径和长度: &#x27;</span>,length1)</span><br><span class="line"></span><br><span class="line">path2 = <span class="built_in">dict</span>(nx.all_pairs_bellman_ford_path(G))</span><br><span class="line">length2 = <span class="built_in">dict</span>(nx.all_pairs_bellman_ford_path_length(G))</span><br><span class="line">print(<span class="string">&#x27;\n两两节点之间最短加权路径和长度: &#x27;</span>,path2,length2)</span><br><span class="line"></span><br><span class="line">length, path = nx.single_source_bellman_ford(G, <span class="number">0</span>)</span><br><span class="line">pred, dist = nx.bellman_ford_predecessor_and_distance(G, <span class="number">0</span>)</span><br><span class="line">print(<span class="string">&#x27;\n加权图最短路径长度和前驱: &#x27;</span>,pred,dist)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586658.png" alt="贝尔曼-福特(Bellman-Ford)算法使用示例" /></p><p><strong>输出:</strong></p><blockquote><pre><code>G中从源到目标的最短加权路径:  [0, 1, 2, 3, 4]G中从源到目标的最短加权路径的长度: 4单源节点最短加权路径和长度:  &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [0, 1, 2, 3, 4]&#125; 单源节点最短加权路径和长度:  &#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 4&#125;两两节点之间最短加权路径和长度:  &#123;0: &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [0, 1, 2, 3, 4]&#125;, 1: &#123;1: [1], 2: [1, 2], 3: [1, 2, 3], 4:</code></pre><p>[1, 2, 3, 4]}, 2: {2: [2], 3: [2, 3], 4: [2, 3, 4]}, 3: {3: [3], 4:<br />[3, 4]}, 4: {4: [4]}} {0: {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}, 1: {1: 0, 2:<br />1, 3: 2, 4: 3}, 2: {2: 0, 3: 1, 4: 2}, 3: {3: 0, 4: 1}, 4: {4: 0}}<br />加权图最短路径长度和前驱:  {0: [None], 1: [0], 2: [1], 3: [2], 4: [3]} {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}</p></blockquote><hr /><h3 id="检测负权重边"><a class="markdownIt-Anchor" href="#检测负权重边"></a> 检测负权重边</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义并画出该图</span></span><br><span class="line">G = nx.cycle_graph(<span class="number">5</span>, create_using = nx.DiGraph())</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加负权重边前后</span></span><br><span class="line">print(nx.negative_edge_cycle(G))</span><br><span class="line">G[<span class="number">1</span>][<span class="number">2</span>][<span class="string">&#x27;weight&#x27;</span>] = -<span class="number">7</span></span><br><span class="line">print(nx.negative_edge_cycle(G))</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><pre><code>FalseTrue</code></pre></blockquote><hr /><h3 id="使用约翰逊johnson的算法"><a class="markdownIt-Anchor" href="#使用约翰逊johnson的算法"></a> 使用约翰逊(Johnson)的算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成graph</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line">G.add_weighted_edges_from([(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, -<span class="number">5</span>),(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#边和节点信息</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;weight&#x27;</span>) </span><br><span class="line">labels=&#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成节点位置 </span></span><br><span class="line">pos=nx.spring_layout(G) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点画出来 </span></span><br><span class="line">nx.draw_networkx_nodes(G,pos,node_color=<span class="string">&#x27;g&#x27;</span>,node_size=<span class="number">500</span>,alpha=<span class="number">0.8</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边画出来 </span></span><br><span class="line">nx.draw_networkx_edges(G,pos,width=<span class="number">1.0</span>,alpha=<span class="number">0.5</span>,edge_color=<span class="string">&#x27;b&#x27;</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点的标签画出来 </span></span><br><span class="line">nx.draw_networkx_labels(G,pos,labels,font_size=<span class="number">16</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边权重画出来 </span></span><br><span class="line">nx.draw_networkx_edge_labels(G, pos, edge_labels) </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">plt.title(<span class="string">&#x27;有权图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用johnson算法计算最短路径</span></span><br><span class="line">paths = nx.johnson(G, weight=<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(paths)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586659.png" alt="约翰逊(Johnson)的算法使用示例" /></p><p><strong>输出:</strong></p><blockquote><pre><code>&#123;'2': &#123;'2': ['2'], '3': ['2', '3']&#125;, '3': &#123;'3': ['3']&#125;, '0': &#123;'2': ['0', '1', '2'], '3': ['0', '1', '2', '3'], '0': ['0'], '1': ['0','1']&#125;, '1': &#123;'2': ['1', '2'], '3': ['1', '2', '3'], '1': ['1']&#125;&#125;</code></pre></blockquote><hr /><h3 id="弗洛伊德算法floyd-warshall"><a class="markdownIt-Anchor" href="#弗洛伊德算法floyd-warshall"></a> 弗洛伊德算法(Floyd-Warshall)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用Floyd算法找到所有对最短路径长度。</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line">G.add_weighted_edges_from([(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, -<span class="number">5</span>),(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#边和节点信息</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;weight&#x27;</span>) </span><br><span class="line">labels=&#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成节点位置 </span></span><br><span class="line">pos=nx.spring_layout(G) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点画出来 </span></span><br><span class="line">nx.draw_networkx_nodes(G,pos,node_color=<span class="string">&#x27;g&#x27;</span>,node_size=<span class="number">500</span>,alpha=<span class="number">0.8</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边画出来 </span></span><br><span class="line">nx.draw_networkx_edges(G,pos,width=<span class="number">1.0</span>,alpha=<span class="number">0.5</span>,edge_color=<span class="string">&#x27;b&#x27;</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点的标签画出来 </span></span><br><span class="line">nx.draw_networkx_labels(G,pos,labels,font_size=<span class="number">16</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边权重画出来 </span></span><br><span class="line">nx.draw_networkx_edge_labels(G, pos, edge_labels) </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">plt.title(<span class="string">&#x27;有权图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算最短路径长度</span></span><br><span class="line">lenght=nx.floyd_warshall(G, weight=<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算最短路径上的前驱与路径长度</span></span><br><span class="line">predecessor,distance1=nx.floyd_warshall_predecessor_and_distance(G, weight=<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算两两节点之间的最短距离,并以numpy矩阵形式返回</span></span><br><span class="line">distance2=nx.floyd_warshall_numpy(G, weight=<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">list</span>(lenght))</span><br><span class="line">print(predecessor)</span><br><span class="line">print(<span class="built_in">list</span>(distance1))</span><br><span class="line">print(distance2)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586666.png" alt="弗洛伊德算法(Floyd-Warshall)使用示例" /></p><p><strong>输出:</strong></p><blockquote><pre><code>['2', '3', '0', '1']&#123;'2': &#123;'3': '2'&#125;, '0': &#123;'2': '1', '3': '2', '1': '0'&#125;, '1': &#123;'2': '1', '3': '2'&#125;&#125;['2', '3', '0', '1'][[ 0.  1. inf inf] [inf  0. inf inf] [-1.  0.  0. -5.] [ 4.  5. inf  0.]]</code></pre></blockquote><p>注:输出中的矩阵不是按照节点0,1,2,3排序,而是2,1,3,0,即如图:</p><!-- ![Diagram](./attachments/1530181364405.drawio.html) --><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586667.png" alt="" title="两点之间的最短距离" /></p><hr /><h3 id="a算法"><a class="markdownIt-Anchor" href="#a算法"></a> A*算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">G = nx.path_graph(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有x向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接输出路径和长度</span></span><br><span class="line">print(nx.astar_path(G, <span class="number">0</span>, <span class="number">4</span>))</span><br><span class="line">print(nx.astar_path_length(G, <span class="number">0</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586668.png" alt="A*算法" /></p><p>输出:</p><blockquote><pre><code>[0, 1, 2, 3, 4]4</code></pre></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把&lt;code&gt;图论&lt;/code&gt;中常用算法弄个明白在写这部分.&lt;/p&gt;
&lt;p&gt;图论常用算法看我的博客:&lt;/p&gt;
&lt;p&gt;下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.&lt;br /&gt;
我将图论的经典问题及常用算法的总结写在下面两篇博客中:&lt;br /&gt;
&lt;a href=&quot;https://www.cnblogs.com/wushaogui/p/9222828.html&quot;&gt;图论—问题篇&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.cnblogs.com/wushaogui/p/9237445.html&quot;&gt;图论—算法篇&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(9)-线性代数相关</title>
    <link href="https://shaogui.life/2018/09/24/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(9)-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9B%B8%E5%85%B3/"/>
    <id>https://shaogui.life/2018/09/24/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(9)-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9B%B8%E5%85%B3/</id>
    <published>2018-09-24T06:22:54.000Z</published>
    <updated>2021-02-18T08:43:35.509Z</updated>
    
    <content type="html"><![CDATA[<p>学过线性代数的都了解矩阵,在矩阵上的文章可做的很多,什么特征矩阵,单位矩阵等.grpah存储可以使用矩阵,比如graph的<code>邻接矩阵</code>,<code>权重矩阵</code>等,这节主要是在等到graph后,如何快速得到这些信息.详细官方文档在<a href="https://networkx.github.io/documentation/stable/reference/linalg.html">这里</a></p><a id="more"></a><p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h1 id="线性代数相关"><a class="markdownIt-Anchor" href="#线性代数相关"></a> 线性代数相关</h1><h2 id="图矩阵"><a class="markdownIt-Anchor" href="#图矩阵"></a> 图矩阵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义图的节点和边</span></span><br><span class="line">nodes=[<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">edges=[(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">7</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">6</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">0.5</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">0.5</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">0.5</span>)]</span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">10</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个无向图和有向图</span></span><br><span class="line">G1 = nx.Graph()</span><br><span class="line">G1.add_nodes_from(nodes)</span><br><span class="line">G1.add_weighted_edges_from(edges)</span><br><span class="line"></span><br><span class="line">G2 = nx.DiGraph()</span><br><span class="line">G2.add_nodes_from(nodes)</span><br><span class="line">G2.add_weighted_edges_from(edges)</span><br><span class="line"></span><br><span class="line">pos1=nx.circular_layout(G1)</span><br><span class="line">pos2=nx.circular_layout(G2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出无向图和有向图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G1,pos1, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;无向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(G2,pos2, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#控制numpy输出小数位数</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.set_printoptions(precision=<span class="number">3</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#邻接矩阵</span></span><br><span class="line">A = nx.adjacency_matrix(G1)</span><br><span class="line">print(<span class="string">&#x27;邻接矩阵:\n&#x27;</span>,A.todense())</span><br><span class="line"></span><br><span class="line"><span class="comment">#关联矩阵</span></span><br><span class="line">I = nx.incidence_matrix(G1)</span><br><span class="line">print(<span class="string">&#x27;\n关联矩阵:\n&#x27;</span>,I.todense())</span><br><span class="line"></span><br><span class="line"><span class="comment">#拉普拉斯矩阵</span></span><br><span class="line">L=nx.laplacian_matrix(G1)</span><br><span class="line">print(<span class="string">&#x27;\n拉普拉斯矩阵:\n&#x27;</span>,L.todense())</span><br><span class="line"></span><br><span class="line"><span class="comment">#标准化的拉普拉斯矩阵</span></span><br><span class="line">NL=nx.normalized_laplacian_matrix(G1)</span><br><span class="line">print(<span class="string">&#x27;\n标准化的拉普拉斯矩阵:\n&#x27;</span>,NL.todense())</span><br><span class="line"></span><br><span class="line"><span class="comment">#有向图拉普拉斯矩阵</span></span><br><span class="line">DL=nx.directed_laplacian_matrix(G2)</span><br><span class="line">print(<span class="string">&#x27;\n有向拉普拉斯矩阵:\n&#x27;</span>,DL)</span><br><span class="line"></span><br><span class="line"><span class="comment">#拉普拉斯算子的特征值</span></span><br><span class="line">LS=nx.laplacian_spectrum(G1)</span><br><span class="line">print(<span class="string">&#x27;\n拉普拉斯算子的特征值:\n&#x27;</span>,LS)</span><br><span class="line"></span><br><span class="line"><span class="comment">#邻接矩阵的特征值</span></span><br><span class="line">AS=nx.adjacency_spectrum(G1)</span><br><span class="line">print(<span class="string">&#x27;\n邻接矩阵的特征值:\n&#x27;</span>,AS)</span><br><span class="line"></span><br><span class="line"><span class="comment">#无向图的代数连通性</span></span><br><span class="line">AC=nx.algebraic_connectivity(G1)</span><br><span class="line">print(<span class="string">&#x27;\n无向图的代数连通性:\n&#x27;</span>,AC)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图的光谱排序</span></span><br><span class="line">SO=nx.spectral_ordering(G1)</span><br><span class="line">print(<span class="string">&#x27;\n图的光谱排序:\n&#x27;</span>,SO)</span><br><span class="line"></span><br><span class="line"><span class="comment">#两个矩阵的解释看:https://blog.csdn.net/Hanging_Gardens/article/details/55670356</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550454647.png" alt="图矩阵示例" /></p><p><strong>输出:</strong></p><pre><code>邻接矩阵: [[0.  0.  0.  0.  5.  0.  0.  0.  6. ] [0.  0.  0.  2.  0.  0.  0.  0.  0. ] [0.  0.  0.  0.  0.  0.5 0.5 0.  0. ] [0.  2.  0.  1.  1.  0.  0.  0.  0. ] [5.  0.  0.  1.  0.  0.  0.  0.  7. ] [0.  0.  0.5 0.  0.  0.  0.5 0.  0. ] [0.  0.  0.5 0.  0.  0.5 0.  0.  0. ] [0.  0.  0.  0.  0.  0.  0.  0.  0. ] [6.  0.  0.  0.  7.  0.  0.  0.  0. ]]关联矩阵: [[1. 1. 0. 0. 0. 0. 0. 0. 0.] [0. 0. 1. 0. 0. 0. 0. 0. 0.] [0. 0. 0. 1. 1. 0. 0. 0. 0.] [0. 0. 1. 0. 0. 1. 0. 0. 0.] [0. 1. 0. 0. 0. 1. 0. 1. 0.] [0. 0. 0. 1. 0. 0. 0. 0. 1.] [0. 0. 0. 0. 1. 0. 0. 0. 1.] [0. 0. 0. 0. 0. 0. 0. 0. 0.] [1. 0. 0. 0. 0. 0. 0. 1. 0.]]拉普拉斯矩阵: [[11.   0.   0.   0.  -5.   0.   0.   0.  -6. ] [ 0.   2.   0.  -2.   0.   0.   0.   0.   0. ] [ 0.   0.   1.   0.   0.  -0.5 -0.5  0.   0. ] [ 0.  -2.   0.   3.  -1.   0.   0.   0.   0. ] [-5.   0.   0.  -1.  13.   0.   0.   0.  -7. ] [ 0.   0.  -0.5  0.   0.   1.  -0.5  0.   0. ] [ 0.   0.  -0.5  0.   0.  -0.5  1.   0.   0. ] [ 0.   0.   0.   0.   0.   0.   0.   0.   0. ] [-6.   0.   0.   0.  -7.   0.   0.   0.  13. ]]标准化的拉普拉斯矩阵: [[ 1.     0.     0.     0.    -0.418  0.     0.     0.    -0.502] [ 0.     1.     0.    -0.707  0.     0.     0.     0.     0.   ] [ 0.     0.     1.     0.     0.    -0.5   -0.5    0.     0.   ] [ 0.    -0.707  0.     0.75  -0.139  0.     0.     0.     0.   ] [-0.418  0.     0.    -0.139  1.     0.     0.     0.    -0.538] [ 0.     0.    -0.5    0.     0.     1.    -0.5    0.     0.   ] [ 0.     0.    -0.5    0.     0.    -0.5    1.     0.     0.   ] [ 0.     0.     0.     0.     0.     0.     0.     0.     0.   ] [-0.502  0.     0.     0.    -0.538  0.     0.     0.     1.   ]]有向拉普拉斯矩阵: [[ 0.889 -0.117 -0.029 -0.087 -0.319 -0.029 -0.029 -0.129 -0.242] [-0.117  0.889 -0.026 -0.278 -0.051 -0.026 -0.026 -0.114 -0.056] [-0.029 -0.026  0.994 -0.012 -0.009 -0.481 -0.481 -0.025 -0.01 ] [-0.087 -0.278 -0.012  0.757 -0.097 -0.012 -0.012 -0.052 -0.006] [-0.319 -0.051 -0.009 -0.097  0.994 -0.009 -0.009 -0.041 -0.434] [-0.029 -0.026 -0.481 -0.012 -0.009  0.994 -0.481 -0.025 -0.01 ] [-0.029 -0.026 -0.481 -0.012 -0.009 -0.481  0.994 -0.025 -0.01 ] [-0.129 -0.114 -0.025 -0.052 -0.041 -0.025 -0.025  0.889 -0.045] [-0.242 -0.056 -0.01  -0.006 -0.434 -0.01  -0.01  -0.045  0.994]]拉普拉斯算子的特征值: [-1.436e-15  0.000e+00  4.610e-16  7.000e-01  1.500e+00  1.500e+00  4.576e+00  1.660e+01  2.013e+01]邻接矩阵的特征值: [12.068+0.000e+00j  2.588+0.000e+00j -7.219+0.000e+00j -4.925+0.000e+00j -1.513+0.000e+00j  1.   +0.000e+00j -0.5  +2.393e-17j -0.5  -2.393e-17j  0.   +0.000e+00j]无向图的代数连通性: 0.0图的光谱排序: ['4', '2', '1', '0', '5', 'b', 'c', 'a', '3']</code></pre><hr /><p>后面还有两个小节,由于对图论算法不是很明白,所以先讲明白算法原理,再使用networkX实现,如无须读算法,可以跳过算法原理部分.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学过线性代数的都了解矩阵,在矩阵上的文章可做的很多,什么特征矩阵,单位矩阵等.grpah存储可以使用矩阵,比如graph的&lt;code&gt;邻接矩阵&lt;/code&gt;,&lt;code&gt;权重矩阵&lt;/code&gt;等,这节主要是在等到graph后,如何快速得到这些信息.详细官方文档在&lt;a href=&quot;https://networkx.github.io/documentation/stable/reference/linalg.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(7)-对graph进行分析</title>
    <link href="https://shaogui.life/2018/09/21/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(7)-%E5%AF%B9graph%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90/"/>
    <id>https://shaogui.life/2018/09/21/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(7)-%E5%AF%B9graph%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90/</id>
    <published>2018-09-21T13:25:31.000Z</published>
    <updated>2021-02-18T08:43:35.617Z</updated>
    
    <content type="html"><![CDATA[<p>graph构建完成后,对graph的连通等属性进行分析.</p><a id="more"></a><p>注意: #007e80如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h1 id="对图进行分析"><a class="markdownIt-Anchor" href="#对图进行分析"></a> 对图进行分析</h1><p>强连通：有向图中任意两点v1、v2间存在v1到v2的路径（path）及v2到v1的路径。<br />弱联通：将有向图的所有的有向边替换为无向边，所得到的图称为原图的基图。如果一个有向图的基图是连通图，则有向图是弱连通图。</p><h2 id="连通子图"><a class="markdownIt-Anchor" href="#连通子图"></a> 连通子图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义图的节点和边</span></span><br><span class="line">nodes=[<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">edges=[(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">7</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">6</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">0.5</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">0.5</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">0.5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义graph</span></span><br><span class="line">G = nx.Graph()</span><br><span class="line">G.add_nodes_from(nodes)</span><br><span class="line">G.add_weighted_edges_from(edges)</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到所有连通子图</span></span><br><span class="line">print(<span class="string">&#x27;connected_components of graph: &#x27;</span>,<span class="built_in">list</span>(nx.connected_components(G)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示该graph</span></span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><pre><code>connected_components of graph:  [&#123;'a', 'b', 'c'&#125;, &#123;'4', '0', '5', '1', '2'&#125;, &#123;'3'&#125;]</code></pre></blockquote><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550122473.png" alt="png" title="连通子图例子" /></p><h2 id="弱联通"><a class="markdownIt-Anchor" href="#弱联通"></a> 弱联通</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义graph</span></span><br><span class="line">G = nx.path_graph(<span class="number">4</span>, create_using=nx.DiGraph())</span><br><span class="line">G.add_path([<span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>])</span><br><span class="line">G.add_path([<span class="number">5</span>, <span class="number">6</span>,<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出所有的弱连通图</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> nx.weakly_connected_components(G):</span><br><span class="line">    print(c)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#由大到小的规模判断弱连通子图</span></span><br><span class="line">print([<span class="built_in">len</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">sorted</span>(nx.weakly_connected_components(G), key=<span class="built_in">len</span>, reverse=<span class="literal">True</span>)])</span><br><span class="line"></span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><pre><code>&#123;0, 1, 2, 3, 7, 8&#125;&#123;9, 5, 6&#125;[6, 3]</code></pre></blockquote><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550122475.png" alt="png" title="弱联通例子" /></p><h2 id="强连通"><a class="markdownIt-Anchor" href="#强连通"></a> 强连通</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">G.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义图</span></span><br><span class="line">G = nx.path_graph(<span class="number">4</span>, create_using=nx.DiGraph())</span><br><span class="line">G.add_path([<span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出所有的强连通子图</span></span><br><span class="line">con = nx.strongly_connected_components(G)</span><br><span class="line">print(con,<span class="built_in">type</span>(con),<span class="built_in">list</span>(con))</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示该图</span></span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><pre><code>&lt;generator object strongly_connected_components at 0x7fe0eefe9c50&gt; &lt;class 'generator'&gt; [&#123;8, 1, 2, 3&#125;, &#123;0&#125;]</code></pre></blockquote><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550122476.png" alt="png" title="强连通例子" /></p><h2 id="子图"><a class="markdownIt-Anchor" href="#子图"></a> 子图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">G.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义图</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line">G.add_path([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"><span class="comment">#抽取图G的节点作为子图</span></span><br><span class="line">sub_graph = G.subgraph([<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment">#画原图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;原图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#画子图</span></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(sub_graph, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;子图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550122476.png" alt="png" title="子图例子" /></p><h2 id="条件过滤"><a class="markdownIt-Anchor" href="#条件过滤"></a> 条件过滤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#G.clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义有向图</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line">road_nodes = &#123;<span class="string">&#x27;a&#x27;</span>:&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>&#125;, <span class="string">&#x27;b&#x27;</span>:&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>&#125;, <span class="string">&#x27;c&#x27;</span>:&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">3</span>&#125;, <span class="string">&#x27;d&#x27;</span>:&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line">road_edges = [(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)]</span><br><span class="line">G.add_nodes_from(road_nodes.items())</span><br><span class="line">G.add_edges_from(road_edges)</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flt_func_draw</span>():</span></span><br><span class="line">    flt_func = <span class="keyword">lambda</span> d: d[<span class="string">&#x27;id&#x27;</span>] != <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> flt_func</span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出原图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;过滤前&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤原图得到子图</span></span><br><span class="line">flt_func = flt_func_draw()</span><br><span class="line">part_G = G.subgraph(n <span class="keyword">for</span> n, d <span class="keyword">in</span> G.nodes(data=<span class="literal">True</span>) <span class="keyword">if</span> flt_func(d))</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出子图</span></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(part_G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;过滤后&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550122477.png" alt="png" title="条件过滤后的子图" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;graph构建完成后,对graph的连通等属性进行分析.&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(6)-对graph进行操作</title>
    <link href="https://shaogui.life/2018/09/19/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(6)-%E5%AF%B9graph%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
    <id>https://shaogui.life/2018/09/19/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(6)-%E5%AF%B9graph%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/</id>
    <published>2018-09-19T13:25:31.000Z</published>
    <updated>2021-02-18T08:43:35.401Z</updated>
    
    <content type="html"><![CDATA[<p>graph生成后,除了有查看操作,还有移除等操作,还有其他更多操作,具体可以看<a href="https://networkx.github.io/documentation/stable/reference/algorithms/operators.html">这里</a>.下面将比较graph操作前后的不同.</p><p>目录:</p><a id="more"></a><p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h1 id="对图进行操作"><a class="markdownIt-Anchor" href="#对图进行操作"></a> 对图进行操作</h1><h2 id="移除某些节点和边"><a class="markdownIt-Anchor" href="#移除某些节点和边"></a> 移除某些节点和边</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#G.clear()</span></span><br><span class="line"><span class="comment">#生成graph</span></span><br><span class="line">G=nx.path_graph(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">plt.suptitle(<span class="string">&#x27;移除部分节点和边&#x27;</span>,fontproperties=myfont)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出未操作前的graph</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;操作前&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除部分节点和边,移除所有的点和边使用G.clear(),不再单独测试</span></span><br><span class="line">G.remove_node(<span class="number">2</span>)</span><br><span class="line">G.remove_nodes_from([<span class="number">1</span>,<span class="number">5</span>])</span><br><span class="line">G.remove_edge(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出操作后的graph</span></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;操作后&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549997650.png" alt="png" title="移除某些节点和边" /></p><h2 id="合并graph"><a class="markdownIt-Anchor" href="#合并graph"></a> 合并graph</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># G1.clear()</span></span><br><span class="line"><span class="comment"># G2.clear()</span></span><br><span class="line"><span class="comment"># G3.clear()</span></span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">3</span>,figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">plt.suptitle(<span class="string">&#x27;合并两个图&#x27;</span>,fontproperties=myfont)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成graph1</span></span><br><span class="line">G1=nx.path_graph(<span class="number">8</span>)</span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">nx.draw(G1, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;图1&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成graph2</span></span><br><span class="line">G2=nx.complete_graph(<span class="number">3</span>)</span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">nx.draw(G2, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;图2&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除部分节点和边,移除所有的点和边使用G.clear(),不再单独测试</span></span><br><span class="line">G3=nx.disjoint_union(G1,G2)</span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line">nx.draw(G3, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;合并后&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549997656.png" alt="png" title="合并graph" /></p><h2 id="有向图和无向图的转化"><a class="markdownIt-Anchor" href="#有向图和无向图的转化"></a> 有向图和无向图的转化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#无向图转有向图</span></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">3</span>))</span><br><span class="line">plt.suptitle(<span class="string">&#x27;无向图转换为有向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义无向图</span></span><br><span class="line">G = nx.path_graph(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#转换为有向图</span></span><br><span class="line">G2=G.to_directed()</span><br><span class="line"></span><br><span class="line"><span class="comment">#下面是可视化转换前后的两个图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;无向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(G2, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#有向图转无向图</span></span><br><span class="line">G.clear()</span><br><span class="line">G2.clear()</span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">3</span>))</span><br><span class="line">plt.suptitle(<span class="string">&#x27;有向图转换为无向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义有向图</span></span><br><span class="line">G = nx.path_graph(<span class="number">8</span>,create_using=nx.DiGraph())</span><br><span class="line"><span class="comment">#转换为无向图</span></span><br><span class="line">G2=G.to_undirected()</span><br><span class="line"></span><br><span class="line"><span class="comment">#下面是可视化转换前后的两个图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(G2, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;无向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:可以看出无向图转有向图时,得到的边都是双向</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549997657.png" alt="png" title="无向图转换为有向图" /></p><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549997658.png" alt="png" title="有向图转换为无向图" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;graph生成后,除了有查看操作,还有移除等操作,还有其他更多操作,具体可以看&lt;a href=&quot;https://networkx.github.io/documentation/stable/reference/algorithms/operators.html&quot;&gt;这里&lt;/a&gt;.下面将比较graph操作前后的不同.&lt;/p&gt;
&lt;p&gt;目录:&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(5)-查看graph的信息</title>
    <link href="https://shaogui.life/2018/09/18/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(5)-%E6%9F%A5%E7%9C%8Bgraph%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
    <id>https://shaogui.life/2018/09/18/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(5)-%E6%9F%A5%E7%9C%8Bgraph%E7%9A%84%E4%BF%A1%E6%81%AF/</id>
    <published>2018-09-18T14:15:44.000Z</published>
    <updated>2021-02-18T08:43:35.745Z</updated>
    
    <content type="html"><![CDATA[<p>有时候graph建好后,我们并不清除该graph内节点的,边的信息,这就需要调用函数去查看了.</p><a id="more"></a><p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h1 id="查看graph的信息"><a class="markdownIt-Anchor" href="#查看graph的信息"></a> 查看Graph的信息</h1><h2 id="查看graph内节点边的数量"><a class="markdownIt-Anchor" href="#查看graph内节点边的数量"></a> 查看graph内节点,边的<code>数量</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成graph</span></span><br><span class="line">G=nx.path_graph(<span class="number">8</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看节点和边的情况</span></span><br><span class="line">print(<span class="string">&#x27;number of nodes&#x27;</span>,G.number_of_nodes())</span><br><span class="line">print(<span class="string">&#x27;number of edges&#x27;</span>,G.number_of_edges())</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549846968.png" alt="enter description here" title="例子图" /></p><p><strong>输出:</strong></p><blockquote><pre><code>number of nodes 8number of edges 7</code></pre></blockquote><h2 id="查看graph中的点边"><a class="markdownIt-Anchor" href="#查看graph中的点边"></a> 查看graph中的点,边</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输出graph所有的点和边</span></span><br><span class="line">print(<span class="string">&#x27;all nodes of Graph&#x27;</span>,G.nodes())</span><br><span class="line">print(<span class="string">&#x27;all edges of Graph&#x27;</span>,G.edges())</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><pre><code>all nodes of Graph [0, 1, 2, 3, 4, 5, 6, 7]all edges of Graph [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]</code></pre></blockquote><h2 id="查看某些节点的度"><a class="markdownIt-Anchor" href="#查看某些节点的度"></a> 查看某些节点的度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看节点2和3的度</span></span><br><span class="line">print(<span class="string">&#x27;degree of some nodes&#x27;</span>,G.degree([<span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><pre><code>degree of some nodes [(2, 2), (3, 2)]</code></pre></blockquote><h2 id="查看节点边信息"><a class="markdownIt-Anchor" href="#查看节点边信息"></a> 查看节点&amp;边信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置一些节点信息</span></span><br><span class="line">G.nodes[<span class="number">1</span>][<span class="string">&#x27;room&#x27;</span>] = <span class="number">714</span></span><br><span class="line">G.nodes[<span class="number">1</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="comment">#设置一些边信息</span></span><br><span class="line">G[<span class="number">1</span>][<span class="number">2</span>][<span class="string">&#x27;weight&#x27;</span>] = <span class="number">4.7</span></span><br><span class="line">G[<span class="number">1</span>][<span class="number">2</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&quot;blue&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;imformation of one nodes&#x27;</span>,G.nodes[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">&#x27;imformation of all nodes&#x27;</span>,G.nodes.data())</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;imformation of all nodes&#x27;</span>,G.edges.data())  <span class="comment">#边不支持[x]这样的下标访问</span></span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><pre><code>imformation of one nodes &#123;'room': 714, 'color': 'b'&#125;imformation of all nodes [(0, &#123;&#125;), (1, &#123;'room': 714, 'color': 'b'&#125;), (2, &#123;&#125;), (3, &#123;&#125;), (4, &#123;&#125;), (5, &#123;&#125;), (6, &#123;&#125;), (7, &#123;&#125;)]imformation of all nodes [(0, 1, &#123;&#125;), (1, 2, &#123;'weight': 4.7, 'color': 'blue'&#125;), (2, 3, &#123;&#125;), (3, 4, &#123;&#125;), (4, 5, &#123;&#125;), (5, 6, &#123;&#125;), (6,7, &#123;&#125;)]</code></pre></blockquote><h2 id="遍历一个有权图"><a class="markdownIt-Anchor" href="#遍历一个有权图"></a> 遍历一个有权图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个有权无向图</span></span><br><span class="line">FG = nx.Graph()</span><br><span class="line">FG.add_weighted_edges_from([(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0.125</span>), (<span class="number">1</span>, <span class="number">3</span>, <span class="number">0.75</span>), (<span class="number">2</span>, <span class="number">4</span>, <span class="number">1.2</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">0.375</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> n, nbrs <span class="keyword">in</span> FG.adj.items():</span><br><span class="line">    <span class="keyword">for</span> nbr, eattr <span class="keyword">in</span> nbrs.items():</span><br><span class="line">        wt = eattr[<span class="string">&#x27;weight&#x27;</span>]</span><br><span class="line">        <span class="comment">#权重小于0.5的输出</span></span><br><span class="line">        <span class="keyword">if</span> wt &lt; <span class="number">0.5</span>: </span><br><span class="line">            print(<span class="string">&#x27;way1-(%d, %d, %.3f)&#x27;</span> % (n, nbr, wt))</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历所有边</span></span><br><span class="line"><span class="keyword">for</span> (u, v, wt) <span class="keyword">in</span> FG.edges.data(<span class="string">&#x27;weight&#x27;</span>):</span><br><span class="line">    <span class="comment">#权重小于0.5的输出</span></span><br><span class="line">    <span class="keyword">if</span> wt &lt; <span class="number">0.5</span>: </span><br><span class="line">        print(<span class="string">&#x27;way2-(%d, %d, %.3f)&#x27;</span> % (u, v, wt))</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><pre><code>way1-(1, 2, 0.125)way1-(2, 1, 0.125)way1-(3, 4, 0.375)way1-(4, 3, 0.375)way2-(1, 2, 0.125)way2-(3, 4, 0.375)</code></pre></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时候graph建好后,我们并不清除该graph内节点的,边的信息,这就需要调用函数去查看了.&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(4)-设置graph的信息</title>
    <link href="https://shaogui.life/2018/09/17/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(4)-%E8%AE%BE%E7%BD%AEgraph%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
    <id>https://shaogui.life/2018/09/17/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(4)-%E8%AE%BE%E7%BD%AEgraph%E7%9A%84%E4%BF%A1%E6%81%AF/</id>
    <published>2018-09-17T07:35:44.000Z</published>
    <updated>2021-02-18T08:43:35.661Z</updated>
    
    <content type="html"><![CDATA[<p>要画出美观的graph,需要对graph里面的<code>节点</code>,<code>边</code>,<code>节点的布局</code>都要进行设置,具体可以看官方文档:<a href="https://networkx.github.io/documentation/stable/tutorial.html#adding-attributes-to-graphs-nodes-and-edges">Adding attributes to graphs, nodes, and edges</a>部分.</p><a id="more"></a><p>注意:如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h1 id="设置graph的信息"><a class="markdownIt-Anchor" href="#设置graph的信息"></a> 设置graph的信息</h1><h2 id="创建graph时添加属性"><a class="markdownIt-Anchor" href="#创建graph时添加属性"></a> 创建graph时添加属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#G.clear()</span></span><br><span class="line">G=nx.Graph()</span><br><span class="line">G = nx.Graph(day=<span class="string">&quot;Friday&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;Assign graph attributes when creating a new graph: &#x27;</span>,G.graph)</span><br><span class="line">G.graph[<span class="string">&#x27;day&#x27;</span>] = <span class="string">&quot;Monday&quot;</span></span><br><span class="line">print(<span class="string">&#x27;Assign graph attributes when have a graph: &#x27;</span>,G.graph)</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><p>Assign graph attributes when creating a new graph:  {‘day’: ‘Friday’}<br />Assign graph attributes when have a graph:  {‘day’: ‘Monday’}</p></blockquote><h2 id="指定节点的属性"><a class="markdownIt-Anchor" href="#指定节点的属性"></a> 指定节点的属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建时设置</span></span><br><span class="line">G.add_node(<span class="number">1</span>, time=<span class="string">&#x27;5pm&#x27;</span>)</span><br><span class="line">G.add_nodes_from([<span class="number">3</span>,<span class="number">4</span>], time=<span class="string">&#x27;2pm&#x27;</span>,color=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接设置</span></span><br><span class="line">G.nodes[<span class="number">1</span>][<span class="string">&#x27;room&#x27;</span>] = <span class="number">714</span></span><br><span class="line">G.nodes[<span class="number">1</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">print(G.nodes.data())</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><p>[(1, {‘room’: 714, ‘time’: ‘5pm’, ‘color’: ‘b’}), (3, {‘time’: ‘2pm’, ‘color’: ‘g’}), (4, {‘time’: ‘2pm’, ‘color’: ‘g’})]</p></blockquote><h2 id="指定边的属性"><a class="markdownIt-Anchor" href="#指定边的属性"></a> 指定边的属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建时设置</span></span><br><span class="line">G.add_edge(<span class="number">1</span>, <span class="number">2</span>, weight=<span class="number">4.7</span> )</span><br><span class="line">G.add_edges_from([(<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">5</span>)], color=<span class="string">&#x27;red&#x27;</span>,weight=<span class="number">10</span>)</span><br><span class="line">G.add_edges_from([(<span class="number">1</span>, <span class="number">2</span>, &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;blue&#x27;</span>&#125;), (<span class="number">2</span>, <span class="number">3</span>, &#123;<span class="string">&#x27;weight&#x27;</span>: <span class="number">8</span>&#125;)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接设置</span></span><br><span class="line">G[<span class="number">1</span>][<span class="number">2</span>][<span class="string">&#x27;weight&#x27;</span>] = <span class="number">4.7</span></span><br><span class="line">G[<span class="number">1</span>][<span class="number">2</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&quot;blue&quot;</span></span><br><span class="line">G.edges[<span class="number">3</span>, <span class="number">4</span>][<span class="string">&#x27;weight&#x27;</span>] = <span class="number">4.2</span></span><br><span class="line">G.edges[<span class="number">1</span>, <span class="number">2</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&quot;green&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;edge 1-2: &#x27;</span>,G.edges[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">print(<span class="string">&#x27;edge 3-4: &#x27;</span>,G.edges[<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><p>edge 1-2:  {‘weight’: 4.7, ‘color’: ‘green’}<br />edge 3-4:  {‘weight’: 4.2, ‘color’: ‘red’}</p></blockquote><h2 id="显示graph"><a class="markdownIt-Anchor" href="#显示graph"></a> 显示graph</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成节点标签</span></span><br><span class="line">labels=&#123;&#125;</span><br><span class="line">labels[<span class="number">1</span>]=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">labels[<span class="number">2</span>]=<span class="string">&#x27;2&#x27;</span></span><br><span class="line">labels[<span class="number">3</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">labels[<span class="number">4</span>]=<span class="string">&#x27;4&#x27;</span></span><br><span class="line">labels[<span class="number">5</span>]=<span class="string">&#x27;5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取graph中的边权重</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;weight of all edges:&#x27;</span>,edge_labels)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成节点位置</span></span><br><span class="line">pos=nx.circular_layout(G)</span><br><span class="line">print(<span class="string">&#x27;position of all nodes:&#x27;</span>,pos)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把节点画出来</span></span><br><span class="line">nx.draw_networkx_nodes(G,pos,node_color=<span class="string">&#x27;g&#x27;</span>,node_size=<span class="number">500</span>,alpha=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把边画出来</span></span><br><span class="line">nx.draw_networkx_edges(G,pos,width=<span class="number">1.0</span>,alpha=<span class="number">0.5</span>,edge_color=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把节点的标签画出来</span></span><br><span class="line">nx.draw_networkx_labels(G,pos,labels,font_size=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把边权重画出来</span></span><br><span class="line">nx.draw_networkx_edge_labels(G, pos, edge_labels)</span><br><span class="line"></span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line"><span class="comment">#去掉坐标刻度</span></span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>输出:</strong></p><blockquote><p>weight of all edges: {(1, 2): 4.7, (3, 4): 4.2, (2, 3): 8, (4, 5): 10}<br />position of all nodes: {1: array([1.00000000e+00, 2.38418583e-08]), 2: array([0.30901696, 0.95105658]), 3: array([-0.80901709,  0.58778522]), 4: array([-0.80901698, -0.58778535]), 5: array([ 0.30901711, -0.95105647])}</p></blockquote><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549748265.png" alt="有权无向图" title="有权无向图" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;要画出美观的graph,需要对graph里面的&lt;code&gt;节点&lt;/code&gt;,&lt;code&gt;边&lt;/code&gt;,&lt;code&gt;节点的布局&lt;/code&gt;都要进行设置,具体可以看官方文档:&lt;a href=&quot;https://networkx.github.io/documentation/stable/tutorial.html#adding-attributes-to-graphs-nodes-and-edges&quot;&gt;Adding attributes to graphs, nodes, and edges&lt;/a&gt;部分.&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX系列教程(3)-手动创建graph</title>
    <link href="https://shaogui.life/2018/09/16/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(3)-%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAgraph/"/>
    <id>https://shaogui.life/2018/09/16/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(3)-%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAgraph/</id>
    <published>2018-09-16T00:50:33.000Z</published>
    <updated>2021-02-18T08:43:35.497Z</updated>
    
    <content type="html"><![CDATA[<p>不可否认,日常中我们使用最多的还是,使用自己的数据去手动创建自己的图形,而不是使用生成器,现从给graph添加<code>点</code>和边入手,讲解手动创建graph.</p><a id="more"></a><p>如果代码出现找不库,请返回第一个教程,把库文件导入.</p><h1 id="给graph添加节点"><a class="markdownIt-Anchor" href="#给graph添加节点"></a> 给graph添加节点</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"></span><br><span class="line"><span class="comment">#该函数由于显示一组graph,传上来的是一组graph和这些graph的描述.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ShowGraph</span>(<span class="params">glists,ginfo,rowsize=<span class="number">4</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#每行放rowsize个,计算可以放多少行</span></span><br><span class="line">    row=ceil(<span class="built_in">len</span>(glists)/rowsize)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#定义组图</span></span><br><span class="line">    plt.subplots(row,rowsize,figsize=(<span class="number">15</span>,<span class="number">3</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#开始画图</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(glists)):</span><br><span class="line">        <span class="comment">#定义子图</span></span><br><span class="line">        plt.subplot(row,rowsize,ind+<span class="number">1</span>)</span><br><span class="line">        nx.draw(glists[ind],with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#设置图片</span></span><br><span class="line">        plt.title(ginfo[ind],fontproperties=myfont)</span><br><span class="line">        plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">        plt.xticks([])</span><br><span class="line">        plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加单个节点</span></span><br><span class="line">G1=nx.Graph()</span><br><span class="line">G1.add_node(<span class="number">1</span>)</span><br><span class="line">G1.add_node(<span class="string">&quot;spam&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加一组节点</span></span><br><span class="line">G2=nx.Graph()</span><br><span class="line">G2.add_nodes_from([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">G2.add_nodes_from(<span class="string">&quot;spam&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用生成器</span></span><br><span class="line">G3=nx.Graph()</span><br><span class="line">H = nx.path_graph(<span class="number">10</span>)</span><br><span class="line">G3.add_nodes_from(H)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意:G1.add_nodes_from(H)表示用H中的节点表示G1这个graph,如果要往G1这个graph添加H这个graph,形成graph中的graph,可以使用以下命令</span></span><br><span class="line">G4= nx.Graph()</span><br><span class="line">G4.add_node(<span class="number">1</span>)</span><br><span class="line">G4.add_node(H)</span><br><span class="line"></span><br><span class="line">glists=[G1,G2,G3,G4]</span><br><span class="line">ginfo=[<span class="string">&#x27;添加单个节点&#x27;</span>,<span class="string">&#x27;添加一组节点&#x27;</span>,<span class="string">&#x27;使用生成器&#x27;</span>,<span class="string">&#x27;添加子图&#x27;</span>]</span><br><span class="line">ShowGraph(glists,ginfo)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549143986.png" alt="png" title="给graph添加节点" /></p><h1 id="给graph添加边"><a class="markdownIt-Anchor" href="#给graph添加边"></a> 给graph添加边</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除前面的graph</span></span><br><span class="line">G1.clear()</span><br><span class="line">G2.clear()</span><br><span class="line">G3.clear()</span><br><span class="line">G4.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加单边</span></span><br><span class="line">G1=nx.Graph()</span><br><span class="line">G1.add_edge(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">G1.add_edge(<span class="number">3</span>, <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加一组边</span></span><br><span class="line">G2=nx.Graph()</span><br><span class="line">e=(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">G2.add_edge(*e)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加多组边</span></span><br><span class="line">G3=nx.Graph()</span><br><span class="line">G3.add_edges_from([(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">4</span>,<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用边生成器</span></span><br><span class="line">G4= nx.Graph()</span><br><span class="line">H = nx.path_graph(<span class="number">10</span>)</span><br><span class="line">G4.add_edges_from(H.edges)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加一组有权边</span></span><br><span class="line">G5=nx.Graph()</span><br><span class="line">G5.add_weighted_edges_from([(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">5.0</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">3.0</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1.0</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">7.3</span>)])  <span class="comment">#边上权重显示看设置graph信息-&gt;指定边属性</span></span><br><span class="line"></span><br><span class="line">glists=[G1,G2,G3,G4,G5]</span><br><span class="line">ginfo=[<span class="string">&#x27;添加单边&#x27;</span>,<span class="string">&#x27;添加一组边&#x27;</span>,<span class="string">&#x27;添加多组边&#x27;</span>,<span class="string">&#x27;使用边生成器&#x27;</span>,<span class="string">&#x27;添加一组有权边&#x27;</span>]</span><br><span class="line">ShowGraph(glists,ginfo,rowsize=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549143993.png" alt="png" title="给graph添加边" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不可否认,日常中我们使用最多的还是,使用自己的数据去手动创建自己的图形,而不是使用生成器,现从给graph添加&lt;code&gt;点&lt;/code&gt;和边入手,讲解手动创建graph.&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://shaogui.life/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://shaogui.life/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="NetworkX" scheme="https://shaogui.life/tags/NetworkX/"/>
    
  </entry>
  
</feed>

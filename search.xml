<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何编译opencv（带cuda模块）</title>
    <url>/2021/02/05/%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91opencv%EF%BC%88%E5%B8%A6cuda%E6%A8%A1%E5%9D%97%EF%BC%89/</url>
    <content><![CDATA[<p>本文介绍编译包含cuda模块的opencv，可以在GPU上完成opencv的操作，加速opencv的处理速度，本文用于记录在Linux上编译opencv的过程、问题</p>
<a id="more"></a>
<p><strong>编译环境</strong>：</p>
<ul>
<li>
<p>系统：Ubuntu 16.04</p>
</li>
<li>
<p>显卡：RTX3090</p>
</li>
<li>
<p>cmake：3.19.3</p>
</li>
<li>
<p>gcc：6.5.0</p>
</li>
</ul>
<blockquote>
<p>注：cmake、gcc系统自带版本不是3.19.3、6.5.0，为解决cmake过程中文件下载问题，升级cmake到3.19.3，但是感觉没有作用；gcc原始是5.x.x，升级之后避免了一些错误，是有效的</p>
</blockquote>
<p><strong>软件依赖</strong>：</p>
<ul>
<li>cuda    11.1</li>
<li>cudnn  8.0.5</li>
</ul>
<p>默认在以上环境下，编译<code>opencv4.4.0</code>，包括C++和Python3的接口。（编译v4.4.0之前，使用v4.2.0进行编译，一直无法找到cudnn，可能是cuda及cudnn版本较高，较低版本的opencv还未适配，所以建议对opencv4.4.0及以上版本进行编译，类似经历出现在<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>）</p>
<h2 id="下载源码"><a class="markdownIt-Anchor" href="#下载源码"></a> 下载源码</h2>
<p>从<a href="https://github.com/opencv/opencv/tags">github</a>下载opencv4.4.0及opencv_contrib-4.4.0</p>
<p>解压后，将opencv_contrib-4.4.0放进opencv4.4.0目录下，并新建编译文件夹（build），文件目录结构如下：</p>
<p><img src="C:%5CUsers%5Cwushaogui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210205104342803.png" alt="image-20210205104342803" /></p>
<h2 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h2>
<blockquote>
<p>以下参考：<a href="https://medium.com/@sb.jaduniv/how-to-install-opencv-4-2-0-with-cuda-10-1-on-ubuntu-20-04-lts-focal-fossa-bdc034109df3">How to install OpenCV 4.2.0 with CUDA 10.1 on Ubuntu 20.04 LTS (Focal Fossa)</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新系统</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译工具</span></span><br><span class="line">sudo apt install build-essential cmake pkg-config unzip yasm git checkinstall</span><br><span class="line"></span><br><span class="line"><span class="comment">#Image I/O libs</span></span><br><span class="line">sudo apt install libjpeg-dev libpng-dev libtiff-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#Video/Audio Libs — FFMPEG, GSTREAMER, x264 and so on.</span></span><br><span class="line">sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev </span><br><span class="line">sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev </span><br><span class="line">sudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev  </span><br><span class="line">sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#OpenCore — Adaptive Multi Rate Narrow Band (AMRNB) and Wide Band (AMRWB) speech codec</span></span><br><span class="line">sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#Cameras programming interface libs</span></span><br><span class="line">sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils </span><br><span class="line"><span class="built_in">cd</span> /usr/include/linux </span><br><span class="line">sudo ln -s -f ../libv4l1-videodev.h videodev.h </span><br><span class="line"></span><br><span class="line"><span class="comment">#GTK lib for the graphical user functionalites coming from OpenCV highghui module</span></span><br><span class="line">sudo apt-get install libgtk-3-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python libraries for python3（本文安装至conda下，无次步骤）</span></span><br><span class="line">sudo apt-get install python3-dev python3-pip</span><br><span class="line">sudo -H pip3 install -U pip numpy</span><br><span class="line">sudo apt install python3-testresources</span><br><span class="line"></span><br><span class="line"><span class="comment">#Parallelism library C++ for CPU</span></span><br><span class="line">sudo apt-get install libtbb-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#Optimization libraries for OpenCV</span></span><br><span class="line">sudo apt-get install libatlas-base-dev gfortran</span><br><span class="line"></span><br><span class="line"><span class="comment">#Optional libraries</span></span><br><span class="line">sudo apt-get install libprotobuf-dev protobuf-compiler </span><br><span class="line">sudo apt-get install libgoogle-glog-dev libgflags-dev </span><br><span class="line">sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen</span><br></pre></td></tr></table></figure>
<h2 id="cmake生成待编译文件"><a class="markdownIt-Anchor" href="#cmake生成待编译文件"></a> cmake生成待编译文件</h2>
<p>进入build目录下，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">-D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> \</span><br><span class="line">-D CMAKE_C_COMPILER=/usr/bin/gcc-6 \</span><br><span class="line">-D INSTALL_PYTHON_EXAMPLES=ON \</span><br><span class="line">-D INSTALL_C_EXAMPLES=ON \</span><br><span class="line">-D OPENCV_ENABLE_NONFREE=ON \</span><br><span class="line">-D BUILD_opencv_python3=ON \</span><br><span class="line">-D WITH_CUDA=ON \</span><br><span class="line">-D WITH_CUDNN=ON \</span><br><span class="line">-D WITH_TBB=ON \</span><br><span class="line">-D OPENCV_DNN_CUDA=ON \</span><br><span class="line">-D ENABLE_FAST_MATH=1 \</span><br><span class="line">-D CUDA_FAST_MATH=1 \</span><br><span class="line">-D CUDA_ARCH_BIN=8.6 \</span><br><span class="line">-D WITH_CUBLAS=1 \</span><br><span class="line">-D OPENCV_GENERATE_PKGCONFIG=ON \</span><br><span class="line">-D OPENCV_EXTRA_MODULES_PATH=/home/xx/soft/opencv_gpu/opencv-4.4.0/opencv_contrib-4.4.0/modules \</span><br><span class="line">-D PYTHON3_EXECUTABLE=/home/xx/anaconda3/envs/py37/bin/python3.7m \</span><br><span class="line">-D PYTHON3_INCLUDE_DIR=/home/xx/anaconda3/envs/py37/include/python3.7m \</span><br><span class="line">-D PYTHON3_LIBRARY=/home/xx/anaconda3/envs/py37/lib/libpython3.7m.so \</span><br><span class="line">-D PYTHON3_NUMPY_INCLUDE_DIRS=/home/xx/anaconda3/envs/py37/lib/python3.7/site-packages/numpy/core/include \</span><br><span class="line">-D PYTHON3_PACKAGES_PATH=/home/xx/anaconda3/envs/py37/lib/python3.7/site-packages \</span><br><span class="line">-D PYTHON_DEFAULT_EXECUTABLE=/home/xx/anaconda3/envs/py37/bin/python3.7m \</span><br><span class="line">-D CUDNN_LIBRARY=/usr/<span class="built_in">local</span>/cuda/lib64/libcudnn.so.8.0.5 \</span><br><span class="line">-D CUDNN_INCLUDE_DIR=/usr/<span class="built_in">local</span>/cuda/include  \</span><br><span class="line">-D CUDA_CUDA_LIBRARY=/usr/<span class="built_in">local</span>/cuda/lib64/stubs/libcuda.so \</span><br><span class="line">-D OPENCV_PYTHON3_INSTALL_PATH=/home/xx/anaconda3/envs/py37/lib/python3.7/site-packages \</span><br><span class="line">-D WITH_WEBP=OFF \</span><br><span class="line">-D WITH_OPENCL=OFF \</span><br><span class="line">-D ETHASHLCL=OFF \</span><br><span class="line">-D ENABLE_CXX11=ON \</span><br><span class="line">-D BUILD_EXAMPLES=OFF \</span><br><span class="line">-D OPENCV_ENABLE_NONFREE=ON \</span><br><span class="line">-D WITH_OPENGL=ON \</span><br><span class="line">-D WITH_GSTREAMER=ON \</span><br><span class="line">-D WITH_V4L=ON \</span><br><span class="line">-D WITH_QT=OFF \</span><br><span class="line">-D BUILD_opencv_python3=ON \</span><br><span class="line">-D BUILD_opencv_python2=OFF \</span><br><span class="line">-D HAVE_opencv_python3=ON   ..</span><br></pre></td></tr></table></figure>
<p><strong>关键参数说明</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BUILD_opencv_python3：</span><br><span class="line">CUDA_ARCH_BIN:显卡算力,Nvidia官网查询，RTX3090对应8.6</span><br><span class="line">OPENCV_GENERATE_PKGCONFIG：生成pkg-config，这个务必打开，不然安装成功找不到opencv</span><br></pre></td></tr></table></figure>
<p>cmake后最终确认得到以下输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- General configuration <span class="keyword">for</span> OpenCV 4.4.0 =====================================</span><br><span class="line">Version control:               unknown</span><br><span class="line">-- </span><br><span class="line">Extra modules:</span><br><span class="line">  Location (extra):            /home/xx/soft/opencv_gpu/opencv-4.4.0/opencv_contrib-4.4.0/modules</span><br><span class="line">  Version control (extra):     unknown</span><br><span class="line">-- </span><br><span class="line">Platform:</span><br><span class="line">  Timestamp:                   2021-02-05T02:31:19Z</span><br><span class="line">  Host:                        Linux 4.15.0-133-generic x86_64</span><br><span class="line">  CMake:                       3.19.3</span><br><span class="line">  CMake generator:             Unix Makefiles</span><br><span class="line">  CMake build tool:            /usr/bin/make</span><br><span class="line">  Configuration:               RELEASE</span><br><span class="line">-- </span><br><span class="line">CPU/HW features:</span><br><span class="line">  Baseline:                    SSE SSE2 SSE3</span><br><span class="line">    requested:                 SSE3</span><br><span class="line">  Dispatched code generation:  SSE4_1 SSE4_2 FP16 AVX AVX2 AVX512_SKX</span><br><span class="line">    requested:                 SSE4_1 SSE4_2 AVX FP16 AVX2 AVX512_SKX</span><br><span class="line">    SSE4_1 (17 files):         + SSSE3 SSE4_1</span><br><span class="line">    SSE4_2 (2 files):          + SSSE3 SSE4_1 POPCNT SSE4_2</span><br><span class="line">    FP16 (1 files):            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 AVX</span><br><span class="line">    AVX (5 files):             + SSSE3 SSE4_1 POPCNT SSE4_2 AVX</span><br><span class="line">    AVX2 (31 files):           + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2</span><br><span class="line">    AVX512_SKX (7 files):      + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2 AVX_512F AVX512_COMMON AVX512_SKX</span><br><span class="line">-- </span><br><span class="line">C/C++:</span><br><span class="line">  Built as dynamic libs?:      YES</span><br><span class="line">  C++ standard:                11</span><br><span class="line">  C++ Compiler:                /usr/bin/c++  (ver 6.5.0)</span><br><span class="line">  C++ flags (Release):         -fsigned-char -ffast-math -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-psabi -Wsuggest-override -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -fvisibility-inlines-hidden -O3 -DNDEBUG  -DNDEBUG</span><br><span class="line">  C++ flags (Debug):           -fsigned-char -ffast-math -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-psabi -Wsuggest-override -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -fvisibility-inlines-hidden -g  -O0 -DDEBUG -D_DEBUG</span><br><span class="line">  C Compiler:                  /usr/bin/gcc-6</span><br><span class="line">  C flags (Release):           -fsigned-char -ffast-math -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-psabi -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -O3 -DNDEBUG  -DNDEBUG</span><br><span class="line">  C flags (Debug):             -fsigned-char -ffast-math -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-psabi -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections  -msse -msse2 -msse3 -fvisibility=hidden -g  -O0 -DDEBUG -D_DEBUG</span><br><span class="line">  Linker flags (Release):      -Wl,--gc-sections -Wl,--as-needed  </span><br><span class="line">  Linker flags (Debug):        -Wl,--gc-sections -Wl,--as-needed  </span><br><span class="line">  ccache:                      NO</span><br><span class="line">  Precompiled headers:         NO</span><br><span class="line">  Extra dependencies:          m pthread cudart_static dl rt nppc nppial nppicc nppidei nppif nppig nppim nppist nppisu nppitc npps cublas cudnn cufft -L/usr/<span class="built_in">local</span>/cuda/lib64 -L/usr/lib/x86_64-linux-gnu</span><br><span class="line">  3rdparty dependencies:</span><br><span class="line">-- </span><br><span class="line">OpenCV modules:</span><br><span class="line">  To be built:                 alphamat aruco bgsegm bioinspired calib3d ccalib core cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev datasets dnn dnn_objdetect dnn_superres dpm face features2d flann freetype fuzzy gapi hdf hfs highgui img_hash imgcodecs imgproc intensity_transform line_descriptor ml objdetect optflow phase_unwrapping photo plot python3 quality rapid reg rgbd saliency sfm shape stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab xfeatures2d ximgproc xobjdetect xphoto</span><br><span class="line">  Disabled:                    python2 world</span><br><span class="line">  Disabled by dependency:      -</span><br><span class="line">  Unavailable:                 cnn_3dobj cvv java js julia matlab ovis viz</span><br><span class="line">  Applications:                tests perf_tests apps</span><br><span class="line">  Documentation:               NO</span><br><span class="line">  Non-free algorithms:         YES</span><br><span class="line">-- </span><br><span class="line">GUI: </span><br><span class="line">  GTK+:                        YES (ver 3.18.9)</span><br><span class="line">    GThread :                  YES (ver 2.48.2)</span><br><span class="line">    GtkGlExt:                  NO</span><br><span class="line">  OpenGL support:              NO</span><br><span class="line">  VTK support:                 NO</span><br><span class="line">-- </span><br><span class="line">Media I/O: </span><br><span class="line">  ZLib:                        /usr/lib/x86_64-linux-gnu/libz.so (ver 1.2.8)</span><br><span class="line">  JPEG:                        /usr/lib/x86_64-linux-gnu/libjpeg.so (ver 80)</span><br><span class="line">  PNG:                         /usr/lib/x86_64-linux-gnu/libpng.so (ver 1.2.54)</span><br><span class="line">  TIFF:                        /usr/lib/x86_64-linux-gnu/libtiff.so (ver 42 / 4.0.6)</span><br><span class="line">  JPEG 2000:                   OpenJPEG (ver 2.4.0)</span><br><span class="line">  OpenEXR:                     build (ver 2.3.0)</span><br><span class="line">  HDR:                         YES</span><br><span class="line">  SUNRASTER:                   YES</span><br><span class="line">  PXM:                         YES</span><br><span class="line">  PFM:                         YES</span><br><span class="line">-- </span><br><span class="line">Video I/O:</span><br><span class="line">  DC1394:                      YES (2.2.4)</span><br><span class="line">  FFMPEG:                      YES</span><br><span class="line">    avcodec:                   YES (56.60.100)</span><br><span class="line">    avformat:                  YES (56.40.101)</span><br><span class="line">    avutil:                    YES (54.31.100)</span><br><span class="line">    swscale:                   YES (3.1.101)</span><br><span class="line">    avresample:                YES (2.1.0)</span><br><span class="line">  GStreamer:                   YES (1.8.3)</span><br><span class="line">  v4l/v4l2:                    YES (linux/videodev2.h)</span><br><span class="line">-- </span><br><span class="line">Parallel framework:            TBB (ver 4.4 interface 9002)</span><br><span class="line">-- </span><br><span class="line">Trace:                         YES (with Intel ITT)</span><br><span class="line">-- </span><br><span class="line">Other third-party libraries:</span><br><span class="line">  Lapack:                      YES (/usr/lib/libopenblas.so)</span><br><span class="line">  Eigen:                       YES (ver 3.2.92)</span><br><span class="line">  Custom HAL:                  NO</span><br><span class="line">  Protobuf:                    build (3.5.1)</span><br><span class="line">-- </span><br><span class="line">NVIDIA CUDA:                   YES (ver 11.1, CUFFT CUBLAS FAST_MATH)</span><br><span class="line">  NVIDIA GPU arch:             86</span><br><span class="line">  NVIDIA PTX archs:</span><br><span class="line">-- </span><br><span class="line">cuDNN:                         YES (ver 8.0.5)</span><br><span class="line">-- </span><br><span class="line">Python 3:</span><br><span class="line">  Interpreter:                 /home/xx/anaconda3/envs/py37/bin/python3.7m (ver 3.7.9)</span><br><span class="line">  Libraries:                   /home/xx/anaconda3/envs/py37/lib/libpython3.7m.so (ver 3.7.9)</span><br><span class="line">  numpy:                       /home/xx/anaconda3/envs/py37/lib/python3.7/site-packages/numpy/core/include (ver 1.19.2)</span><br><span class="line">  install path:                /home/xx/anaconda3/envs/py37/lib/python3.7/site-packages/cv2/python-3.7</span><br><span class="line">-- </span><br><span class="line">Python (<span class="keyword">for</span> build):            /home/xx/anaconda3/envs/py37/bin/python3.7m</span><br><span class="line">-- </span><br><span class="line">Java:                          </span><br><span class="line">  ant:                         NO</span><br><span class="line">  JNI:                         NO</span><br><span class="line">  Java wrappers:               NO</span><br><span class="line">  Java tests:                  NO</span><br><span class="line">-- </span><br><span class="line">Install to:                    /usr/<span class="built_in">local</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：系统用户名使用<code>xx</code>替代</p>
</blockquote>
<h2 id="gcc编译"><a class="markdownIt-Anchor" href="#gcc编译"></a> gcc编译</h2>
<p>在build目录下执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j16</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：虽然直接make出问题的概率更小，但是为了加速编译速度，这里指使用16个多线程进行编译，这里多线程数量一般不大于CPU核心数，可以通过<code>nproc</code>命令查看CPU核心数。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
</blockquote>
<h2 id="安装到系统"><a class="markdownIt-Anchor" href="#安装到系统"></a> 安装到系统</h2>
<p>在build目录下执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h2>
<p>执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /bin/bash -c <span class="string">&#x27;echo &quot;/usr/local/lib&quot; &gt;&gt; /etc/ld.so.conf.d/opencv.conf&#x27;</span></span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
<p>如果想将opencv安装到Python，建议在cmake编译参数中使用<code>-D OPENCV_PYTHON3_INSTALL_PATH</code>指定安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-D OPENCV_PYTHON3_INSTALL_PATH=/home/xx/anaconda3/envs/py37/lib/python3.7/site-packages \</span><br></pre></td></tr></table></figure>
<h2 id="查看opencv是否安装成功"><a class="markdownIt-Anchor" href="#查看opencv是否安装成功"></a> 查看opencv是否安装成功</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg-config --modversion opencv</span><br><span class="line">pkg-config --libs opencv4</span><br></pre></td></tr></table></figure>
<h2 id="编译过程遇到的问题"><a class="markdownIt-Anchor" href="#编译过程遇到的问题"></a> 编译过程遇到的问题</h2>
<p>编译opencv主要有两个过程，cmake和make，错误主要出现在cmake阶段，根据出现的错误情况，主要分为以下几类</p>
<h3 id="下载失败"><a class="markdownIt-Anchor" href="#下载失败"></a> 下载失败</h3>
<p>cmake过程中，需要下载的文件会放在opencv4.4.0下的隐藏目录<code>.cache</code>下，如果下载失败，可以手动下载，放入相应目录解决。</p>
<p><strong>xfeatures2d</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">boostdesc_bgm.i</span><br><span class="line">boostdesc_bgm_bi.i</span><br><span class="line">boostdesc_bgm_hd.i</span><br><span class="line">boostdesc_lbgm.i</span><br><span class="line">boostdesc_binboost_064.i</span><br><span class="line">boostdesc_binboost_128.i</span><br><span class="line">boostdesc_binboost_256.i</span><br><span class="line">vgg_generated_120.i</span><br><span class="line">vgg_generated_64.i</span><br><span class="line">vgg_generated_80.i</span><br><span class="line">vgg_generated_48.i</span><br></pre></td></tr></table></figure>
<p>进入opencv4.4.0下的隐藏目录<code>.cache/xfeatures2d</code>，执行以下命令解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> boostdesc</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_lbgm.i &gt; 0ae0675534aa318d9668f2a179c2a052-boostdesc_lbgm.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_binboost_256.i &gt; e6dcfa9f647779eb1ce446a8d759b6ea-boostdesc_binboost_256.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_binboost_128.i &gt; 98ea99d399965c03d555cef3ea502a0b-boostdesc_binboost_128.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_binboost_064.i &gt; 202e1b3e9fec871b04da31f7f016679f-boostdesc_binboost_064.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_bgm_hd.i &gt; 324426a24fa56ad9c5b8e3e0b3e5303e-boostdesc_bgm_hd.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_bgm_bi.i &gt; 232c966b13651bd0e46a1497b0852191-boostdesc_bgm_bi.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_bgm.i &gt; 0ea90e7a8f3f7876d450e4149c97c74f-boostdesc_bgm.i</span><br><span class="line"><span class="built_in">cd</span> vgg</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_120.i &gt; 151805e03568c9f490a5e3a872777b75-vgg_generated_120.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_64.i &gt; 7126a5d9a8884ebca5aea5d63d677225-vgg_generated_64.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_48.i &gt; e8d0dcd54d1bcfdc29203d011a797179-vgg_generated_48.i</span><br><span class="line">curl https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_80.i &gt; 7cd47228edec52b6d82f46511af325c5-vgg_generated_80.i</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：如何curl无法下载，可以通过浏览器挨个下载，并按照以上进行命名各文件</p>
</blockquote>
<p><strong>ippicv</strong></p>
<p>手动从<a href="https://link.jianshu.com/?t=https%3A%2F%2Fraw.githubusercontent.com%2FItseez%2Fopencv_3rdparty%2F81a676001ca8075ada498583e4166079e5744668%2Fippicv%2Fippicv_linux_20151201.tgz">github</a>下载，放入<code>.cache/ppicv</code>目录下</p>
<p>**face_landmark_model.dat **</p>
<p>手动从<a href="https://raw.githubusercontent.com/opencv/opencv_3rdparty/8afa57abc8229d611c4937165d20e2a2d9fc5a12/face_landmark_model.dat">github</a>下载，放入<code>.cache/data</code>目录下，注意文件名前部是该文件的md5值，可以通过命令<code>md5sum file</code>计算该值</p>
<h3 id="软件未安装not-found"><a class="markdownIt-Anchor" href="#软件未安装not-found"></a> 软件未安装（Not Found）</h3>
<p>此类错误比较简单，缺什么安装什么，比如安装过程中遇到以下缺失软件的解决办法</p>
<p><strong>tesserocr安装失败</strong><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libleptonica-dev libtesseract-dev</span><br><span class="line">python -m pip install tesserocr</span><br></pre></td></tr></table></figure>
<p><strong>lapacke.h缺失</strong><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></p>
<p>明明已经按照该软件，但是OpenBLAS一致没找到该文件，但是搜索文件发现该文件在<code>/usr/include/</code>下，只能手动拷贝<code>ls /usr/include/lapacke*</code>文件至<code>/usr/include/openblas/</code>目录下</p>
<p><strong>Could NOT find CUDNN: Found unsuitable version “…”, but required is at least “7.5” (found /usr/local/cuda-10.2/lib64/libcudnn.so)</strong></p>
<p>这是在编译opencv4.2.0时出现的错误，实际已经安装cudnn，也满足7.5以上的要求，但是就是找不，可以在cmake中加入参数：<code>-D CUDNN_VERSION='8.0'</code>解决<sup class="footnote-ref"><a href="#fn1" id="fnref1:1">[1:1]</a></sup>，但是后续还会遇到其他问题，编译opencv4.4.0时，该问题不再出现</p>
<p><strong>No package ‘gtk±3.0’ found</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libgtk-3-dev</span><br></pre></td></tr></table></figure>
<h2 id="卸载opencv"><a class="markdownIt-Anchor" href="#卸载opencv"></a> 卸载opencv</h2>
<p>通过源码安装的opencv，可以进入编译目录下（build）执行以下命令，卸载opencv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo make uninstall</span><br></pre></td></tr></table></figure>
<h2 id="使用cuda模块的简单例子"><a class="markdownIt-Anchor" href="#使用cuda模块的简单例子"></a> 使用cuda模块的简单例子</h2>
<p>查看opencv的cuda模块支持的功能，进入python终端，输入以下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="built_in">dir</span>(cv2.cuda)</span><br><span class="line"><span class="built_in">dir</span>(cv2.cuda_GpuMat())</span><br></pre></td></tr></table></figure>
<p>例子：在GPU做resize</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">frame=cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传到gpu进行处理</span></span><br><span class="line">gpu_frame=cv2.cuda_GpuMat()</span><br><span class="line">gpu_frame.upload(frame)</span><br><span class="line">print(gpu_frame.cudaPtr())</span><br><span class="line"></span><br><span class="line"><span class="comment">#resize</span></span><br><span class="line">gpu_resframe=cv2.cuda.resize(gpu_frame,(<span class="number">1024</span>,<span class="number">512</span>))</span><br><span class="line">cpu_resfram=gpu_resframe.download()</span><br><span class="line">print(cpu_resfram.shape)</span><br></pre></td></tr></table></figure>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://blog.csdn.net/qq_33475105/article/details/111659692">Jetson Nano编译安装opencv4.3.0并使能cuDNN加速</a> <a href="#fnref1" class="footnote-backref">↩︎</a> <a href="#fnref1:1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://www.codenong.com/cs109055604/">Ubuntu20.04+GeForce RTX 2080 SUPER+cuda11.1+cudnn8.0.4+openCV4.4.0编译</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://blog.csdn.net/zhongqli/article/details/112212072">Opencv-3.4.0编译时报错缺少boostdesc_bgm.i等文件</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://stackoverflow.com/questions/43486636/error-while-trying-to-install-tesserocr/">error while trying to install tesserocr</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="https://github.com/opencv/opencv/issues/9953">Building against OpenBLAS complains about missing lapacke.h</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>cuda</tag>
        <tag>机器视觉</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客速度优化</title>
    <url>/2021/02/20/Hexo%E5%8D%9A%E5%AE%A2%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>本文对Hexo博客进行访问优化，使得访问速度更快了，主要是安装hexo-neat插件，实现对html、css、js、image等静态资源的高效压缩。通过压缩这些静态资源，可以减少请求的数据量从而达到优化博客访问速度的目的</p>
<a id="more"></a>
<h2 id="资源压缩"><a class="markdownIt-Anchor" href="#资源压缩"></a> 资源压缩<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2>
<p><strong>安装插件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure>
<p><strong>配置插件</strong><br />
打开博客根目录文件<code>_config.yml</code>，添加以下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-neat 压缩</span></span><br><span class="line">neat_enable: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line">neat_html:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line">neat_css:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line">neat_js:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mangle: <span class="literal">true</span></span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    - <span class="string">&#x27;**/jquery.fancybox.pack.js&#x27;</span></span><br><span class="line">    - <span class="string">&#x27;**/index.js&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="图片懒加载"><a class="markdownIt-Anchor" href="#图片懒加载"></a> 图片懒加载<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h2>
<p>即文字先出来，图片慢慢出来，显著提高加载速度</p>
<p><strong>安装插件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure>
<p><strong>配置文件</strong></p>
<p>打开配置文件<code>_config.yml</code>，添加以下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图片懒加载</span></span><br><span class="line">lazyload:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> </span><br><span class="line">  onlypost: <span class="literal">false</span></span><br><span class="line">  loadingImg: /images/loading.gif <span class="comment">#如果不填写图片则使用默认的图片</span></span><br></pre></td></tr></table></figure>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://www.difashi.com/2020-02/20-hexo-neat.html">hexo优化静态JS等资源压缩</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://www.cnblogs.com/lfri/p/12221963.html">Hexo-Next提高加载速度</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>为Hexo安装Next主题</title>
    <url>/2021/02/19/%E4%B8%BAHexo%E5%AE%89%E8%A3%85Next%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p>基于github pages完成博客搭建后，已经可以正常发文了，但是文字展示不美观，本文展示如何在Linux为Hexo博客安装Next主题，并进行详细配置</p>
<a id="more"></a>
<h2 id="安装next主题"><a class="markdownIt-Anchor" href="#安装next主题"></a> 安装Next主题</h2>
<p><strong>下载主题</strong></p>
<p>在博客的目录下，运行以下命令获得Next主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p><strong>更新主题</strong></p>
<p>运行以下命令即可更新主题，但这会覆盖原来的自定义修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next;git pull</span><br></pre></td></tr></table></figure>
<h2 id="配置next主题"><a class="markdownIt-Anchor" href="#配置next主题"></a> 配置Next主题</h2>
<p>配置博客涉及两个配置文件，一个路径是<code>[myblog]/_config.yml</code>和<code>[myblog]/theme/next/_config.yml</code>，前一个是站点配置，后一个是主题配置。下面就分别就这两个文件进行配置：</p>
<h3 id="配置站点_configyml"><a class="markdownIt-Anchor" href="#配置站点_configyml"></a> 配置站点_config.yml</h3>
<p>打开文件<code>[myblog]/_config.yml</code>，每个配置项按如下配置</p>
<h4 id="配置站点基本信息"><a class="markdownIt-Anchor" href="#配置站点基本信息"></a> 配置站点基本信息</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 年轻人起来冲</span><br><span class="line">subtitle: <span class="string">&#x27;&#x27;</span></span><br><span class="line">description: <span class="string">&#x27;害怕失败是本能，勇敢面对才是本事&#x27;</span></span><br><span class="line">keywords:</span><br><span class="line">author: 绍桂</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="主题配置"><a class="markdownIt-Anchor" href="#主题配置"></a> 主题配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<h4 id="url配置"><a class="markdownIt-Anchor" href="#url配置"></a> URL配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line">url: https://shaogui.life/</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  trailing_html: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure>
<h4 id="翻页配置"><a class="markdownIt-Anchor" href="#翻页配置"></a> 翻页配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 8</span><br><span class="line">pagination_dir: page</span><br></pre></td></tr></table></figure>
<h3 id="配置主题_configyml"><a class="markdownIt-Anchor" href="#配置主题_configyml"></a> 配置主题_config.yml</h3>
<p>根据 Hexo 官方的推荐，不要直接修改主题的配置文件</p>
<blockquote>
<p>The file should be placed in your site folder, both <code>yml</code> and <code>json</code> are supported. <code>theme</code> inside <code>_config.yml</code> must be configured for Hexo to read <code>_config.[theme].yml</code></p>
</blockquote>
<p>而是将配置文件复制到和<code>[myblog]/_config.yml</code>同目录下，并命名为：<code>_config.next.yml</code>，在该文件上填写<strong>自己需要自定义的内容</strong>。</p>
<h4 id="网站logo配置"><a class="markdownIt-Anchor" href="#网站logo配置"></a> 网站logo配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>
<h4 id="主题风格配置"><a class="markdownIt-Anchor" href="#主题风格配置"></a> 主题风格配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>
<h4 id="菜单栏配置"><a class="markdownIt-Anchor" href="#菜单栏配置"></a> 菜单栏配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>
<p>注：||后面指的是图标，各个菜单实际显示的是中文，中英文对应配置文件位于<code>\themes\next\languages\zh-CN.yml</code>中，如果有其他菜单项可以在该文件配置其中文</p>
<h4 id="文章分类及标签"><a class="markdownIt-Anchor" href="#文章分类及标签"></a> 文章分类及标签<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h4>
<p>菜单栏中<code>categories</code>，<code>tags</code>，<code>about</code>点击后提示找不到页面，这时需要使用以下命令新建这三个页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>
<p>运行三个命令后，均在<code>source</code>目录下生成相应的文件夹，此时菜单栏中可以打开这些项，但是没有内容，需要配置各自的<code>index.md</code></p>
<p>打开<code>source/categories/index.md</code>，添加type项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2021-02-18 21:44:21</span><br><span class="line"><span class="built_in">type</span>: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>打开<code>source/tags/index.md</code>，添加type项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2021-02-18 21:44:21</span><br><span class="line"><span class="built_in">type</span>: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>编辑文章时，在开头加入<code>categories</code>，<code>tags</code>项即刻对文章进行分类及打标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: xxx</span><br><span class="line">date: 2020-06-01 23:47:44</span><br><span class="line">tags: [xx,xx]</span><br><span class="line">categories: xx</span><br></pre></td></tr></table></figure>
<h4 id="顶部加载条"><a class="markdownIt-Anchor" href="#顶部加载条"></a> 顶部加载条</h4>
<p><strong>安装插件到Next主题</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace themes/next/<span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>
<p><strong>开启进度条</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pace</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/HubSpot/pace</span></span><br><span class="line">pace:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  theme: minimal</span><br></pre></td></tr></table></figure>
<h4 id="添加访问量"><a class="markdownIt-Anchor" href="#添加访问量"></a> 添加访问量</h4>
<p>修改<code>themes/next/layout/_partials/footer.swig</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;powered-by&quot;</span>&gt;</span><br><span class="line">    &#123;%- <span class="built_in">set</span> next_site = <span class="string">&#x27;https://theme-next.org&#x27;</span> %&#125;</span><br><span class="line">    &#123;%- <span class="keyword">if</span> theme.scheme !== <span class="string">&#x27;Gemini&#x27;</span> %&#125;</span><br><span class="line">      &#123;%- <span class="built_in">set</span> next_site = <span class="string">&#x27;https://&#x27;</span> + theme.scheme | lower + <span class="string">&#x27;.theme-next.org&#x27;</span> %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">    &#123;&#123;- __(<span class="string">&#x27;footer.powered&#x27;</span>, next_url(<span class="string">&#x27;https://hexo.io&#x27;</span>, <span class="string">&#x27;Hexo&#x27;</span>, &#123;class: <span class="string">&#x27;theme-link&#x27;</span>&#125;) + <span class="string">&#x27; &amp; &#x27;</span> + next_url(next_site, <span class="string">&#x27;NexT.&#x27;</span> + theme.scheme, &#123;class: <span class="string">&#x27;theme-link&#x27;</span>&#125;)) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><strong>以上修改为以下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;powered-by&quot;</span>&gt;</span><br><span class="line">	&lt;i class=<span class="string">&quot;fa fa-user-md&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">	&lt;span id=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br><span class="line">		本站访客数:&lt;span id=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">	&lt;/span&gt;</span><br><span class="line">	&lt;span class=<span class="string">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class="line">	&lt;span id=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br><span class="line">		本站访问量&lt;span id=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">	&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="返回顶部按钮"><a class="markdownIt-Anchor" href="#返回顶部按钮"></a> 返回顶部按钮</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  sidebar: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  scrollpercent: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="修改底部标签样式"><a class="markdownIt-Anchor" href="#修改底部标签样式"></a> 修改底部标签样式</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class="line">tag_icon: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="社交链接"><a class="markdownIt-Anchor" href="#社交链接"></a> 社交链接</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/WuShaogui || fab fa-github</span><br><span class="line">  E-Mail: wshglearn@163.com || fa fa-envelope</span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  icons_only: <span class="literal">false</span></span><br><span class="line">  transition: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="打赏配置"><a class="markdownIt-Anchor" href="#打赏配置"></a> 打赏配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line">reward_settings:</span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  animation: <span class="literal">true</span></span><br><span class="line">  comment: 坚持原创技术分享，您的支持将鼓励我继续创作！.</span><br><span class="line"></span><br><span class="line">reward:</span><br><span class="line">  wechatpay: /images/wechatpay.png</span><br><span class="line">  alipay: /images/alipay.png</span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure>
<h4 id="follow_me"><a class="markdownIt-Anchor" href="#follow_me"></a> Follow_me</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">follow_me:</span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class="line">  RSS: /atom.xml || fa fa-rss</span><br></pre></td></tr></table></figure>
<h4 id="github角标"><a class="markdownIt-Anchor" href="#github角标"></a> Github角标</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line">github_banner:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  permalink: https://github.com/WuShaogui</span><br><span class="line">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure>
<h4 id="搜索功能"><a class="markdownIt-Anchor" href="#搜索功能"></a> 搜索功能</h4>
<p>搜索功能需要安装插件实现，使用npm管理器安装以下插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>在主题配置文件配置以下信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="扩增markdown的功能"><a class="markdownIt-Anchor" href="#扩增markdown的功能"></a> 扩增Markdown的功能<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h4>
<p>hexo默认的渲染插件marked功能比较少，比如不支持脚注功能，部署时，脚注会出错，可以通过安装更强的渲染插件实现功能扩展。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#卸载原始markdown渲染插件</span></span><br><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装新的markdown渲染插件</span></span><br><span class="line">npm i @upupming/hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure>
<p>修改站点的配置文件<code>[myblog]/_config.yml</code>，增加以下信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Markdown config</span></span><br><span class="line">markdown_it_plus:</span><br><span class="line">  render:</span><br><span class="line">    html: <span class="literal">true</span>						</span><br><span class="line">    xhtmlOut: <span class="literal">false</span></span><br><span class="line">    breaks: <span class="literal">true</span></span><br><span class="line">    linkify: <span class="literal">true</span></span><br><span class="line">    typographer: <span class="literal">true</span></span><br><span class="line">    quotes: <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">  anchors:	</span><br><span class="line">    level: 2</span><br><span class="line">    collisionSuffix: <span class="string">&#x27;v&#x27;</span></span><br><span class="line">    permalink: <span class="literal">true</span></span><br><span class="line">    permalinkClass: header-anchor</span><br><span class="line">    permalinkSide: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    permalinkSymbol: ¶</span><br></pre></td></tr></table></figure>
<p><code>plugins</code>指定需要扩展的功能，支持添加以下功能</p>
<ul>
<li><code>markdown-it-emoji</code>支持emoji，<code>:cat:</code>→`🐱</li>
<li><code>markdown-it-sub</code> 支持<code>H~2~O</code>→H2O</li>
<li><code>markdown-it-sup</code> 支持<code>X^2^</code>→X2</li>
<li><code>markdown-it-deflist</code> 支持自定义列表</li>
<li><code>markdown-it-abbr</code>支持<code>&lt;abbr&gt;</code>标签</li>
<li><code>markdown-it-footnote</code>支持引入参考文献。emmm就是上标数字，最后附上文献那种</li>
<li><code>markdown-it-ins</code>支持<code>++Inserted++</code> →Inserted， <code>~~Del~~ →</code>Del</li>
<li><code>markdown-it-mark</code>支持<code>==marked==</code>→inserted</li>
<li><code>markdown-it-katex</code><strong>支持katex公式</strong></li>
<li><code>markdown-it-toc-and-anchor</code>支持<code>@[toc]</code>生成目录</li>
</ul>
<p>使用以上扩展功能前，需使用以下命令安装该功能的插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install markdown-it-... --save</span><br></pre></td></tr></table></figure>
<p><strong>添加MathJax 数学公式支持</strong></p>
<p>在以上配置基础上，修改两个文件</p>
<h4 id="访客统计"><a class="markdownIt-Anchor" href="#访客统计"></a> 访客统计</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line">busuanzi_count:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  total_visitors: <span class="literal">true</span></span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: <span class="literal">true</span></span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: <span class="literal">true</span></span><br><span class="line">  post_views_icon: fa fa-eye</span><br></pre></td></tr></table></figure>
<h4 id="阅读全文"><a class="markdownIt-Anchor" href="#阅读全文"></a> 阅读全文<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h4>
<p>在文章中，使用标记<code>&lt;!-- more --&gt;</code>实现文章摘要功能，该标记前的内容为文章摘要，显示在首页上</p>
<h4 id="文章置顶"><a class="markdownIt-Anchor" href="#文章置顶"></a> 文章置顶<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h4>
<p>两个步骤完成该操作</p>
<p><strong>更换插件</strong></p>
<p>通过以下命令更换支持置顶的插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>
<p><strong>设置置顶标志</strong></p>
<p>打开文件：<code>/blog/themes/next/layout/_macro/post.swig</code>，在<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下插入以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> post.top %&#125;</span><br><span class="line">   &lt;i class=<span class="string">&quot;fa fa-thumb-tack&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">   &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">   &lt;span class=<span class="string">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>往后写文章时，准备置顶的文章需要在Front-matter中添加<code>top: true</code></p>
<h4 id="文章字数统计"><a class="markdownIt-Anchor" href="#文章字数统计"></a> 文章字数统计</h4>
<p><strong>安装字数统计插件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>
<p><strong>配置开启数字统计</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  item_text_post: <span class="literal">true</span></span><br><span class="line">  item_text_total: <span class="literal">true</span></span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>
<h4 id="文章内链接样式"><a class="markdownIt-Anchor" href="#文章内链接样式"></a> 文章内链接样式</h4>
<p>原始样式只是加一条下划线，为了更加明显显示链接，通过在文件<code>Blog/themes/next/source/css/_common/components/post/post.styl</code>添加以下样式实现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: <span class="comment">#0593d3; //原始链接颜色</span></span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid <span class="comment">#0593d3; //底部分割线颜色</span></span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: <span class="comment">#fc6423; //鼠标经过颜色</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid <span class="comment">#fc6423; //底部分割线颜色</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="文章结束标志"><a class="markdownIt-Anchor" href="#文章结束标志"></a> 文章结束标志</h4>
<p>通过3个步骤完成该优化</p>
<p><strong>新建结束文件</strong></p>
<p>在目录<code>Blog\themes\next\layout\_macro</code>新建文件<code>passage-end-tag.swig</code>，并添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &lt;div style=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;-------------本文结束&lt;i class=<span class="string">&quot;fa fa-paw&quot;</span>&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><strong>配置结束文件至文章末尾</strong></p>
<p>打开文件<code>Blog\themes\next\layout\_macro\post.swig</code>，将以下代码添加到post-body之后，post-footer之前</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    &#123;% include <span class="string">&#x27;passage-end-tag.swig&#x27;</span> %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><strong>配置主题配置文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="文章添加阴影"><a class="markdownIt-Anchor" href="#文章添加阴影"></a> 文章添加阴影</h4>
<p>打开<code>\themes\next\source\css\_custom\custom.styl</code>，向里面加入以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="文字底部评论"><a class="markdownIt-Anchor" href="#文字底部评论"></a> 文字底部评论</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  appid: xxxxxxxxxxxxxxxxx <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  appkey: xxxxxxxxxxxxxxxxx <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  notify: <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  verify: <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  placeholder: 留下你的评论吧 <span class="comment"># Comment box placeholder</span></span><br><span class="line">  avatar: mm <span class="comment"># Gravatar style</span></span><br><span class="line">  guest_info: nick,mail,link <span class="comment"># Custom comment header</span></span><br><span class="line">  pageSize: 10 <span class="comment"># Pagination size</span></span><br><span class="line">  language: <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  visitor: <span class="literal">true</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  comment_count: <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  recordIP: <span class="literal">true</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  serverURLs: <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>
<h4 id="版权声明"><a class="markdownIt-Anchor" href="#版权声明"></a> 版权声明</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"><span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: <span class="literal">true</span></span><br><span class="line">  post: <span class="literal">true</span></span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>
<h4 id="侧边栏配置"><a class="markdownIt-Anchor" href="#侧边栏配置"></a> 侧边栏配置</h4>
<p>将菜单栏配置在左边还是右边，以及大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.org/docs/theme-settings/sidebar</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">sidebar:</span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  position: left</span><br><span class="line">  <span class="comment"># position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  width: 240</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  display: post</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar padding in pixels.</span></span><br><span class="line">  padding: 18</span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  offset: 12</span><br><span class="line">  <span class="comment"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class="line">  onmobile: <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line">avatar:</span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  url: /images/avatar.gif</span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  rounded: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  rotated: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="rss及rss侧边栏"><a class="markdownIt-Anchor" href="#rss及rss侧边栏"></a> RSS及RSS侧边栏</h4>
<p><strong>安装rss插件</strong></p>
<p>运行下面命令安装rss插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure>
<p><strong>配置rss功能</strong></p>
<p>在<code>_config.next.yml</code>中找到rss配置项，修改为以下形式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure>
<h4 id="设置头像"><a class="markdownIt-Anchor" href="#设置头像"></a> 设置头像</h4>
<p>无</p>
<h4 id="网站背景"><a class="markdownIt-Anchor" href="#网站背景"></a> 网站背景</h4>
<p>无</p>
<h4 id="动态背景"><a class="markdownIt-Anchor" href="#动态背景"></a> 动态背景</h4>
<p>略，暂不设置，需要消耗电脑资源，并且干扰阅读</p>
<h4 id="网站运行时间"><a class="markdownIt-Anchor" href="#网站运行时间"></a> 网站运行时间</h4>
<p>打开文件<code>themes/next/layout/_partials/footer.swig</code>，添加以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;timeDate&quot;</span>&gt;载入天数...&lt;/span&gt;&lt;span id=<span class="string">&quot;times&quot;</span>&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">createtime</span></span>() &#123;</span><br><span class="line">        var grt= new Date(<span class="string">&quot;03/04/2020 00:00:00&quot;</span>);</span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">        <span class="keyword">if</span>(String(hnum).length ==1 )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes); <span class="keyword">if</span>(String(mnum).length ==1 )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds); <span class="keyword">if</span>(String(snum).length ==1 )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125;</span><br><span class="line">        document.getElementById(<span class="string">&quot;timeDate&quot;</span>).innerHTML = <span class="string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>;</span><br><span class="line">        document.getElementById(<span class="string">&quot;times&quot;</span>).innerHTML = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(<span class="string">&quot;createtime()&quot;</span>,250);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="添加网易云音乐"><a class="markdownIt-Anchor" href="#添加网易云音乐"></a> 添加网易云音乐</h4>
<p>获得单曲或者歌单的<code>外链播放器</code>，将代码添加到<code>themes/next/layout/_macro/sidebar.swig</code>下，以下是一个外链播放器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;iframe frameborder=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> marginwidth=<span class="string">&quot;0&quot;</span> marginheight=<span class="string">&quot;0&quot;</span> width=330 height=86 src=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=481853876&amp;auto=1&amp;height=66&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<p><strong>参考资料<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>：</strong></p>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://www.jianshu.com/p/4d37bc01290b">Hexo 添加分类及标签</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://blog.csdn.net/qq_36667170/article/details/105846999">hexo markdown渲染器 @upupming/hexo-renderer-markdown-it-plus</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://blog.csdn.net/yueyue200830/article/details/104470646/">设置hexo首页只显示部分摘要（不显示全文）</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://blog.csdn.net/qwerty200696/article/details/79010629">hexo博客优化之文章置顶+置顶标签</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/">Hexo博客设置以及Next主题美化</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/129644138">hexo+next个性化配置</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux上完成Hexo博客的搭建</title>
    <url>/2021/02/18/%E5%9C%A8Linux%E4%B8%8A%E5%AE%8C%E6%88%90Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本文介绍在Linux完成Hexo博客的搭建，包括安装和配置Hexo，将博客部署到github，使得可以通过github page的方式进行访问博客</p>
<a id="more"></a>
<h2 id="系统环境"><a class="markdownIt-Anchor" href="#系统环境"></a> 系统环境</h2>
<p>本系列文章所有操作在系统<code>Linux Mint 20 Cinnamon</code>上完成，其他关联应用版本为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node@v10.19.0</span><br><span class="line">npm@6.14.4</span><br><span class="line">hexo@5.3.0</span><br><span class="line">git@2.25.1</span><br></pre></td></tr></table></figure>
<h2 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h2>
<h3 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装nodejs</h3>
<p>Hexo是基于nodeJS编写的，所以需要安装nodeJs和npm工具，其安装使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nodejs</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure>
<h3 id="配置npm镜像"><a class="markdownIt-Anchor" href="#配置npm镜像"></a> 配置npm镜像<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h3>
<p>npm是nodeJs的包管理工具，用于从NPM服务器下载第三方包到本地使用或上传自己编写的包，但是国内直接使用npm的官方镜像往往较慢，因此建议使用<code>淘宝镜像</code>，可以通过两种方式达到这个目地：</p>
<ul>
<li><strong>更改npm的默认镜像</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前镜像地址</span></span><br><span class="line">npm get registry</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置为淘宝镜像</span></span><br><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br><span class="line">yarn config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br><span class="line"></span><br><span class="line"><span class="comment">#还原为原始配置</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>安装淘宝定制的cnpm工具</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装cnpm工具</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用cnpm工具</span></span><br><span class="line">cnpm install [name]</span><br></pre></td></tr></table></figure>
<h2 id="博客初始化"><a class="markdownIt-Anchor" href="#博客初始化"></a> 博客初始化</h2>
<h3 id="安装hexo-2"><a class="markdownIt-Anchor" href="#安装hexo-2"></a> 安装hexo</h3>
<p>通过npm工具安装hexo，使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
<h3 id="博客初始化-2"><a class="markdownIt-Anchor" href="#博客初始化-2"></a> 博客初始化</h3>
<p>使用hexo初始化博客，初始化文件夹为空或不存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化+安装npm</span></span><br><span class="line">hexo init myblog;<span class="built_in">cd</span> myblog;sudo npm install</span><br></pre></td></tr></table></figure>
<p>安装完成后，得到以下文件结构</p>
<p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218110745470.png" alt="image-20210218110745470" /></p>
<h3 id="测试博客"><a class="markdownIt-Anchor" href="#测试博客"></a> 测试博客</h3>
<p>在新建的博客目录下，使用以下命令测试博客是否初始化完成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>浏览器打开：<a href="http://localhost:4000/%E5%90%8E%EF%BC%8C%E5%BE%97%E5%88%B0%E4%BB%A5%E4%B8%8B%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%A1%A8%E9%9D%A2%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%A7%8B%E5%8C%96%E6%88%90%E5%8A%9F">http://localhost:4000/后，得到以下页面，表面博客初始化成功</a></p>
<p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218111018667.png" alt="image-20210218111018667" /></p>
<h2 id="发布博客到github-page"><a class="markdownIt-Anchor" href="#发布博客到github-page"></a> 发布博客到Github Page</h2>
<h3 id="配置本地及github"><a class="markdownIt-Anchor" href="#配置本地及github"></a> 配置本地及github</h3>
<p>为了将博客部署到github，需要在本地生成SSH key，并将公钥配置到github</p>
<h5 id="本地生成公钥及密钥"><a class="markdownIt-Anchor" href="#本地生成公钥及密钥"></a> 本地生成公钥及密钥</h5>
<p>使用以下命令，一直回车生成公钥和密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-kengen -t rsa -C <span class="string">&quot;yourmail&quot;</span></span><br></pre></td></tr></table></figure>
<p>生成之后的公钥及密钥保存在目录<code>~/.ssh</code>内，其中<code>id_rsa</code>为私钥，不可泄漏，id_rsa.pub为公钥，将配置到github上，上传代码时，公钥和私钥相互匹配，才能顺利上传代码。</p>
<h5 id="公钥配置到github"><a class="markdownIt-Anchor" href="#公钥配置到github"></a> 公钥配置到github</h5>
<p>登录github后，依次进入<code>Settings</code>-&gt;<code>SSH and GPG keys</code>，然后点击<code>New SSH key</code>，将公钥文件id_rsa.pub里面的内容全部填到<code>Key</code>上</p>
<p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218154730042.png" alt="image-20210218154730042" /></p>
<h5 id="测试是否配置成功"><a class="markdownIt-Anchor" href="#测试是否配置成功"></a> 测试是否配置成功</h5>
<p>使用以下命令检查，配置是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<h3 id="安装部署插件"><a class="markdownIt-Anchor" href="#安装部署插件"></a> 安装部署插件</h3>
<p>通过npm安装git插件，以便进行github部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h3 id="新建github-pages仓库"><a class="markdownIt-Anchor" href="#新建github-pages仓库"></a> 新建github pages仓库</h3>
<p>推送前需先新建一个用于存储博客的仓库，该仓库为用户的github page（GitHub Pages is a static site hosting service designed to host your  personal, organization, or project pages directly from a GitHub  repository）<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>，以下两个操作完成此步骤：</p>
<ol>
<li>新建一个公开（Public）仓库，仓库名为<code>你的用户名.github.io</code>；</li>
<li>进入仓库的<code>Settings</code>，找到Github Page，在<code>Source</code>选择分支，并保存</li>
<li>浏览器访问<code>https://[YourUserName].github.io/</code>，成功访问即配置成功（这可能需要科学上网）</li>
</ol>
<h3 id="设置博客部署仓库"><a class="markdownIt-Anchor" href="#设置博客部署仓库"></a> 设置博客部署仓库</h3>
<p>将远程仓库地址配置到博客配置文件中，部署时往此仓库推送，打开<code>_config.yml</code>文件，在最后找到Deployment配置项，按以下方式配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/[YourUserName]/[YourUserName].github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<h3 id="推送博客到github-pages仓库"><a class="markdownIt-Anchor" href="#推送博客到github-pages仓库"></a> 推送博客到github pages仓库</h3>
<p>使用以下命令推送hexo博客到github page仓库上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean;hexo generate;hexo deploy</span><br></pre></td></tr></table></figure>
<p>在浏览器上再次访问<code>https://[YourUserName].github.io/</code>，出现以下画面表示成功</p>
<p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218111018667.png" alt="image-20210218111018667" /></p>
<h2 id="绑定域名"><a class="markdownIt-Anchor" href="#绑定域名"></a> 绑定域名</h2>
<p>每次访问博客，均需使用<code>https://[YourUserName].github.io/</code>打开，本着<s>装逼</s>的原则，申请一个个人使用的域名，即可以便于记忆/宣传，又隐藏博客在github page的行为，代价是需要RMB（一年几十）。</p>
<h3 id="申请域名"><a class="markdownIt-Anchor" href="#申请域名"></a> 申请域名</h3>
<p>我是在腾讯云申请的域名，阿里云也可以通过申请，访问：<a href="https://dnspod.cloud.tencent.com/%EF%BC%8C%E6%90%9C%E7%B4%A2%E8%87%AA%E5%B7%B1%E8%AE%A1%E5%88%92%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%8C%E9%80%89%E6%8B%A9%E5%AE%8C%E6%88%90%E5%90%8E%E4%BB%98%E8%B4%B9%EF%BC%8C%E5%AE%8C%E6%88%90%E5%AE%9E%E5%90%8D%E8%AE%A4%E8%AF%81%EF%BC%8B%E5%A4%87%E6%A1%88%EF%BC%8C%E5%8D%B3%E5%8F%AF%E4%BD%BF%E7%94%A8%E3%80%82">https://dnspod.cloud.tencent.com/，搜索自己计划使用的域名，选择完成后付费，完成实名认证＋备案，即可使用。</a></p>
<p>完成域名申请后，需配置域名的解析地址，按照以下方式添加两个记录</p>
<p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218163454662.png" alt="image-20210218163454662" /></p>
<h3 id="绑定域名-2"><a class="markdownIt-Anchor" href="#绑定域名-2"></a> 绑定域名</h3>
<p>通过以下两个步骤完成域名的绑定</p>
<p><strong>1.配置Hexo博客</strong></p>
<p>在hexo/source目录下新建一个名为<code>CNAME</code>的文件，然后将申请的域名填写到里面</p>
<p><strong>2.配置Github Pages</strong></p>
<p>到仓库的Github Pages页面，在<code>Custom domain</code>配置申请的域名（注意：配置成功后不会立马生效）</p>
<p><img src="/home/wu/.config/Typora/typora-user-images/image-20210218165026184.png" alt="image-20210218165026184" /></p>
<p>在浏览器上通过申请的域名访问博客，如果成功，则配置成功！！！</p>
<h2 id="发文流程"><a class="markdownIt-Anchor" href="#发文流程"></a> 发文流程</h2>
<p>使用以下命令新建一个博文，然后使用markdwn格式写博文，再然后部署到github pages上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文件名.md&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="遇到的问题"><a class="markdownIt-Anchor" href="#遇到的问题"></a> 遇到的问题</h2>
<p>1.<code>sudo npm install -g hexo</code>遇到rollbackFailedOptional: verb npm-session<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p>
<p>原因：（1）网络原因；（2）未配置国内镜像服务器；</p>
<p>解决：配置npm使用淘宝镜像服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>参考资料<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup>：</p>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://www.runoob.com/nodejs/nodejs-npm.html">NPM 使用介绍</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://blog.csdn.net/shangrila_kun/article/details/89633374">npm的镜像替换成淘宝</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://docs.github.com/en/enterprise/2.14/user/articles/what-is-github-pages">What is GitHub Pages?</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://blog.csdn.net/qq_34458791/article/details/82705345">npm install rollbackFailedOptional: verb npm-session</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html">使用hexo+github搭建免费个人博客详细教程</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p><a href="https://segmentfault.com/a/1190000017986794">超详细Hexo+Github Page搭建技术博客教程【持续更新】</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p><a href="https://cloud.tencent.com/developer/article/1520557">这可能是迄今为止最全的hexo博客搭建教程</a> <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>404</title>
    <url>/2021/02/15/404/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>如何释放Linux存储空间</title>
    <url>/2021/02/06/%E5%A6%82%E4%BD%95%E9%87%8A%E6%94%BELinux%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>由于服务器上存储空间即将用完，不得不需要释放新的空间，及挂载新的硬盘，本文展示如何在Linux查看硬盘情况，释放硬盘空间及挂载新的硬盘</p>
<a id="more"></a>
<h2 id="查看当前硬盘情况"><a class="markdownIt-Anchor" href="#查看当前硬盘情况"></a> 查看当前硬盘情况<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -lh</span><br></pre></td></tr></table></figure>
<p>查看当前挂载的硬盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<p><strong>释放空间</strong></p>
<p>通过以下命令逐级搜索Linux目录，找出占用空间的最大的文件，将其删除或移除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du --max-depth&#x3D;1 -lh</span><br></pre></td></tr></table></figure>
<h2 id="格式化分区"><a class="markdownIt-Anchor" href="#格式化分区"></a> 格式化分区</h2>
<p>在linux上挂载新硬盘前，尽量使用ext4格式，所以不是该格式的建议提前先格式化（格式化时需提前卸载硬盘）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sda1</span><br></pre></td></tr></table></figure>
<p>ext4格式的硬盘下，经常能看见 系统创建的lost+found的文件夹<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<ul>
<li>通常是未链接的文件（名字已经被删除），但是这些文件还被一些进程使用（数据没有删除），在突然关机时（内核panic或者突然断电）出现，这些文件系统会自动删除。</li>
<li>当因为软件或者硬件出现错误，导致文件系统不一致，也有可能把有问题的文件放到lost+found目录。它提供了恢复丢失文件的一种方法</li>
<li>如果你不小心删除了lost+found目录，不能使用mkdir命令创建lost+found目录，应该使用mklost+found命令创建它</li>
</ul>
<h2 id="挂载硬盘"><a class="markdownIt-Anchor" href="#挂载硬盘"></a> 挂载硬盘</h2>
<p>使用以下命令将新硬盘挂载到系统上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda1 /mnt</span><br></pre></td></tr></table></figure>
<p><strong>开机挂载硬盘</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/fatab</span><br></pre></td></tr></table></figure>
<p>在该文件内添加一行，指明待加载的硬盘<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p>
<p><img src="C:%5CUsers%5Cwushaogui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210205155011394.png" alt="image-20210205155011394" /></p>
<p>参数解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要挂载的设备或伪文件系统：设备文件、LABEL(LABEL&#x3D;&quot;&quot;)、UUID(UUID&#x3D;&quot;&quot;)、伪文件系统名称(proc, sysfs)</span><br><span class="line">挂载点：指定的文件夹</span><br><span class="line">挂载选项：defaults</span><br><span class="line">转储频率：0：不做备份;1：每天转储;2：每隔一天转储</span><br><span class="line">自检次序：0：不自检；1：首先自检；一般只有rootfs才用1；</span><br></pre></td></tr></table></figure>
<h2 id="卸载磁盘"><a class="markdownIt-Anchor" href="#卸载磁盘"></a> 卸载磁盘</h2>
<p>通过以下命令卸载磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount /dev/sda1或/mnt</span><br></pre></td></tr></table></figure>
<p>查看分区的uuid<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blkid</span><br></pre></td></tr></table></figure>
<p><strong>对挂载及挂载点的理解</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3:1]</a></sup></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</span><br></pre></td></tr></table></figure>
<ol>
<li>挂载：根文件系统外通过关联至根文件系统上的某个目录来实现访问</li>
<li>挂载点：mount_point，用于作为另一个文件系统的访问入口</li>
</ol>
<p>挂载点必须满足以下要求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) 事先存在；</span><br><span class="line">(2) 应该使用未被或不会被其它进程使用到的目录；</span><br><span class="line">(3) 挂载点下原有的文件将会被隐藏；</span><br></pre></td></tr></table></figure>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Linux下挂载机械硬盘(<a href="https://blog.csdn.net/m0_37407756/article/details/79529399">https://blog.csdn.net/m0_37407756/article/details/79529399</a>) <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://www.cnblogs.com/cheyunhua/p/14158174.html">Linux系统中根目录下或者新挂载的磁盘目录下有一个叫lost+found，它的作用是什么？</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://www.linuxidc.com/linux/2016-08/134666.htm">Linux基础知识之挂载详解（mount,umount及开机自动挂载）</a> <a href="#fnref3" class="footnote-backref">↩︎</a> <a href="#fnref3:1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://www.linuxprobe.com/partition-file-system.html">Linux查看分区文件系统类型的几种方法</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>对中国身份证的了解（大陆、香港、澳门、台湾）</title>
    <url>/2019/12/15/%E5%AF%B9%E4%B8%AD%E5%9B%BD%E8%BA%AB%E4%BB%BD%E8%AF%81%E7%9A%84%E4%BA%86%E8%A7%A3%EF%BC%88%E5%A4%A7%E9%99%86%E3%80%81%E9%A6%99%E6%B8%AF%E3%80%81%E6%BE%B3%E9%97%A8%E3%80%81%E5%8F%B0%E6%B9%BE%EF%BC%89/</url>
    <content><![CDATA[<p>本文在了解较多资料的情况下，总结中国现行的四类身份证（祖国大陆、香港、澳门、台湾）相关知识，包括身份证图解、编码规则、编码匹配校验、编码正确性校验等知识。</p>
<p>注：由于政策的改变，本文总结的身份证编码规则可能失效，查看时请留意当时政策变化。</p>
<a id="more"></a>
<h1 id="身份证图解"><a class="markdownIt-Anchor" href="#身份证图解"></a> 身份证图解</h1>
<h2 id="大陆身份证号码"><a class="markdownIt-Anchor" href="#大陆身份证号码"></a> 大陆身份证号码</h2>
<h3 id="号码构成"><a class="markdownIt-Anchor" href="#号码构成"></a> 号码构成</h3>
<blockquote>
<p>身份证号码共18位，由17位本体码和1位校验码组成:<br />
1.前1、2位数字表示：所在省份的代码；<br />
2.第3、4位数字表示：所在城市的代码；<br />
3.第5、6位数字表示：所在区县的代码；<br />
4.第7~14位数字表示：出生年、月、日；<br />
5.第15、16位数字表示：所在地的派出所的代码；<br />
6.第17位数字表示性别：奇数表示男性，偶数表示女性；<br />
7.第18位数字是校检码：也有的说是个人信息码，一般是随计算机的随机产生，用来检验身份证的正确性。校检码可以是0~9的数字，有时也用x表示。</p>
</blockquote>
<h3 id="一代身份证与二代身份证差别"><a class="markdownIt-Anchor" href="#一代身份证与二代身份证差别"></a> 一代身份证与二代身份证差别</h3>
<blockquote>
<p>1.一代身份证是15位，二代身份证是18位；<br />
2.一代身份证出生年月日采用YYMMDD格式，二代身份证出生年月日采用YYYYMMDD格式；</p>
</blockquote>
<ol start="3">
<li>一代身份证无校验码，二代身份证有校验码。</li>
</ol>
<h2 id="香港身份证号码"><a class="markdownIt-Anchor" href="#香港身份证号码"></a> 香港身份证号码</h2>
<h3 id="号码构成-2"><a class="markdownIt-Anchor" href="#号码构成-2"></a> 号码构成</h3>
<blockquote>
<p>由三部分组成：一个英文字母；6个数字；括号及0-9中的任一个数字，或者字母A。括号中的数字或字母A，是校验码，用于检验括号前面的号码的逻辑正确性，如：A123456(7)</p>
</blockquote>
<h3 id="其他香港身份证知识"><a class="markdownIt-Anchor" href="#其他香港身份证知识"></a> 其他香港身份证知识</h3>
<blockquote>
<p>1.香港人在中国大陆的公民身份号码地址码使用810000开头。大陆发给他们的居住证与大陆人的身份证外观相同，使用功能相同<br />
2.香港身份证由香港特别行政区入境事务处签发，为香港居民的主要身份证明文件。凡年满11岁或在香港逗留多于180天人士，必须于年满11岁后或抵港30天内登记领取身份证。</p>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546736791.png" alt="香港身份证样卡" /></p>
<p><strong>身份证上的符号解释：</strong></p>
<blockquote>
<p>1.在姓名下方的数字串，是姓名的中文电报号码，代表中文姓名，比如2621 =李，2535=智，5174=能。<br />
2.在出生日期右边是性别：女F，男M。F代表女，M代表男。<br />
3.在签发日期的下方，分别为第一次领取身份证的时间和本证的签发（换发）时间。如上例：（01-79），表示第一次领取身份证的时间是1979年1月；<br />
4.在出生日期之下，会印有一串符号及英文字母（例如***AZ），意思如下：持证人年龄为18岁或以上及有资格申领香港特别行政区回港证，* 持证人年龄为11岁至17岁及有资格申领香港特别行政区回港证。</p>
<ul>
<li>A 持证人拥有香港居留权</li>
<li>B 持证人所报称的出生日期或地点自首次登记以后，曾作出更改</li>
<li>C 持证人登记领证时在香港的居留受到入境事务处处长的限制</li>
<li>N 持证人所报的姓名自首次登记以后，曾作出更改</li>
<li>O 持证人报称在香港、澳门及中国以外其他地区或国家出生</li>
<li>R 持证人拥有香港入境权</li>
<li>U 持证人登记领证时在香港的居留不受入境事务处处长的限制</li>
<li>W 持证人报称在澳门地区出生</li>
<li>X 持证人报称在中国大陆出生</li>
<li>Z 持证人报称在香港出生</li>
</ul>
</blockquote>
<h2 id="澳门居民身份证"><a class="markdownIt-Anchor" href="#澳门居民身份证"></a> 澳门居民身份证</h2>
<h3 id="号码构成-3"><a class="markdownIt-Anchor" href="#号码构成-3"></a> 号码构成</h3>
<p>澳门居民身份证号码由8个拉丁数字组成格式为“X/NNNNNN/Y”或“XNNNNNN(Y)”，智能身份证将原有格式（X/NNNNNN/Y）改为XNNNNNN(Y)</p>
<blockquote>
<blockquote>
<p>1.在“/”符号前加上一个拉丁数字1、5或7以代表其取证时代，可能是1、5、7。绝大多数人以1字开首；以5字开首的身份证号码代表持有或曾经持有葡萄牙国民身份证或葡萄牙给外国人身份证之人士；以7字开首代表曾经取得蓝卡之人士，大多都是在1970年代至1980年代期间从中国大陆持合法证件到澳门的人士。<br />
2.在“/”符号后加上的拉丁数字则为查核用数码，是为方便电脑处理资料及检查号码输入的正确性而设</p>
</blockquote>
</blockquote>
<h3 id="其他香港身份证知识-2"><a class="markdownIt-Anchor" href="#其他香港身份证知识-2"></a> 其他香港身份证知识</h3>
<p>澳门居民身份证由澳门特别行政区身份证明局签发，种类分为“澳门特别行政区永久性居民身份证”和“澳门特别行政区非永久性居民身份证”,前者有居留权，后者没有居留权。</p>
<p>每张澳门身份证均有持证人的姓名、出生日期等个人资料，并把持证人的黑白照片和签名印在证上。年满18周岁者，当局会发出一张有效期为十年的身份证；而未满18岁者，其身份证有效期则为五年；年界60岁者则其居民身份证为终身。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546736807.png" alt="澳门居民身份证样卡" /></p>
<blockquote>
<p>在澳门身份证的照片下面，会印有葡萄牙文字母（例如ASM），它代表的意思如下：<br />
A 持证人于澳门出生<br />
B 持证人于香港出生<br />
C 持证人于中国大陆、台湾出生<br />
D 持证人于其他国家及地区出生<br />
N 持证人出生地不明，不知道自己在何处出生<br />
S 持证人有出生证明文件。如无出生证明文件则会漏空。<br />
M 持证人为男性（Masculino）<br />
F 持证人为女性（Feminino）</p>
</blockquote>
<h2 id="台湾居民身份证"><a class="markdownIt-Anchor" href="#台湾居民身份证"></a> 台湾居民身份证</h2>
<h3 id="号码构成-4"><a class="markdownIt-Anchor" href="#号码构成-4"></a> 号码构成</h3>
<p>台湾居民身份证号码由字母+9为数字组成，如：eg:A123456789</p>
<blockquote>
<p>1.第一位数出生的县市，是用英文字母26个字母来分的，如：台北市为A、台北线为B，以此类推；<br />
2.第二位是男性或女性，男性为1、女性为2；<br />
3.后面的8位数字都为随机数</p>
</blockquote>
<h1 id="身份证号匹配规则"><a class="markdownIt-Anchor" href="#身份证号匹配规则"></a> 身份证号匹配规则</h1>
<p><strong>大陆身份证</strong><br />
分为两种情况，18位：</p>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9X]$</span><br></pre></td></tr></table></figure>
<p>15位：</p>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">^[1-9]\d&#123;5&#125;\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;$</span><br></pre></td></tr></table></figure>
<p><strong>香港身份证</strong></p>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">^((\s?[A-Za-z])|([A-Za-z]&#123;2&#125;))\d&#123;6&#125;(\([0−9aA]\)|[0-9aA])$</span><br></pre></td></tr></table></figure>
<p><strong>澳门身份证</strong></p>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">^[1|5|7][0-9]&#123;6&#125;(\([0-9Aa]\)$</span><br></pre></td></tr></table></figure>
<p><strong>台湾身份证</strong></p>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">^[a-zA-ZＡ-Ｘ][0-9]&#123;9&#125;$</span><br></pre></td></tr></table></figure>
<p>注：以上规则在身份证格式无误的情况下可以校验出来，实际使用留意特殊字符，如18位身份证号码最后一位可以是X,也可能是x,还可能是半角状态的Ｘ；香港和澳门身份证前面可能加上香港、香港居民身份证等字眼。</p>
<h1 id="身份证号校验规则"><a class="markdownIt-Anchor" href="#身份证号校验规则"></a> 身份证号校验规则</h1>
<p><strong>大陆身份证</strong><br />
可对18位大陆身份证进行校验，其中校验码为第18位，以下为计算方法：</p>
<blockquote>
<p>1.将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分 别为：7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2<br />
2.将这17位数字和系数相乘的结果相加。<br />
3.用加出来和除以11，看余数是多少？<br />
4.余数只可能有0 1 2 3 4 5 6 7 8 9 10这11个数字。其分别对应的最后一位身份证的号码为1 0 X 9 8 7 6 5 4 3 2。<br />
5.通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的Ⅹ。如果余数是10，身份证的最后一位号码就是2。</p>
</blockquote>
<p><strong>香港身份证</strong><br />
最后一位为校验码，计算规则如下：</p>
<blockquote>
<p>1.首位字母改为数字代表，即A以1代表，B以2代表…Z以26代表，可以得到8个数字，之后第一个数字乘以8，第二个数字乘以7，依此类推，第七个数字乘以2<br />
2.将以上所有乘积相加，得到一个数，再将这个数除以11，得到余数。如果整除，校验码为0，如果余数为1，则校验码为A，如果余数为2～10，则用11减去这个余数，则为校验码。</p>
</blockquote>
<p><strong>澳门身份证</strong></p>
<blockquote>
<p>暂未找到相关资料</p>
</blockquote>
<p><strong>台湾身份证</strong><br />
最后一位为校验码，计算规则如下：</p>
<blockquote>
<p>1.第一位字符转为数字，(ABCDEFGHJKLMNPQRSTUVXYWZIO)对应一组数(10——35)。 令其十位数为X1，个位数为X2； D2到D9分别代表身份证号码的第二至第九位数，分别乘上8、7、6、…1。<br />
2.将乘积相加除以10得出的余数结果。 再用10来减去这个余数结果。就得出身份证上的最后一位数字。 例如R123456783，R=25，检查公式是：<code>2+5*9+1*8+2*7+3*6+4*5+5*4+6*3+7*2+8*1=167</code>， 其167再除以10求余数结果。 其余数结果的个位数为7以10减去得3(检查码)。</p>
</blockquote>
]]></content>
      <categories>
        <category>通识</category>
      </categories>
      <tags>
        <tag>身份证</tag>
      </tags>
  </entry>
  <entry>
    <title>对流媒体传输关键指标作简单预测</title>
    <url>/2019/04/01/%E5%AF%B9%E6%B5%81%E5%AA%92%E4%BD%93%E4%BC%A0%E8%BE%93%E5%85%B3%E9%94%AE%E6%8C%87%E6%A0%87%E4%BD%9C%E7%AE%80%E5%8D%95%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<p>本文使用LSTM对流媒体的6个关键指标进行预测</p>
<a id="more"></a>
<p>现收集有流媒体传输过程中的６个指标，这些指标分别是：</p>
<blockquote>
<ul>
<li>PDCCH信道CCE可用个数    AvaPdcch</li>
<li>PDCCH信道CCE占用个数    OccPdcch</li>
<li>RRC连接最大数        ConRrc</li>
<li>上行PRB平均利用率       UpPrb</li>
<li>下行PRB平均利用率       DownPrb</li>
<li>有效RRC连接最大数     EffConRrc</li>
</ul>
</blockquote>
<h1 id="1数据情况"><a class="markdownIt-Anchor" href="#1数据情况"></a> 1.数据情况</h1>
<p>每个指标的数据格式为：<code>Data-Time-Value</code>，本文首先对数据进行预处理，然后使用LSTM对这６个指标作简单预测。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">filenames=[<span class="string">&#x27;AvaPdcch&#x27;</span>,<span class="string">&#x27;OccPdcch&#x27;</span>,<span class="string">&#x27;ConRrc&#x27;</span>,<span class="string">&#x27;UpPrb&#x27;</span>,<span class="string">&#x27;DownPrb&#x27;</span>,<span class="string">&#x27;EffConRrc&#x27;</span>]  <span class="comment">#属性列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取数据</span></span><br><span class="line">dataset=[]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">    df=pd.read_csv(filename+<span class="string">&#x27;.csv&#x27;</span>,delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    partfea=np.array(df)[:,-<span class="number">1</span>]</span><br><span class="line">    dataset.append(partfea)</span><br><span class="line"></span><br><span class="line">dataset=np.array(dataset)</span><br><span class="line">dataset=dataset.T</span><br><span class="line"></span><br><span class="line">print(dataset.shape,dataset[<span class="number">1302</span>])</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>(1378, 6) [nan nan 18.0 nan nan 8.0]</p>
</blockquote>
<p>从这输出可以看出，数据量就是1378个，每个数据量是前文的６个指标。并且数据中包含缺失值，为了简单，这里使用均值进行填充，实际上还可以更加灵活处理缺失值，比如整行/列去掉，进行插值等。</p>
<h1 id="2数据预处理"><a class="markdownIt-Anchor" href="#2数据预处理"></a> 2.数据预处理</h1>
<ul>
<li><strong>缺失值填充</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line">impute = preprocessing.Imputer()</span><br><span class="line">dataset = impute.fit_transform(dataset)</span><br><span class="line"></span><br><span class="line">print(dataset.shape,dataset[<span class="number">1302</span>])</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>(1378, 6) [  7.31026325e+07   9.40476974e+06   1.80000000e+01   3.38872727e-02<br />
1.92543953e-01   8.00000000e+00]</p>
</blockquote>
<ul>
<li><strong>数据归一化</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line">scaler = MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">dataset = scaler.fit_transform(dataset)</span><br><span class="line"></span><br><span class="line">print(dataset.shape,dataset[<span class="number">1302</span>])</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>(1378, 6) [ 0.5072962   0.23767169  0.22222222  0.17733455  0.21859107  0.23809524]</p>
</blockquote>
<h1 id="3样本划分及标签处理"><a class="markdownIt-Anchor" href="#3样本划分及标签处理"></a> 3.样本划分及标签处理</h1>
<p>后一个数据作为前一个数据的标签，模型最终是基于当前的数据预测下一状态数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_size=<span class="built_in">int</span>(<span class="number">0.8</span>*<span class="built_in">len</span>(dataset))</span><br><span class="line"><span class="comment">#训练集</span></span><br><span class="line">train_X=dataset[<span class="number">0</span>:train_size,:]</span><br><span class="line">train_y=dataset[<span class="number">1</span>:train_size+<span class="number">1</span>,:]</span><br><span class="line"><span class="comment">#验证集</span></span><br><span class="line">vali_X=dataset[train_size:,:]</span><br><span class="line">vali_y=dataset[train_size+<span class="number">1</span>:,:]</span><br><span class="line"> </span><br><span class="line">train_X=train_X.reshape(train_X.shape[<span class="number">0</span>],<span class="number">1</span>,train_X.shape[<span class="number">1</span>])</span><br><span class="line">vali_X=vali_X.reshape(vali_X.shape[<span class="number">0</span>],<span class="number">1</span>,vali_X.shape[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(train_X.shape,train_y.shape,vali_X.shape,vali_y.shape)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>(1102, 1, 6) (1102, 6) (276, 1, 6) (275, 6)</p>
</blockquote>
<h1 id="4模型训练"><a class="markdownIt-Anchor" href="#4模型训练"></a> 4.模型训练</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> LSTM</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> plot_model</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras.utils.vis_utils <span class="keyword">import</span> model_to_dot</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建LSTM网络</span></span><br><span class="line">model=Sequential()</span><br><span class="line">model.add(LSTM(<span class="number">32</span>,input_shape=(<span class="number">1</span>,<span class="number">6</span>)))</span><br><span class="line">model.add(Dense(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;mean_squared_error&#x27;</span>, optimizer=<span class="string">&#x27;adam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印模型</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存模型</span></span><br><span class="line">SVG(model_to_dot(model,show_shapes=<span class="literal">True</span>).create(prog=<span class="string">&#x27;dot&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;svg&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练LSTM网络</span></span><br><span class="line">model.fit(train_X, train_y, epochs=<span class="number">10</span>, batch_size=<span class="number">1</span>, verbose=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h1 id="5模型评估"><a class="markdownIt-Anchor" href="#5模型评估"></a> 5.模型评估</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#预测数据</span></span><br><span class="line">valipredict=model.predict(vali_X)</span><br><span class="line">print(valipredict.shape,vali_y.shape)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#画图模型预测显示</span></span><br><span class="line">finalypredict=[]</span><br><span class="line"><span class="comment">#归一化后的数据画图,有6列</span></span><br><span class="line">plt.subplots(<span class="number">2</span>,<span class="number">3</span>,figsize=(<span class="number">18</span>,<span class="number">6</span>)) </span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="comment">#归一化数据转换为真实数据</span></span><br><span class="line">    valipredict_real=valipredict[:,ind]*(scaler.data_max_[ind]-scaler.data_min_[ind])+scaler.data_min_[ind]</span><br><span class="line">    vali_y_real=vali_y[:,ind]*(scaler.data_max_[ind]-scaler.data_min_[ind])+scaler.data_min_[ind]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#未来的6个真实值</span></span><br><span class="line">    finalypredict.append(valipredict_real[-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>,ind+<span class="number">1</span>)</span><br><span class="line">    plt.title(filenames[ind]) </span><br><span class="line">    plt.plot(valipredict_real,color=<span class="string">&#x27;red&#x27;</span>,label=<span class="string">&#x27;valipredict&#x27;</span>)</span><br><span class="line">    plt.plot(vali_y_real,color=<span class="string">&#x27;green&#x27;</span>,label=<span class="string">&#x27;vali_y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613533169656.png" alt="模型在验证数据上的预测效果" /></p>
<p>由图可以看出，６个指标基本的趋势被正确预测，但是某个时刻的准确度不是很高，我认为原因有几个：</p>
<blockquote>
<ol>
<li>数据量太少，导致模型无法学习足够的特征</li>
<li>特征太简单，某个指标的预测仅仅依赖于包括自身在内的历史时刻的６个值，这明显不够，可以考虑加入更多特征。比如这几个值明显对”时间“敏感，不同的时间区间内，流媒体的传输需要不同，将时间考虑进去将使得模型学习到更加丰富的特征</li>
<li>模型太简单，在数据量少，特征不多的情况下，我只用了一层的LSTM。</li>
</ol>
</blockquote>
<h1 id="6预测未来下一个6个指标"><a class="markdownIt-Anchor" href="#6预测未来下一个6个指标"></a> 6.预测未来下一个６个指标</h1>
<p>将数据中的最后的６个指标输入已经训练好的模型，模型输出６个值，该６个值作为模型预测到的未来下一个６个指标值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前文已经存储，直接输出</span></span><br><span class="line">print(finalypredict)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[93690488.0, 25693568.0, 40.356155, 0.088783175, 0.64066094, 17.614025]</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>LSTM</tag>
      </tags>
  </entry>
  <entry>
    <title>Tex家族关系</title>
    <url>/2019/02/06/Tex%E5%AE%B6%E6%97%8F%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>文章自<a href="https://liam.page/2014/09/08/latex-introduction/"><code>一份其实很短的 LaTeX 入门文档</code></a>学习，整理所得。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613527698526.png" alt="Tex家族关系" /></p>
<a id="more"></a>
<h1 id="tex家族关系图"><a class="markdownIt-Anchor" href="#tex家族关系图"></a> Tex家族关系图</h1>
<h2 id="排版引擎"><a class="markdownIt-Anchor" href="#排版引擎"></a> 排版引擎</h2>
<blockquote>
<p>1.所谓的引擎，是指能够实现断行、分页等操作的程序（请注意这并不是定义）</p>
<p>2.标记语言，是指一种将控制命令和文本结合起来的格式，它的主体是其中的文本而控制命令则实现一些特殊效果（同样请注意这并不是定义）</p>
</blockquote>
<h3 id="tex"><a class="markdownIt-Anchor" href="#tex"></a> Tex</h3>
<blockquote>
<p>1.TeX 的源代码是后缀为 .tex 的纯文本文件。使用任意纯文本编辑器，都可以修改</p>
</blockquote>
<h3 id="pdftex"><a class="markdownIt-Anchor" href="#pdftex"></a> pdfTeX</h3>
<blockquote>
<p>dvi 格式是为了排版而产生的，它本身并不支持所谓的「交叉引用」，pdfTeX 直接输出 pdf 格式的文档，这也是 pdfTeX 相对 TeX 进步（易用性方面）的地方</p>
</blockquote>
<h3 id="pdflatex"><a class="markdownIt-Anchor" href="#pdflatex"></a> pdfLaTeX</h3>
<blockquote>
<p>pdfLaTeX 这个程序的主要工作依旧是将 LaTeX 格式的文档进行解释，不过此次是将解释之后的结果交付给 pdfTeX 引擎处理</p>
</blockquote>
<h3 id="xetex"><a class="markdownIt-Anchor" href="#xetex"></a> XeTeX</h3>
<blockquote>
<p>XeTeX 引擎直接支持 Unicode 字符。也就是说现在不使用 CJK 也能排版中日韩文的文档了，并且这种方式要比之前的方式更加优秀。</p>
</blockquote>
<h3 id="xelatex"><a class="markdownIt-Anchor" href="#xelatex"></a> XeLaTeX</h3>
<blockquote>
<p>XeLaTeX 和 XeTeX 的关系与 pdfLaTeX 和 pdfTeX 的关系类似</p>
</blockquote>
<h3 id="luatex"><a class="markdownIt-Anchor" href="#luatex"></a> LuaTeX</h3>
<blockquote>
<p>正在开发完善的一个 TeX 引擎</p>
</blockquote>
<h2 id="发行"><a class="markdownIt-Anchor" href="#发行"></a> 发行</h2>
<blockquote>
<p>所谓 TeX 发行，也叫 TeX 发行版、TeX 系统或者 TeX 套装，指的是包括 TeX 系统的各种可执行程序，以及他们执行时需要的一些辅助程序和宏包文档的集合：</p>
<ul>
<li>CTeX</li>
<li>MiKTeX</li>
<li>TeX Live<br />
概要: 后面两个最流行的两个发行，自带TeXworks编辑器</li>
</ul>
</blockquote>
<h2 id="编辑器"><a class="markdownIt-Anchor" href="#编辑器"></a> 编辑器</h2>
<h3 id="专门的tex编辑器"><a class="markdownIt-Anchor" href="#专门的tex编辑器"></a> 专门的Tex编辑器</h3>
<ul>
<li>TeXworks</li>
</ul>
<blockquote>
<ul>
<li>TeXworks 是 TeX Live 自带的编辑器，而 TeX Live 是 TeX User Group</li>
<li>出品的跨平台发行版，各个操作系统都可以使用 几乎所有 TeX 发行版都带有 TeXworks TeXworks</li>
<li>十分简洁，除了最基本的功能之外，没有其他复杂的东西，能使你将注意力集中在 TeX 的学习上。</li>
</ul>
</blockquote>
<ul>
<li>TeXmaker</li>
<li>TeXstudio</li>
<li>WinEdt</li>
</ul>
<h3 id="文本编辑器"><a class="markdownIt-Anchor" href="#文本编辑器"></a> 文本编辑器</h3>
<ul>
<li>ATOM</li>
<li>Sublime Text</li>
<li>Visual Studio Code</li>
</ul>
<h2 id="宏包"><a class="markdownIt-Anchor" href="#宏包"></a> 宏包</h2>
<blockquote>
<ul>
<li>
<p>所谓宏包，就是一系列控制序列的合集。这些控制序列太常用，以至于人们会觉得每次将他们写在导言区太过繁琐，于是将他们打包放在同一个文件中，成为所谓的宏包</p>
</li>
<li>
<p>请注意，CTeX 宏集和 CTeX 套装是两个不同的东西。CTeX 宏集本质是 LaTeX 宏的集合，包含若干文档类（.cls 文件）和宏包（.sty 文件）。CTeX 套装是一个过时的 TeX 系统。</p>
</li>
</ul>
</blockquote>
<h3 id="ctex"><a class="markdownIt-Anchor" href="#ctex"></a> CTeX</h3>
<blockquote>
<ul>
<li>
<p>CTeX 宏集和 CTeX 套装是两个不同的东西。CTeX 宏集本质是 LaTeX 宏的集合，包含若干文档类（.cls 文件）和宏包（.sty 文件）。CTeX 套装是一个过时的 TeX 系统</p>
</li>
<li>
<p>新版 CTeX 宏集的默认能够自动检测用户的操作系统，并为之配置合适的字库</p>
</li>
</ul>
</blockquote>
<h2 id="latex"><a class="markdownIt-Anchor" href="#latex"></a> Latex</h2>
<blockquote>
<ul>
<li>
<p>排版系统： LaTeX 利用 TeX 的控制命令，定义了许多新的控制命令并封装成一个可执行文件。这个可执行文件会去解释 LaTeX 新定义的命令成为 TeX 的控制命令，并最终交由 TeX 引擎进行排版。</p>
</li>
<li>
<p>最终进行断行、分页等操作的，是 TeX 引擎</p>
</li>
<li>
<p>LaTeX 实际上是一个工具，它将用户按照它的格式编写的文档解释成 TeX 引擎能理解的形式并交付给 TeX 引擎处理，再将最终结果返回给用户</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Tex</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(10)-算法之五:广度优先与深度优先</title>
    <url>/2018/09/30/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%94:%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E4%B8%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88/</url>
    <content><![CDATA[<p>重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把<code>图论</code>中常用算法弄个明白在写这部分.</p>
<p>图论常用算法看我的博客:</p>
<p>下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.<br />
我将图论的经典问题及常用算法的总结写在下面两篇博客中:<br />
<a href="https://www.cnblogs.com/wushaogui/p/9222828.html">图论—问题篇</a><br />
<a href="https://www.cnblogs.com/wushaogui/p/9237445.html">图论—算法篇</a></p>
<a id="more"></a>
<p>注意:如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h2 id="广度优先搜索算法bfs"><a class="markdownIt-Anchor" href="#广度优先搜索算法bfs"></a> 广度优先搜索算法(BFS)</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#构建一个长度为10的路径</span></span><br><span class="line">G = nx.path_graph(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">nx.draw_spring(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#以4为顶点,广度遍历</span></span><br><span class="line">print(<span class="built_in">list</span>(nx.bfs_tree(G,<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613551009706.png" alt="广度优先搜索算法示例" /></p>
<p>输出:</p>
<blockquote>
<p>[4, 3, 5, 2, 6, 1, 7, 0, 8, 9]</p>
</blockquote>
<hr />
<h2 id="深度优先搜索算法dfs"><a class="markdownIt-Anchor" href="#深度优先搜索算法dfs"></a> 深度优先搜索算法(DFS)</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#构建一个长度为10的路径</span></span><br><span class="line">G = nx.path_graph(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">nx.draw_spring(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#以5为顶点,深度遍历,限定深度为3</span></span><br><span class="line">T = nx.dfs_tree(G, source=<span class="number">5</span>, depth_limit=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">list</span>(T)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613551009707.png" alt="深度优先搜索算法示例" /></p>
<p><strong>输出:</strong></p>
<blockquote>
<p>[5, 4, 3, 2, 6, 7, 8]</p>
</blockquote>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(10)-算法之四:拓扑排序与最大流问题</title>
    <url>/2018/09/30/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E5%9B%9B:%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把<code>图论</code>中常用算法弄个明白在写这部分.</p>
<p>图论常用算法看我的博客:</p>
<p>下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.<br />
我将图论的经典问题及常用算法的总结写在下面两篇博客中:<br />
<a href="https://www.cnblogs.com/wushaogui/p/9222828.html">图论—问题篇</a><br />
<a href="https://www.cnblogs.com/wushaogui/p/9237445.html">图论—算法篇</a></p>
<a id="more"></a>
<p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h2 id="拓扑排序算法tsa"><a class="markdownIt-Anchor" href="#拓扑排序算法tsa"></a> 拓扑排序算法(TSA)</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DG = nx.DiGraph([(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>),(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;e&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>),(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>),(<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;f&#x27;</span>), (<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>), (<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">nx.draw_spring(DG,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有向无环图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个graph拓扑排序序列有很多,这里只给出一种</span></span><br><span class="line">print(<span class="string">&#x27;扑排序序列:&#x27;</span>,<span class="built_in">list</span>(nx.topological_sort(DG)))</span><br><span class="line">print(<span class="string">&#x27;逆扑排序序列:&#x27;</span>,<span class="built_in">list</span>(<span class="built_in">reversed</span>(<span class="built_in">list</span>(nx.topological_sort(DG)))))</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550926354.png" alt="拓扑排序算法示例" /></p>
<p><strong>输出:</strong></p>
<blockquote>
<p>拓扑序序列: [‘a’, ‘b’, ‘c’, ‘e’, ‘d’, ‘f’, ‘g’]<br />
逆拓扑序序列: [‘g’, ‘f’, ‘d’,‘e’, ‘c’, ‘b’, ‘a’]</p>
</blockquote>
<hr />
<h2 id="最大流问题"><a class="markdownIt-Anchor" href="#最大流问题"></a> 最大流问题</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#构建graph</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line">G.add_edge(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;a&#x27;</span>, capacity=<span class="number">3.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;b&#x27;</span>, capacity=<span class="number">1.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>, capacity=<span class="number">3.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>, capacity=<span class="number">5.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>, capacity=<span class="number">4.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>, capacity=<span class="number">2.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;y&#x27;</span>, capacity=<span class="number">2.0</span>)</span><br><span class="line">G.add_edge(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;y&#x27;</span>, capacity=<span class="number">3.0</span>)</span><br><span class="line">pos=nx.spring_layout(G)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;capacity&#x27;</span>)</span><br><span class="line">nx.draw_networkx_nodes(G,pos)</span><br><span class="line">nx.draw_networkx_labels(G,pos)</span><br><span class="line">nx.draw_networkx_edges(G,pos)</span><br><span class="line">nx.draw_networkx_edge_labels(G, pos,edge_labels)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#求最大流</span></span><br><span class="line">flow_value, flow_dict = nx.maximum_flow(G, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;最大流值: &quot;</span>,flow_value)</span><br><span class="line">print(<span class="string">&quot;最大流流经途径: &quot;</span>,flow_dict)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550926359.png" alt="最大流问题示例" /></p>
<p><strong>输出:</strong></p>
<blockquote>
<p>最大流值:  3.0<br />
最大流流经途径:  {‘x’: {‘a’: 2.0, ‘b’: 1.0}, ‘c’: {‘y’: 2.0}, ‘b’: {‘c’: 0, ‘d’: 1.0}, ‘y’: {}, ‘d’: {‘e’: 1.0}, ‘e’: {‘y’: 1.0}, ‘a’:{‘c’: 2.0}}</p>
</blockquote>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(10)-算法之三:关键路径问题</title>
    <url>/2018/09/29/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%B8%89:%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把<code>图论</code>中常用算法弄个明白在写这部分.</p>
<p>图论常用算法看我的博客:</p>
<p>下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.<br />
我将图论的经典问题及常用算法的总结写在下面两篇博客中:<br />
<a href="https://www.cnblogs.com/wushaogui/p/9222828.html">图论—问题篇</a><br />
<a href="https://www.cnblogs.com/wushaogui/p/9237445.html">图论—算法篇</a></p>
<a id="more"></a>
<p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h2 id="关键路径算法cpa"><a class="markdownIt-Anchor" href="#关键路径算法cpa"></a> 关键路径算法(CPA)</h2>
<p>以下代码从<a href="https://gist.github.com/Wlodarski/b78c6662474028958b77ff302940ba33">这里</a>复制,由于版本问题,将代码中的:<code>nx.topological_sort(self, reverse=True)</code>改为<code>list(reversed(list(nx.topological_sort(self))))</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> *  </span><br><span class="line"></span><br><span class="line"><span class="comment">#定义自定义字体，文件名从1.b查看系统中文字体中来  </span></span><br><span class="line">myfont = FontProperties(fname=<span class="string">&#x27;/usr/share/fonts/truetype/wqy/wqy-zenhei.ttc&#x27;</span>)  </span><br><span class="line"><span class="comment">#解决负号&#x27;-&#x27;显示为方块的问题  </span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPM</span>(<span class="params">nx.DiGraph</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        self._critical_path_length = -<span class="number">1</span></span><br><span class="line">        self._criticalPath = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_node</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().add_node(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_nodes_from</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().add_nodes_from(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edge</span>(<span class="params">self, *args</span>):</span>  <span class="comment"># , **kwargs):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().add_edge(*args)  <span class="comment"># , **kwargs)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_edges_from</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().add_edges_from(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_node</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().remove_node(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_nodes_from</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().remove_nodes_from(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_edge</span>(<span class="params">self, *args</span>):</span>  <span class="comment"># , **kwargs):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().remove_edge(*args)  <span class="comment"># , **kwargs)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_edges_from</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self._dirty = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>().remove_edges_from(*args, **kwargs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#根据前向拓扑排序算弧的最早发生时间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_forward</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nx.topological_sort(self):</span><br><span class="line">            es = <span class="built_in">max</span>([self.node[j][<span class="string">&#x27;EF&#x27;</span>] <span class="keyword">for</span> j <span class="keyword">in</span> self.predecessors(n)], default=<span class="number">0</span>)</span><br><span class="line">            self.add_node(n, ES=es, EF=es + self.node[n][<span class="string">&#x27;duration&#x27;</span>])</span><br><span class="line">            </span><br><span class="line">    <span class="comment">#根据前向拓扑排序算弧的最迟发生时间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_backward</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#for n in nx.topological_sort(self, reverse=True):</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">reversed</span>(<span class="built_in">list</span>(nx.topological_sort(self)))):</span><br><span class="line">            lf = <span class="built_in">min</span>([self.node[j][<span class="string">&#x27;LS&#x27;</span>] <span class="keyword">for</span> j <span class="keyword">in</span> self.successors(n)], default=self._critical_path_length)</span><br><span class="line">            self.add_node(n, LS=lf - self.node[n][<span class="string">&#x27;duration&#x27;</span>], LF=lf)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#最早发生时间=最迟发生时间,则判断该节点为关键路径上的关键活动</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_compute_critical_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        graph = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">if</span> self.node[n][<span class="string">&#x27;EF&#x27;</span>] == self.node[n][<span class="string">&#x27;LF&#x27;</span>]:</span><br><span class="line">                graph.add(n)</span><br><span class="line">        self._criticalPath = self.subgraph(graph)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical_path_length</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._dirty:</span><br><span class="line">            self._update()</span><br><span class="line">        <span class="keyword">return</span> self._critical_path_length</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical_path</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._dirty:</span><br><span class="line">            self._update()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(self._criticalPath, key=<span class="keyword">lambda</span> x: self.node[x][<span class="string">&#x27;ES&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._forward()</span><br><span class="line">        self._critical_path_length = <span class="built_in">max</span>(nx.get_node_attributes(self, <span class="string">&#x27;EF&#x27;</span>).values())</span><br><span class="line">        self._backward()</span><br><span class="line">        self._compute_critical_path()</span><br><span class="line">        self._dirty = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#构建graph</span></span><br><span class="line">    G = CPM()</span><br><span class="line">    G.add_node(<span class="string">&#x27;A&#x27;</span>, duration=<span class="number">5</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;B&#x27;</span>, duration=<span class="number">2</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;C&#x27;</span>, duration=<span class="number">4</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;D&#x27;</span>, duration=<span class="number">4</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;E&#x27;</span>, duration=<span class="number">3</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;F&#x27;</span>, duration=<span class="number">7</span>)</span><br><span class="line">    G.add_node(<span class="string">&#x27;G&#x27;</span>, duration=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    G.add_edges_from([</span><br><span class="line">        (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;G&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),</span><br><span class="line">    ])    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#显示graph</span></span><br><span class="line">    nx.draw_spring(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;AOE网络&#x27;</span>,fontproperties=myfont)</span><br><span class="line">    plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    print(<span class="string">&#x27;关键活动为:&#x27;</span>)</span><br><span class="line">    print(G.critical_path_length, G.critical_path)</span><br><span class="line"></span><br><span class="line">    G.add_node(<span class="string">&#x27;D&#x27;</span>, duration=<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;\n修改D活动持续时间4为2后的关键活动为:&#x27;</span>)</span><br><span class="line">print(G.critical_path_length, G.critical_path)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550834258.png" alt="关键路径示例(该图非黑色线为手工绘制,数字手工添加)" /></p>
<p>从graph中可以知道,有两条关键路径,分别是:<code>A-&gt;C-&gt;G-&gt;F</code>和<code>A-&gt;C-&gt;D-&gt;F</code>,长度都是20.</p>
<p><strong>输出:</strong></p>
<blockquote>
<p>关键活动为: 20 [‘A’, ‘C’, ‘D’, ‘G’, ‘F’]</p>
<p>修改D活动持续时间4为2后的关键活动为: 20 [‘A’, ‘C’, ‘G’, ‘F’]</p>
</blockquote>
<p>关键活动为: [‘A’, ‘C’, ‘D’, ‘G’, ‘F’],可以构成两条边.D活动持续时间4为2后,关键路径变化.</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(10)-算法之二:最小最大生成树问题</title>
    <url>/2018/09/28/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C:%E6%9C%80%E5%B0%8F%E5%A4%A7%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把<code>图论</code>中常用算法弄个明白在写这部分.</p>
<p>图论常用算法看我的博客:</p>
<p>下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.<br />
我将图论的经典问题及常用算法的总结写在下面两篇博客中:<br />
<a href="https://www.cnblogs.com/wushaogui/p/9222828.html">图论—问题篇</a><br />
<a href="https://www.cnblogs.com/wushaogui/p/9237445.html">图论—算法篇</a></p>
<a id="more"></a>
<p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h2 id="最小最大生成树问题"><a class="markdownIt-Anchor" href="#最小最大生成树问题"></a> 最小/最大生成树问题</h2>
<p>先构建graph,后面最小最大生成树在这个graph上求.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成graph</span></span><br><span class="line">G.clear()</span><br><span class="line">G = nx.Graph()</span><br><span class="line">G.add_weighted_edges_from([(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">7</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">8</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">4</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#边和节点信息</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;weight&#x27;</span>) </span><br><span class="line">labels=&#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>:<span class="string">&#x27;4&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成节点位置 </span></span><br><span class="line">pos=nx.spring_layout(G) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点画出来 </span></span><br><span class="line">nx.draw_networkx_nodes(G,pos,node_color=<span class="string">&#x27;g&#x27;</span>,node_size=<span class="number">500</span>,alpha=<span class="number">0.8</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#把边画出来 </span></span><br><span class="line">nx.draw_networkx_edges(G,pos,width=<span class="number">1.0</span>,alpha=<span class="number">0.5</span>,edge_color=[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>]) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点的标签画出来 </span></span><br><span class="line">nx.draw_networkx_labels(G,pos,labels,font_size=<span class="number">16</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边权重画出来 </span></span><br><span class="line">nx.draw_networkx_edge_labels(G, pos, edge_labels) </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">plt.title(<span class="string">&#x27;有权图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550727023.png" alt="最小/最大生成树示例" /></p>
<p>注:基本上,图示的红色线是最小生成树,蓝色是最大生成树,最小最大生成树都包含1-2这条边</p>
<hr />
<h3 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求得最小生成树,algorithm可以是kruskal,prim,boruvka一种,默认是kruskal</span></span><br><span class="line">KA = nx.minimum_spanning_tree(G,algorithm=<span class="string">&#x27;kruskal&#x27;</span>)</span><br><span class="line">print(KA.edges(data=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接拿到构成最小生成树的边,algorithm可以是kruskal,prim,boruvka一种,默认是kruskal</span></span><br><span class="line">mst = nx.minimum_spanning_edges(G, algorithm=<span class="string">&#x27;kruskal&#x27;</span>, data=<span class="literal">False</span>)</span><br><span class="line">edgelist = <span class="built_in">list</span>(mst)</span><br><span class="line">print(edgelist)</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>[('3', '4', &#123;'weight': 4&#125;), ('3', '2', &#123;'weight': 1&#125;), ('0', '1', &#123;'weight': 2&#125;), ('2', '1', &#123;'weight': 3&#125;)]
[('3', '2'), ('0', '1'), ('1', '2'), ('4', '3')]
</code></pre>
</blockquote>
<hr />
<h3 id="最大生成树"><a class="markdownIt-Anchor" href="#最大生成树"></a> 最大生成树</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回无向图G上的最大生成树或森林。</span></span><br><span class="line">T = nx.maximum_spanning_tree(G)</span><br><span class="line">print(<span class="built_in">sorted</span>(T.edges(data=<span class="literal">True</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接拿到构成最大生成树,algorithm可以是kruskal,prim,boruvka一种,默认是kruskal</span></span><br><span class="line">mst = nx.tree.maximum_spanning_edges(G, algorithm=<span class="string">&#x27;kruskal&#x27;</span>, data=<span class="literal">False</span>)</span><br><span class="line">edgelist = <span class="built_in">list</span>(mst)</span><br><span class="line">print(edgelist)</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>[('0', '2', &#123;'weight': 7&#125;), ('1', '4', &#123;'weight': 5&#125;), ('2', '1', &#123;'weight': 3&#125;), ('3', '1', &#123;'weight': 8&#125;)]
[('3', '1'), ('0', '2'), ('4', '1'), ('1', '2')]</code></pre>
</blockquote>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(10)-算法之一:最短路径问题</title>
    <url>/2018/09/26/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(10)-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%B8%80:%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>重头戏部分来了,写到这里我感觉得仔细认真点了,可能在NetworkX中,实现某些算法就一句话的事,但是这个算法是做什么的,用在什么地方,原理是怎么样的,不清除,所以,我决定先把<code>图论</code>中常用算法弄个明白在写这部分.</p>
<p>图论常用算法看我的博客:</p>
<p>下面我将使用NetworkX实现上面的算法,建议不清楚的部分打开两篇博客对照理解.<br />
我将图论的经典问题及常用算法的总结写在下面两篇博客中:<br />
<a href="https://www.cnblogs.com/wushaogui/p/9222828.html">图论—问题篇</a><br />
<a href="https://www.cnblogs.com/wushaogui/p/9237445.html">图论—算法篇</a></p>
<a id="more"></a>
<p>注意: #007e80如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h1 id="graph相关算法"><a class="markdownIt-Anchor" href="#graph相关算法"></a> Graph相关算法</h1>
<h2 id="最短路径"><a class="markdownIt-Anchor" href="#最短路径"></a> 最短路径</h2>
<h3 id="无向图和有向图"><a class="markdownIt-Anchor" href="#无向图和有向图"></a> 无向图和有向图</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义并画出该图</span></span><br><span class="line">G = nx.path_graph(<span class="number">5</span>)</span><br><span class="line">nx.add_path(G,[<span class="number">0</span>,<span class="number">5</span>,<span class="number">2</span>])</span><br><span class="line">nx.add_path(G,[<span class="number">0</span>,<span class="number">6</span>,<span class="number">4</span>])</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;无向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算最短路径</span></span><br><span class="line">print(<span class="string">&#x27;0节点到4节点最短路径: &#x27;</span>,nx.shortest_path(G, source=<span class="number">0</span>, target=<span class="number">4</span>))</span><br><span class="line">p1 = nx.shortest_path(G, source=<span class="number">0</span>)</span><br><span class="line">print(<span class="string">&#x27;0节点到所有节点最短路径: &#x27;</span>,p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算图中所有的最短路径</span></span><br><span class="line">print(<span class="string">&#x27;计算图中节点0到节点2的所有最短路径: &#x27;</span>,[p <span class="keyword">for</span> p <span class="keyword">in</span> nx.all_shortest_paths(G, source=<span class="number">0</span>, target=<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算最短路径长度</span></span><br><span class="line">p2=nx.shortest_path_length(G, source=<span class="number">0</span>, target=<span class="number">2</span>)  <span class="comment">#最短路径长度</span></span><br><span class="line">p3=nx.average_shortest_path_length(G) <span class="comment">#计算平均最短路径长度</span></span><br><span class="line">print(<span class="string">&#x27;节点0到节点2的最短路径长度:&#x27;</span>,p2,<span class="string">&#x27; 平均最短路径长度: &#x27;</span>,p3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测是否有路径</span></span><br><span class="line">print(<span class="string">&#x27;检测节点0到节点2是否有路径&#x27;</span>,nx.has_path(G,<span class="number">0</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586655.png" alt="无向图和有向图最短路径示例" /></p>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>0节点到4节点最短路径:  [0, 6, 4]
0节点到所有节点最短路径:  &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [0, 6, 4], 5: [0, 5], 6: [0, 6]&#125;
计算图中节点0到节点2的所有最短路径:  [[0, 1, 2], [0, 5, 2]]
节点0到节点2的最短路径长度: 2  平均最短路径长度:  1.8095238095238095
检测节点0到节点2是否有路径 True
</code></pre>
</blockquote>
<hr />
<h3 id="无权图"><a class="markdownIt-Anchor" href="#无权图"></a> 无权图</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G = nx.path_graph(<span class="number">3</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;无权图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">path1 = nx.single_source_shortest_path(G, <span class="number">0</span>)  <span class="comment">#计算当前源与所有可达节点的最短路径</span></span><br><span class="line">length1 = nx.single_source_shortest_path_length(G, <span class="number">0</span>) <span class="comment">#计算当前源与所有可达节点的最短路径的长度</span></span><br><span class="line">path2 = <span class="built_in">dict</span>(nx.all_pairs_shortest_path(G))  <span class="comment">#计算graph两两节点之间的最短路径</span></span><br><span class="line">length2 = <span class="built_in">dict</span>(nx.all_pairs_shortest_path_length(G)) <span class="comment">#计算graph两两节点之间的最短路径的长度</span></span><br><span class="line">prede1=nx.predecessor(G, <span class="number">0</span>) <span class="comment">#返回G中从源到所有节点最短路径的前驱</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;当前源与所有可达节点的最短路径: &#x27;</span>,path1,<span class="string">&#x27;\n当前源与所有可达节点的最短路径的长度: &#x27;</span>,length1)</span><br><span class="line">print(<span class="string">&#x27;\ngraph两两节点之间的最短路径: &#x27;</span>,path2,<span class="string">&#x27;\ngraph两两节点之间的最短路径的长度: &#x27;</span>,length2)</span><br><span class="line">print(<span class="string">&#x27;\nG中从源到所有节点最短路径的前驱: &#x27;</span>,prede1)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586656.png" alt="无权图" /></p>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>当前源与所有可达节点的最短路径:  &#123;0: [0], 1: [0, 1], 2: [0, 1, 2]&#125; 
当前源与所有可达节点的最短路径的长度:  &#123;0: 0, 1: 1, 2: 2&#125;
graph两两节点之间的最短路径:  &#123;0: &#123;0: [0], 1: [0, 1], 2: [0, 1, 2]&#125;, 1: &#123;0: [1, 0], 1: [1], 2: [1, 2]&#125;, 2: &#123;0: [2, 1, 0], 1: [2, 1], 2: [2]&#125;&#125; 
graph两两节点之间的最短路径的长度:  &#123;0: &#123;0: 0, 1: 1, 2: 2&#125;, 1: &#123;0: 1, 1: 0, 2: 1&#125;, 2: &#123;0: 2, 1: 1, 2: 0&#125;&#125;
G中从源到所有节点最短路径的前驱:  &#123;0: [], 1: [0], 2: [1]&#125;
</code></pre>
</blockquote>
<hr />
<h3 id="有权图迪杰斯特拉"><a class="markdownIt-Anchor" href="#有权图迪杰斯特拉"></a> 有权图(迪杰斯特拉)</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G = nx.path_graph(<span class="number">5</span>, create_using = nx.DiGraph())  </span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算加权图最短路径长度和前驱</span></span><br><span class="line">pred, dist = nx.dijkstra_predecessor_and_distance(G, <span class="number">0</span>)</span><br><span class="line">print(<span class="string">&#x27;\n加权图最短路径长度和前驱: &#x27;</span>,pred, dist)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回G中从源到目标的最短加权路径,要求边权重必须为数值</span></span><br><span class="line">print(<span class="string">&#x27;\nG中从源0到目标4的最短加权路径: &#x27;</span>,nx.dijkstra_path(G,<span class="number">0</span>,<span class="number">4</span>))</span><br><span class="line">print(<span class="string">&#x27;\nG中从源0到目标4的最短加权路径的长度: &#x27;</span>,nx.dijkstra_path_length(G,<span class="number">0</span>,<span class="number">4</span>))  <span class="comment">#最短路径长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单源节点最短加权路径和长度。</span></span><br><span class="line">length1, path1 = nx.single_source_dijkstra(G, <span class="number">0</span>)</span><br><span class="line">print(<span class="string">&#x27;\n单源节点最短加权路径和长度: &#x27;</span>,length1, path1)</span><br><span class="line"><span class="comment">#下面两条和是前面的分解</span></span><br><span class="line"><span class="comment"># path2=nx.single_source_dijkstra_path(G,0)</span></span><br><span class="line"><span class="comment"># length2 = nx.single_source_dijkstra_path_length(G, 0)</span></span><br><span class="line"><span class="comment">#print(length1,&#x27;$&#x27;, path1,&#x27;$&#x27;,length2,&#x27;$&#x27;,path2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多源节点最短加权路径和长度。</span></span><br><span class="line">path1 = nx.multi_source_dijkstra_path(G, &#123;<span class="number">0</span>, <span class="number">4</span>&#125;)</span><br><span class="line">length1 = nx.multi_source_dijkstra_path_length(G, &#123;<span class="number">0</span>, <span class="number">4</span>&#125;)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\n多源节点最短加权路径和长度:&#x27;</span>, path1,length1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#两两节点之间最短加权路径和长度。</span></span><br><span class="line">path1 = <span class="built_in">dict</span>(nx.all_pairs_dijkstra_path(G))</span><br><span class="line">length1 = <span class="built_in">dict</span>(nx.all_pairs_dijkstra_path_length(G))</span><br><span class="line">print(<span class="string">&#x27;\n两两节点之间最短加权路径和长度: &#x27;</span>,path1,length1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#双向搜索的迪杰斯特拉</span></span><br><span class="line">length, path = nx.bidirectional_dijkstra(G, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">print(<span class="string">&#x27;\n双向搜索的迪杰斯特拉:&#x27;</span>,length, path)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586657.png" alt="迪杰斯特拉算法使用" /></p>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>加权图最短路径长度和前驱:  &#123;0: [], 1: [0], 2: [1], 3: [2], 4: [3]&#125; &#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 4&#125;
G中从源0到目标4的最短加权路径:  [0, 1, 2, 3, 4]
G中从源0到目标4的最短加权路径的长度:  4
单源节点最短加权路径和长度:  &#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 4&#125; &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [0, 1, 2, 3, 4]&#125;
多源节点最短加权路径和长度: &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [4]&#125; &#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 0&#125;
两两节点之间最短加权路径和长度:  &#123;0: &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [0, 1, 2, 3, 4]&#125;, 1: &#123;1: [1], 2: [1, 2], 3: [1, 2, 3], 4: [1, 2, 3, 4]&#125;, 2: &#123;2: [2], 3: [2, 3], 4: [2, 3, 4]&#125;, 3: &#123;3: [3], 4: [3, 4]&#125;, 4: &#123;4: [4]&#125;&#125; &#123;0: &#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 4&#125;, 1: &#123;1: 0, 2:1, 3: 2, 4: 3&#125;, 2: &#123;2: 0, 3: 1, 4: 2&#125;, 3: &#123;3: 0, 4: 1&#125;, 4: &#123;4: 0&#125;&#125;
双向搜索的迪杰斯特拉: 4 [0, 1, 2, 3, 4]
</code></pre>
</blockquote>
<hr />
<h3 id="贝尔曼-福特bellman-ford算法"><a class="markdownIt-Anchor" href="#贝尔曼-福特bellman-ford算法"></a> 贝尔曼-福特(Bellman-Ford)算法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G = nx.path_graph(<span class="number">5</span>, create_using = nx.DiGraph())  </span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有权图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;G中从源到目标的最短加权路径: &#x27;</span>,nx.bellman_ford_path(G, <span class="number">0</span>, <span class="number">4</span>))</span><br><span class="line">print(<span class="string">&#x27;\nG中从源到目标的最短加权路径的长度:&#x27;</span>,nx.bellman_ford_path_length(G,<span class="number">0</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">path1=nx.single_source_bellman_ford_path(G,<span class="number">0</span>)</span><br><span class="line">length1 = <span class="built_in">dict</span>(nx.single_source_bellman_ford_path_length(G, <span class="number">0</span>))</span><br><span class="line">print(<span class="string">&#x27;\n单源节点最短加权路径和长度: &#x27;</span>,path1,<span class="string">&#x27;\n单源节点最短加权路径和长度: &#x27;</span>,length1)</span><br><span class="line"></span><br><span class="line">path2 = <span class="built_in">dict</span>(nx.all_pairs_bellman_ford_path(G))</span><br><span class="line">length2 = <span class="built_in">dict</span>(nx.all_pairs_bellman_ford_path_length(G))</span><br><span class="line">print(<span class="string">&#x27;\n两两节点之间最短加权路径和长度: &#x27;</span>,path2,length2)</span><br><span class="line"></span><br><span class="line">length, path = nx.single_source_bellman_ford(G, <span class="number">0</span>)</span><br><span class="line">pred, dist = nx.bellman_ford_predecessor_and_distance(G, <span class="number">0</span>)</span><br><span class="line">print(<span class="string">&#x27;\n加权图最短路径长度和前驱: &#x27;</span>,pred,dist)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586658.png" alt="贝尔曼-福特(Bellman-Ford)算法使用示例" /></p>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>G中从源到目标的最短加权路径:  [0, 1, 2, 3, 4]
G中从源到目标的最短加权路径的长度: 4
单源节点最短加权路径和长度:  &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [0, 1, 2, 3, 4]&#125; 
单源节点最短加权路径和长度:  &#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 4&#125;
两两节点之间最短加权路径和长度:  &#123;0: &#123;0: [0], 1: [0, 1], 2: [0, 1, 2], 3: [0, 1, 2, 3], 4: [0, 1, 2, 3, 4]&#125;, 1: &#123;1: [1], 2: [1, 2], 3: [1, 2, 3], 4:
</code></pre>
<p>[1, 2, 3, 4]}, 2: {2: [2], 3: [2, 3], 4: [2, 3, 4]}, 3: {3: [3], 4:<br />
[3, 4]}, 4: {4: [4]}} {0: {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}, 1: {1: 0, 2:<br />
1, 3: 2, 4: 3}, 2: {2: 0, 3: 1, 4: 2}, 3: {3: 0, 4: 1}, 4: {4: 0}}<br />
加权图最短路径长度和前驱:  {0: [None], 1: [0], 2: [1], 3: [2], 4: [3]} {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}</p>
</blockquote>
<hr />
<h3 id="检测负权重边"><a class="markdownIt-Anchor" href="#检测负权重边"></a> 检测负权重边</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义并画出该图</span></span><br><span class="line">G = nx.cycle_graph(<span class="number">5</span>, create_using = nx.DiGraph())</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加负权重边前后</span></span><br><span class="line">print(nx.negative_edge_cycle(G))</span><br><span class="line">G[<span class="number">1</span>][<span class="number">2</span>][<span class="string">&#x27;weight&#x27;</span>] = -<span class="number">7</span></span><br><span class="line">print(nx.negative_edge_cycle(G))</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>False
True
</code></pre>
</blockquote>
<hr />
<h3 id="使用约翰逊johnson的算法"><a class="markdownIt-Anchor" href="#使用约翰逊johnson的算法"></a> 使用约翰逊(Johnson)的算法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成graph</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line">G.add_weighted_edges_from([(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, -<span class="number">5</span>),(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#边和节点信息</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;weight&#x27;</span>) </span><br><span class="line">labels=&#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成节点位置 </span></span><br><span class="line">pos=nx.spring_layout(G) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点画出来 </span></span><br><span class="line">nx.draw_networkx_nodes(G,pos,node_color=<span class="string">&#x27;g&#x27;</span>,node_size=<span class="number">500</span>,alpha=<span class="number">0.8</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边画出来 </span></span><br><span class="line">nx.draw_networkx_edges(G,pos,width=<span class="number">1.0</span>,alpha=<span class="number">0.5</span>,edge_color=<span class="string">&#x27;b&#x27;</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点的标签画出来 </span></span><br><span class="line">nx.draw_networkx_labels(G,pos,labels,font_size=<span class="number">16</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边权重画出来 </span></span><br><span class="line">nx.draw_networkx_edge_labels(G, pos, edge_labels) </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">plt.title(<span class="string">&#x27;有权图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用johnson算法计算最短路径</span></span><br><span class="line">paths = nx.johnson(G, weight=<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(paths)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586659.png" alt="约翰逊(Johnson)的算法使用示例" /></p>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>&#123;'2': &#123;'2': ['2'], '3': ['2', '3']&#125;, '3': &#123;'3': ['3']&#125;, '0': &#123;'2': ['0', '1', '2'], '3': ['0', '1', '2', '3'], '0': ['0'], '1': ['0','1']&#125;, '1': &#123;'2': ['1', '2'], '3': ['1', '2', '3'], '1': ['1']&#125;&#125;
</code></pre>
</blockquote>
<hr />
<h3 id="弗洛伊德算法floyd-warshall"><a class="markdownIt-Anchor" href="#弗洛伊德算法floyd-warshall"></a> 弗洛伊德算法(Floyd-Warshall)</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用Floyd算法找到所有对最短路径长度。</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line">G.add_weighted_edges_from([(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, -<span class="number">5</span>),(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#边和节点信息</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;weight&#x27;</span>) </span><br><span class="line">labels=&#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成节点位置 </span></span><br><span class="line">pos=nx.spring_layout(G) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点画出来 </span></span><br><span class="line">nx.draw_networkx_nodes(G,pos,node_color=<span class="string">&#x27;g&#x27;</span>,node_size=<span class="number">500</span>,alpha=<span class="number">0.8</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边画出来 </span></span><br><span class="line">nx.draw_networkx_edges(G,pos,width=<span class="number">1.0</span>,alpha=<span class="number">0.5</span>,edge_color=<span class="string">&#x27;b&#x27;</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把节点的标签画出来 </span></span><br><span class="line">nx.draw_networkx_labels(G,pos,labels,font_size=<span class="number">16</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边权重画出来 </span></span><br><span class="line">nx.draw_networkx_edge_labels(G, pos, edge_labels) </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">plt.title(<span class="string">&#x27;有权图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算最短路径长度</span></span><br><span class="line">lenght=nx.floyd_warshall(G, weight=<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算最短路径上的前驱与路径长度</span></span><br><span class="line">predecessor,distance1=nx.floyd_warshall_predecessor_and_distance(G, weight=<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算两两节点之间的最短距离,并以numpy矩阵形式返回</span></span><br><span class="line">distance2=nx.floyd_warshall_numpy(G, weight=<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">list</span>(lenght))</span><br><span class="line">print(predecessor)</span><br><span class="line">print(<span class="built_in">list</span>(distance1))</span><br><span class="line">print(distance2)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586666.png" alt="弗洛伊德算法(Floyd-Warshall)使用示例" /></p>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>['2', '3', '0', '1']
&#123;'2': &#123;'3': '2'&#125;, '0': &#123;'2': '1', '3': '2', '1': '0'&#125;, '1': &#123;'2': '1', '3': '2'&#125;&#125;
['2', '3', '0', '1']
[[ 0.  1. inf inf]
 [inf  0. inf inf]
 [-1.  0.  0. -5.]
 [ 4.  5. inf  0.]]
</code></pre>
</blockquote>
<p>注:输出中的矩阵不是按照节点0,1,2,3排序,而是2,1,3,0,即如图:</p>
<!-- ![Diagram](./attachments/1530181364405.drawio.html) -->
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586667.png" alt="" title="两点之间的最短距离" /></p>
<hr />
<h3 id="a算法"><a class="markdownIt-Anchor" href="#a算法"></a> A*算法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G = nx.path_graph(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有x向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接输出路径和长度</span></span><br><span class="line">print(nx.astar_path(G, <span class="number">0</span>, <span class="number">4</span>))</span><br><span class="line">print(nx.astar_path_length(G, <span class="number">0</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550586668.png" alt="A*算法" /></p>
<p>输出:</p>
<blockquote>
<pre><code>[0, 1, 2, 3, 4]
4
</code></pre>
</blockquote>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(9)-线性代数相关</title>
    <url>/2018/09/24/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(9)-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>学过线性代数的都了解矩阵,在矩阵上的文章可做的很多,什么特征矩阵,单位矩阵等.grpah存储可以使用矩阵,比如graph的<code>邻接矩阵</code>,<code>权重矩阵</code>等,这节主要是在等到graph后,如何快速得到这些信息.详细官方文档在<a href="https://networkx.github.io/documentation/stable/reference/linalg.html">这里</a></p>
<a id="more"></a>
<p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h1 id="线性代数相关"><a class="markdownIt-Anchor" href="#线性代数相关"></a> 线性代数相关</h1>
<h2 id="图矩阵"><a class="markdownIt-Anchor" href="#图矩阵"></a> 图矩阵</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义图的节点和边</span></span><br><span class="line">nodes=[<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">edges=[(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">7</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">6</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">0.5</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">0.5</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">0.5</span>)]</span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">10</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个无向图和有向图</span></span><br><span class="line">G1 = nx.Graph()</span><br><span class="line">G1.add_nodes_from(nodes)</span><br><span class="line">G1.add_weighted_edges_from(edges)</span><br><span class="line"></span><br><span class="line">G2 = nx.DiGraph()</span><br><span class="line">G2.add_nodes_from(nodes)</span><br><span class="line">G2.add_weighted_edges_from(edges)</span><br><span class="line"></span><br><span class="line">pos1=nx.circular_layout(G1)</span><br><span class="line">pos2=nx.circular_layout(G2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出无向图和有向图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G1,pos1, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;无向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(G2,pos2, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#控制numpy输出小数位数</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.set_printoptions(precision=<span class="number">3</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#邻接矩阵</span></span><br><span class="line">A = nx.adjacency_matrix(G1)</span><br><span class="line">print(<span class="string">&#x27;邻接矩阵:\n&#x27;</span>,A.todense())</span><br><span class="line"></span><br><span class="line"><span class="comment">#关联矩阵</span></span><br><span class="line">I = nx.incidence_matrix(G1)</span><br><span class="line">print(<span class="string">&#x27;\n关联矩阵:\n&#x27;</span>,I.todense())</span><br><span class="line"></span><br><span class="line"><span class="comment">#拉普拉斯矩阵</span></span><br><span class="line">L=nx.laplacian_matrix(G1)</span><br><span class="line">print(<span class="string">&#x27;\n拉普拉斯矩阵:\n&#x27;</span>,L.todense())</span><br><span class="line"></span><br><span class="line"><span class="comment">#标准化的拉普拉斯矩阵</span></span><br><span class="line">NL=nx.normalized_laplacian_matrix(G1)</span><br><span class="line">print(<span class="string">&#x27;\n标准化的拉普拉斯矩阵:\n&#x27;</span>,NL.todense())</span><br><span class="line"></span><br><span class="line"><span class="comment">#有向图拉普拉斯矩阵</span></span><br><span class="line">DL=nx.directed_laplacian_matrix(G2)</span><br><span class="line">print(<span class="string">&#x27;\n有向拉普拉斯矩阵:\n&#x27;</span>,DL)</span><br><span class="line"></span><br><span class="line"><span class="comment">#拉普拉斯算子的特征值</span></span><br><span class="line">LS=nx.laplacian_spectrum(G1)</span><br><span class="line">print(<span class="string">&#x27;\n拉普拉斯算子的特征值:\n&#x27;</span>,LS)</span><br><span class="line"></span><br><span class="line"><span class="comment">#邻接矩阵的特征值</span></span><br><span class="line">AS=nx.adjacency_spectrum(G1)</span><br><span class="line">print(<span class="string">&#x27;\n邻接矩阵的特征值:\n&#x27;</span>,AS)</span><br><span class="line"></span><br><span class="line"><span class="comment">#无向图的代数连通性</span></span><br><span class="line">AC=nx.algebraic_connectivity(G1)</span><br><span class="line">print(<span class="string">&#x27;\n无向图的代数连通性:\n&#x27;</span>,AC)</span><br><span class="line"></span><br><span class="line"><span class="comment">#图的光谱排序</span></span><br><span class="line">SO=nx.spectral_ordering(G1)</span><br><span class="line">print(<span class="string">&#x27;\n图的光谱排序:\n&#x27;</span>,SO)</span><br><span class="line"></span><br><span class="line"><span class="comment">#两个矩阵的解释看:https://blog.csdn.net/Hanging_Gardens/article/details/55670356</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550454647.png" alt="图矩阵示例" /></p>
<p><strong>输出:</strong></p>
<pre><code>邻接矩阵:
 [[0.  0.  0.  0.  5.  0.  0.  0.  6. ]
 [0.  0.  0.  2.  0.  0.  0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.5 0.5 0.  0. ]
 [0.  2.  0.  1.  1.  0.  0.  0.  0. ]
 [5.  0.  0.  1.  0.  0.  0.  0.  7. ]
 [0.  0.  0.5 0.  0.  0.  0.5 0.  0. ]
 [0.  0.  0.5 0.  0.  0.5 0.  0.  0. ]
 [0.  0.  0.  0.  0.  0.  0.  0.  0. ]
 [6.  0.  0.  0.  7.  0.  0.  0.  0. ]]

关联矩阵:
 [[1. 1. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 1. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 1. 1. 0. 0. 0. 0.]
 [0. 0. 1. 0. 0. 1. 0. 0. 0.]
 [0. 1. 0. 0. 0. 1. 0. 1. 0.]
 [0. 0. 0. 1. 0. 0. 0. 0. 1.]
 [0. 0. 0. 0. 1. 0. 0. 0. 1.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 1. 0.]]

拉普拉斯矩阵:
 [[11.   0.   0.   0.  -5.   0.   0.   0.  -6. ]
 [ 0.   2.   0.  -2.   0.   0.   0.   0.   0. ]
 [ 0.   0.   1.   0.   0.  -0.5 -0.5  0.   0. ]
 [ 0.  -2.   0.   3.  -1.   0.   0.   0.   0. ]
 [-5.   0.   0.  -1.  13.   0.   0.   0.  -7. ]
 [ 0.   0.  -0.5  0.   0.   1.  -0.5  0.   0. ]
 [ 0.   0.  -0.5  0.   0.  -0.5  1.   0.   0. ]
 [ 0.   0.   0.   0.   0.   0.   0.   0.   0. ]
 [-6.   0.   0.   0.  -7.   0.   0.   0.  13. ]]

标准化的拉普拉斯矩阵:
 [[ 1.     0.     0.     0.    -0.418  0.     0.     0.    -0.502]
 [ 0.     1.     0.    -0.707  0.     0.     0.     0.     0.   ]
 [ 0.     0.     1.     0.     0.    -0.5   -0.5    0.     0.   ]
 [ 0.    -0.707  0.     0.75  -0.139  0.     0.     0.     0.   ]
 [-0.418  0.     0.    -0.139  1.     0.     0.     0.    -0.538]
 [ 0.     0.    -0.5    0.     0.     1.    -0.5    0.     0.   ]
 [ 0.     0.    -0.5    0.     0.    -0.5    1.     0.     0.   ]
 [ 0.     0.     0.     0.     0.     0.     0.     0.     0.   ]
 [-0.502  0.     0.     0.    -0.538  0.     0.     0.     1.   ]]

有向拉普拉斯矩阵:
 [[ 0.889 -0.117 -0.029 -0.087 -0.319 -0.029 -0.029 -0.129 -0.242]
 [-0.117  0.889 -0.026 -0.278 -0.051 -0.026 -0.026 -0.114 -0.056]
 [-0.029 -0.026  0.994 -0.012 -0.009 -0.481 -0.481 -0.025 -0.01 ]
 [-0.087 -0.278 -0.012  0.757 -0.097 -0.012 -0.012 -0.052 -0.006]
 [-0.319 -0.051 -0.009 -0.097  0.994 -0.009 -0.009 -0.041 -0.434]
 [-0.029 -0.026 -0.481 -0.012 -0.009  0.994 -0.481 -0.025 -0.01 ]
 [-0.029 -0.026 -0.481 -0.012 -0.009 -0.481  0.994 -0.025 -0.01 ]
 [-0.129 -0.114 -0.025 -0.052 -0.041 -0.025 -0.025  0.889 -0.045]
 [-0.242 -0.056 -0.01  -0.006 -0.434 -0.01  -0.01  -0.045  0.994]]

拉普拉斯算子的特征值:
 [-1.436e-15  0.000e+00  4.610e-16  7.000e-01  1.500e+00  1.500e+00
  4.576e+00  1.660e+01  2.013e+01]

邻接矩阵的特征值:
 [12.068+0.000e+00j  2.588+0.000e+00j -7.219+0.000e+00j -4.925+0.000e+00j
 -1.513+0.000e+00j  1.   +0.000e+00j -0.5  +2.393e-17j -0.5  -2.393e-17j
  0.   +0.000e+00j]

无向图的代数连通性:
 0.0

图的光谱排序:
 ['4', '2', '1', '0', '5', 'b', 'c', 'a', '3']
</code></pre>
<hr />
<p>后面还有两个小节,由于对图论算法不是很明白,所以先讲明白算法原理,再使用networkX实现,如无须读算法,可以跳过算法原理部分.</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(7)-对graph进行分析</title>
    <url>/2018/09/21/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(7)-%E5%AF%B9graph%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>graph构建完成后,对graph的连通等属性进行分析.</p>
<a id="more"></a>
<p>注意: #007e80如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h1 id="对图进行分析"><a class="markdownIt-Anchor" href="#对图进行分析"></a> 对图进行分析</h1>
<p>强连通：有向图中任意两点v1、v2间存在v1到v2的路径（path）及v2到v1的路径。<br />
弱联通：将有向图的所有的有向边替换为无向边，所得到的图称为原图的基图。如果一个有向图的基图是连通图，则有向图是弱连通图。</p>
<h2 id="连通子图"><a class="markdownIt-Anchor" href="#连通子图"></a> 连通子图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义图的节点和边</span></span><br><span class="line">nodes=[<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">edges=[(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">7</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">6</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">0.5</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">0.5</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">0.5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义graph</span></span><br><span class="line">G = nx.Graph()</span><br><span class="line">G.add_nodes_from(nodes)</span><br><span class="line">G.add_weighted_edges_from(edges)</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到所有连通子图</span></span><br><span class="line">print(<span class="string">&#x27;connected_components of graph: &#x27;</span>,<span class="built_in">list</span>(nx.connected_components(G)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示该graph</span></span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>connected_components of graph:  [&#123;'a', 'b', 'c'&#125;, &#123;'4', '0', '5', '1', '2'&#125;, &#123;'3'&#125;]
</code></pre>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550122473.png" alt="png" title="连通子图例子" /></p>
<h2 id="弱联通"><a class="markdownIt-Anchor" href="#弱联通"></a> 弱联通</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义graph</span></span><br><span class="line">G = nx.path_graph(<span class="number">4</span>, create_using=nx.DiGraph())</span><br><span class="line">G.add_path([<span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>])</span><br><span class="line">G.add_path([<span class="number">5</span>, <span class="number">6</span>,<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出所有的弱连通图</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> nx.weakly_connected_components(G):</span><br><span class="line">    print(c)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#由大到小的规模判断弱连通子图</span></span><br><span class="line">print([<span class="built_in">len</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">sorted</span>(nx.weakly_connected_components(G), key=<span class="built_in">len</span>, reverse=<span class="literal">True</span>)])</span><br><span class="line"></span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>&#123;0, 1, 2, 3, 7, 8&#125;
&#123;9, 5, 6&#125;
[6, 3]
</code></pre>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550122475.png" alt="png" title="弱联通例子" /></p>
<h2 id="强连通"><a class="markdownIt-Anchor" href="#强连通"></a> 强连通</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义图</span></span><br><span class="line">G = nx.path_graph(<span class="number">4</span>, create_using=nx.DiGraph())</span><br><span class="line">G.add_path([<span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出所有的强连通子图</span></span><br><span class="line">con = nx.strongly_connected_components(G)</span><br><span class="line">print(con,<span class="built_in">type</span>(con),<span class="built_in">list</span>(con))</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示该图</span></span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>&lt;generator object strongly_connected_components at 0x7fe0eefe9c50&gt; &lt;class 'generator'&gt; [&#123;8, 1, 2, 3&#125;, &#123;0&#125;]
</code></pre>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550122476.png" alt="png" title="强连通例子" /></p>
<h2 id="子图"><a class="markdownIt-Anchor" href="#子图"></a> 子图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义图</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line">G.add_path([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"><span class="comment">#抽取图G的节点作为子图</span></span><br><span class="line">sub_graph = G.subgraph([<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment">#画原图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;原图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#画子图</span></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(sub_graph, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;子图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550122476.png" alt="png" title="子图例子" /></p>
<h2 id="条件过滤"><a class="markdownIt-Anchor" href="#条件过滤"></a> 条件过滤</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#G.clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义有向图</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line">road_nodes = &#123;<span class="string">&#x27;a&#x27;</span>:&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>&#125;, <span class="string">&#x27;b&#x27;</span>:&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>&#125;, <span class="string">&#x27;c&#x27;</span>:&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">3</span>&#125;, <span class="string">&#x27;d&#x27;</span>:&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line">road_edges = [(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)]</span><br><span class="line">G.add_nodes_from(road_nodes.items())</span><br><span class="line">G.add_edges_from(road_edges)</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flt_func_draw</span>():</span></span><br><span class="line">    flt_func = <span class="keyword">lambda</span> d: d[<span class="string">&#x27;id&#x27;</span>] != <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> flt_func</span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出原图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;过滤前&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤原图得到子图</span></span><br><span class="line">flt_func = flt_func_draw()</span><br><span class="line">part_G = G.subgraph(n <span class="keyword">for</span> n, d <span class="keyword">in</span> G.nodes(data=<span class="literal">True</span>) <span class="keyword">if</span> flt_func(d))</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出子图</span></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(part_G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;过滤后&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613550122477.png" alt="png" title="条件过滤后的子图" /></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(6)-对graph进行操作</title>
    <url>/2018/09/19/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(6)-%E5%AF%B9graph%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>graph生成后,除了有查看操作,还有移除等操作,还有其他更多操作,具体可以看<a href="https://networkx.github.io/documentation/stable/reference/algorithms/operators.html">这里</a>.下面将比较graph操作前后的不同.</p>
<p>目录:</p>
<a id="more"></a>
<p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h1 id="对图进行操作"><a class="markdownIt-Anchor" href="#对图进行操作"></a> 对图进行操作</h1>
<h2 id="移除某些节点和边"><a class="markdownIt-Anchor" href="#移除某些节点和边"></a> 移除某些节点和边</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#G.clear()</span></span><br><span class="line"><span class="comment">#生成graph</span></span><br><span class="line">G=nx.path_graph(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">plt.suptitle(<span class="string">&#x27;移除部分节点和边&#x27;</span>,fontproperties=myfont)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出未操作前的graph</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;操作前&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除部分节点和边,移除所有的点和边使用G.clear(),不再单独测试</span></span><br><span class="line">G.remove_node(<span class="number">2</span>)</span><br><span class="line">G.remove_nodes_from([<span class="number">1</span>,<span class="number">5</span>])</span><br><span class="line">G.remove_edge(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出操作后的graph</span></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;操作后&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549997650.png" alt="png" title="移除某些节点和边" /></p>
<h2 id="合并graph"><a class="markdownIt-Anchor" href="#合并graph"></a> 合并graph</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># G1.clear()</span></span><br><span class="line"><span class="comment"># G2.clear()</span></span><br><span class="line"><span class="comment"># G3.clear()</span></span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">3</span>,figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">plt.suptitle(<span class="string">&#x27;合并两个图&#x27;</span>,fontproperties=myfont)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成graph1</span></span><br><span class="line">G1=nx.path_graph(<span class="number">8</span>)</span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">nx.draw(G1, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;图1&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成graph2</span></span><br><span class="line">G2=nx.complete_graph(<span class="number">3</span>)</span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">nx.draw(G2, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;图2&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除部分节点和边,移除所有的点和边使用G.clear(),不再单独测试</span></span><br><span class="line">G3=nx.disjoint_union(G1,G2)</span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line">nx.draw(G3, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;合并后&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示graph</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549997656.png" alt="png" title="合并graph" /></p>
<h2 id="有向图和无向图的转化"><a class="markdownIt-Anchor" href="#有向图和无向图的转化"></a> 有向图和无向图的转化</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#无向图转有向图</span></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">3</span>))</span><br><span class="line">plt.suptitle(<span class="string">&#x27;无向图转换为有向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义无向图</span></span><br><span class="line">G = nx.path_graph(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#转换为有向图</span></span><br><span class="line">G2=G.to_directed()</span><br><span class="line"></span><br><span class="line"><span class="comment">#下面是可视化转换前后的两个图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;无向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(G2, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#有向图转无向图</span></span><br><span class="line">G.clear()</span><br><span class="line">G2.clear()</span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">3</span>))</span><br><span class="line">plt.suptitle(<span class="string">&#x27;有向图转换为无向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义有向图</span></span><br><span class="line">G = nx.path_graph(<span class="number">8</span>,create_using=nx.DiGraph())</span><br><span class="line"><span class="comment">#转换为无向图</span></span><br><span class="line">G2=G.to_undirected()</span><br><span class="line"></span><br><span class="line"><span class="comment">#下面是可视化转换前后的两个图</span></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;有向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">nx.draw(G2, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;无向图&#x27;</span>,fontproperties=myfont)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:可以看出无向图转有向图时,得到的边都是双向</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549997657.png" alt="png" title="无向图转换为有向图" /></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549997658.png" alt="png" title="有向图转换为无向图" /></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(5)-查看graph的信息</title>
    <url>/2018/09/18/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(5)-%E6%9F%A5%E7%9C%8Bgraph%E7%9A%84%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>有时候graph建好后,我们并不清除该graph内节点的,边的信息,这就需要调用函数去查看了.</p>
<a id="more"></a>
<p>注意: 如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h1 id="查看graph的信息"><a class="markdownIt-Anchor" href="#查看graph的信息"></a> 查看Graph的信息</h1>
<h2 id="查看graph内节点边的数量"><a class="markdownIt-Anchor" href="#查看graph内节点边的数量"></a> 查看graph内节点,边的<code>数量</code></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成graph</span></span><br><span class="line">G=nx.path_graph(<span class="number">8</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看节点和边的情况</span></span><br><span class="line">print(<span class="string">&#x27;number of nodes&#x27;</span>,G.number_of_nodes())</span><br><span class="line">print(<span class="string">&#x27;number of edges&#x27;</span>,G.number_of_edges())</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549846968.png" alt="enter description here" title="例子图" /></p>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>number of nodes 8
number of edges 7
</code></pre>
</blockquote>
<h2 id="查看graph中的点边"><a class="markdownIt-Anchor" href="#查看graph中的点边"></a> 查看graph中的点,边</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输出graph所有的点和边</span></span><br><span class="line">print(<span class="string">&#x27;all nodes of Graph&#x27;</span>,G.nodes())</span><br><span class="line">print(<span class="string">&#x27;all edges of Graph&#x27;</span>,G.edges())</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>all nodes of Graph [0, 1, 2, 3, 4, 5, 6, 7]
all edges of Graph [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]
</code></pre>
</blockquote>
<h2 id="查看某些节点的度"><a class="markdownIt-Anchor" href="#查看某些节点的度"></a> 查看某些节点的度</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看节点2和3的度</span></span><br><span class="line">print(<span class="string">&#x27;degree of some nodes&#x27;</span>,G.degree([<span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>degree of some nodes [(2, 2), (3, 2)]
</code></pre>
</blockquote>
<h2 id="查看节点边信息"><a class="markdownIt-Anchor" href="#查看节点边信息"></a> 查看节点&amp;边信息</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置一些节点信息</span></span><br><span class="line">G.nodes[<span class="number">1</span>][<span class="string">&#x27;room&#x27;</span>] = <span class="number">714</span></span><br><span class="line">G.nodes[<span class="number">1</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="comment">#设置一些边信息</span></span><br><span class="line">G[<span class="number">1</span>][<span class="number">2</span>][<span class="string">&#x27;weight&#x27;</span>] = <span class="number">4.7</span></span><br><span class="line">G[<span class="number">1</span>][<span class="number">2</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&quot;blue&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;imformation of one nodes&#x27;</span>,G.nodes[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">&#x27;imformation of all nodes&#x27;</span>,G.nodes.data())</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;imformation of all nodes&#x27;</span>,G.edges.data())  <span class="comment">#边不支持[x]这样的下标访问</span></span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>imformation of one nodes &#123;'room': 714, 'color': 'b'&#125;
imformation of all nodes [(0, &#123;&#125;), (1, &#123;'room': 714, 'color': 'b'&#125;), (2, &#123;&#125;), (3, &#123;&#125;), (4, &#123;&#125;), (5, &#123;&#125;), (6, &#123;&#125;), (7, &#123;&#125;)]
imformation of all nodes [(0, 1, &#123;&#125;), (1, 2, &#123;'weight': 4.7, 'color': 'blue'&#125;), (2, 3, &#123;&#125;), (3, 4, &#123;&#125;), (4, 5, &#123;&#125;), (5, 6, &#123;&#125;), (6,7, &#123;&#125;)]
</code></pre>
</blockquote>
<h2 id="遍历一个有权图"><a class="markdownIt-Anchor" href="#遍历一个有权图"></a> 遍历一个有权图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义一个有权无向图</span></span><br><span class="line">FG = nx.Graph()</span><br><span class="line">FG.add_weighted_edges_from([(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0.125</span>), (<span class="number">1</span>, <span class="number">3</span>, <span class="number">0.75</span>), (<span class="number">2</span>, <span class="number">4</span>, <span class="number">1.2</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">0.375</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> n, nbrs <span class="keyword">in</span> FG.adj.items():</span><br><span class="line">    <span class="keyword">for</span> nbr, eattr <span class="keyword">in</span> nbrs.items():</span><br><span class="line">        wt = eattr[<span class="string">&#x27;weight&#x27;</span>]</span><br><span class="line">        <span class="comment">#权重小于0.5的输出</span></span><br><span class="line">        <span class="keyword">if</span> wt &lt; <span class="number">0.5</span>: </span><br><span class="line">            print(<span class="string">&#x27;way1-(%d, %d, %.3f)&#x27;</span> % (n, nbr, wt))</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历所有边</span></span><br><span class="line"><span class="keyword">for</span> (u, v, wt) <span class="keyword">in</span> FG.edges.data(<span class="string">&#x27;weight&#x27;</span>):</span><br><span class="line">    <span class="comment">#权重小于0.5的输出</span></span><br><span class="line">    <span class="keyword">if</span> wt &lt; <span class="number">0.5</span>: </span><br><span class="line">        print(<span class="string">&#x27;way2-(%d, %d, %.3f)&#x27;</span> % (u, v, wt))</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<pre><code>way1-(1, 2, 0.125)
way1-(2, 1, 0.125)
way1-(3, 4, 0.375)
way1-(4, 3, 0.375)
way2-(1, 2, 0.125)
way2-(3, 4, 0.375)</code></pre>
</blockquote>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(4)-设置graph的信息</title>
    <url>/2018/09/17/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(4)-%E8%AE%BE%E7%BD%AEgraph%E7%9A%84%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>要画出美观的graph,需要对graph里面的<code>节点</code>,<code>边</code>,<code>节点的布局</code>都要进行设置,具体可以看官方文档:<a href="https://networkx.github.io/documentation/stable/tutorial.html#adding-attributes-to-graphs-nodes-and-edges">Adding attributes to graphs, nodes, and edges</a>部分.</p>
<a id="more"></a>
<p>注意:如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h1 id="设置graph的信息"><a class="markdownIt-Anchor" href="#设置graph的信息"></a> 设置graph的信息</h1>
<h2 id="创建graph时添加属性"><a class="markdownIt-Anchor" href="#创建graph时添加属性"></a> 创建graph时添加属性</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#G.clear()</span></span><br><span class="line">G=nx.Graph()</span><br><span class="line">G = nx.Graph(day=<span class="string">&quot;Friday&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;Assign graph attributes when creating a new graph: &#x27;</span>,G.graph)</span><br><span class="line">G.graph[<span class="string">&#x27;day&#x27;</span>] = <span class="string">&quot;Monday&quot;</span></span><br><span class="line">print(<span class="string">&#x27;Assign graph attributes when have a graph: &#x27;</span>,G.graph)</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<p>Assign graph attributes when creating a new graph:  {‘day’: ‘Friday’}<br />
Assign graph attributes when have a graph:  {‘day’: ‘Monday’}</p>
</blockquote>
<h2 id="指定节点的属性"><a class="markdownIt-Anchor" href="#指定节点的属性"></a> 指定节点的属性</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建时设置</span></span><br><span class="line">G.add_node(<span class="number">1</span>, time=<span class="string">&#x27;5pm&#x27;</span>)</span><br><span class="line">G.add_nodes_from([<span class="number">3</span>,<span class="number">4</span>], time=<span class="string">&#x27;2pm&#x27;</span>,color=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接设置</span></span><br><span class="line">G.nodes[<span class="number">1</span>][<span class="string">&#x27;room&#x27;</span>] = <span class="number">714</span></span><br><span class="line">G.nodes[<span class="number">1</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">print(G.nodes.data())</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<p>[(1, {‘room’: 714, ‘time’: ‘5pm’, ‘color’: ‘b’}), (3, {‘time’: ‘2pm’, ‘color’: ‘g’}), (4, {‘time’: ‘2pm’, ‘color’: ‘g’})]</p>
</blockquote>
<h2 id="指定边的属性"><a class="markdownIt-Anchor" href="#指定边的属性"></a> 指定边的属性</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建时设置</span></span><br><span class="line">G.add_edge(<span class="number">1</span>, <span class="number">2</span>, weight=<span class="number">4.7</span> )</span><br><span class="line">G.add_edges_from([(<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">5</span>)], color=<span class="string">&#x27;red&#x27;</span>,weight=<span class="number">10</span>)</span><br><span class="line">G.add_edges_from([(<span class="number">1</span>, <span class="number">2</span>, &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;blue&#x27;</span>&#125;), (<span class="number">2</span>, <span class="number">3</span>, &#123;<span class="string">&#x27;weight&#x27;</span>: <span class="number">8</span>&#125;)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接设置</span></span><br><span class="line">G[<span class="number">1</span>][<span class="number">2</span>][<span class="string">&#x27;weight&#x27;</span>] = <span class="number">4.7</span></span><br><span class="line">G[<span class="number">1</span>][<span class="number">2</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&quot;blue&quot;</span></span><br><span class="line">G.edges[<span class="number">3</span>, <span class="number">4</span>][<span class="string">&#x27;weight&#x27;</span>] = <span class="number">4.2</span></span><br><span class="line">G.edges[<span class="number">1</span>, <span class="number">2</span>][<span class="string">&#x27;color&#x27;</span>] = <span class="string">&quot;green&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;edge 1-2: &#x27;</span>,G.edges[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">print(<span class="string">&#x27;edge 3-4: &#x27;</span>,G.edges[<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<p>edge 1-2:  {‘weight’: 4.7, ‘color’: ‘green’}<br />
edge 3-4:  {‘weight’: 4.2, ‘color’: ‘red’}</p>
</blockquote>
<h2 id="显示graph"><a class="markdownIt-Anchor" href="#显示graph"></a> 显示graph</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成节点标签</span></span><br><span class="line">labels=&#123;&#125;</span><br><span class="line">labels[<span class="number">1</span>]=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">labels[<span class="number">2</span>]=<span class="string">&#x27;2&#x27;</span></span><br><span class="line">labels[<span class="number">3</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line">labels[<span class="number">4</span>]=<span class="string">&#x27;4&#x27;</span></span><br><span class="line">labels[<span class="number">5</span>]=<span class="string">&#x27;5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取graph中的边权重</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;weight of all edges:&#x27;</span>,edge_labels)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成节点位置</span></span><br><span class="line">pos=nx.circular_layout(G)</span><br><span class="line">print(<span class="string">&#x27;position of all nodes:&#x27;</span>,pos)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把节点画出来</span></span><br><span class="line">nx.draw_networkx_nodes(G,pos,node_color=<span class="string">&#x27;g&#x27;</span>,node_size=<span class="number">500</span>,alpha=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把边画出来</span></span><br><span class="line">nx.draw_networkx_edges(G,pos,width=<span class="number">1.0</span>,alpha=<span class="number">0.5</span>,edge_color=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把节点的标签画出来</span></span><br><span class="line">nx.draw_networkx_labels(G,pos,labels,font_size=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把边权重画出来</span></span><br><span class="line">nx.draw_networkx_edge_labels(G, pos, edge_labels)</span><br><span class="line"></span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line"><span class="comment">#去掉坐标刻度</span></span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<p>weight of all edges: {(1, 2): 4.7, (3, 4): 4.2, (2, 3): 8, (4, 5): 10}<br />
position of all nodes: {1: array([1.00000000e+00, 2.38418583e-08]), 2: array([0.30901696, 0.95105658]), 3: array([-0.80901709,  0.58778522]), 4: array([-0.80901698, -0.58778535]), 5: array([ 0.30901711, -0.95105647])}</p>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549748265.png" alt="有权无向图" title="有权无向图" /></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(3)-手动创建graph</title>
    <url>/2018/09/16/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(3)-%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BAgraph/</url>
    <content><![CDATA[<p>不可否认,日常中我们使用最多的还是,使用自己的数据去手动创建自己的图形,而不是使用生成器,现从给graph添加<code>点</code>和边入手,讲解手动创建graph.</p>
<a id="more"></a>
<p>如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h1 id="给graph添加节点"><a class="markdownIt-Anchor" href="#给graph添加节点"></a> 给graph添加节点</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"></span><br><span class="line"><span class="comment">#该函数由于显示一组graph,传上来的是一组graph和这些graph的描述.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ShowGraph</span>(<span class="params">glists,ginfo,rowsize=<span class="number">4</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#每行放rowsize个,计算可以放多少行</span></span><br><span class="line">    row=ceil(<span class="built_in">len</span>(glists)/rowsize)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#定义组图</span></span><br><span class="line">    plt.subplots(row,rowsize,figsize=(<span class="number">15</span>,<span class="number">3</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#开始画图</span></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(glists)):</span><br><span class="line">        <span class="comment">#定义子图</span></span><br><span class="line">        plt.subplot(row,rowsize,ind+<span class="number">1</span>)</span><br><span class="line">        nx.draw(glists[ind],with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#设置图片</span></span><br><span class="line">        plt.title(ginfo[ind],fontproperties=myfont)</span><br><span class="line">        plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">        plt.xticks([])</span><br><span class="line">        plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加单个节点</span></span><br><span class="line">G1=nx.Graph()</span><br><span class="line">G1.add_node(<span class="number">1</span>)</span><br><span class="line">G1.add_node(<span class="string">&quot;spam&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加一组节点</span></span><br><span class="line">G2=nx.Graph()</span><br><span class="line">G2.add_nodes_from([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">G2.add_nodes_from(<span class="string">&quot;spam&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用生成器</span></span><br><span class="line">G3=nx.Graph()</span><br><span class="line">H = nx.path_graph(<span class="number">10</span>)</span><br><span class="line">G3.add_nodes_from(H)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意:G1.add_nodes_from(H)表示用H中的节点表示G1这个graph,如果要往G1这个graph添加H这个graph,形成graph中的graph,可以使用以下命令</span></span><br><span class="line">G4= nx.Graph()</span><br><span class="line">G4.add_node(<span class="number">1</span>)</span><br><span class="line">G4.add_node(H)</span><br><span class="line"></span><br><span class="line">glists=[G1,G2,G3,G4]</span><br><span class="line">ginfo=[<span class="string">&#x27;添加单个节点&#x27;</span>,<span class="string">&#x27;添加一组节点&#x27;</span>,<span class="string">&#x27;使用生成器&#x27;</span>,<span class="string">&#x27;添加子图&#x27;</span>]</span><br><span class="line">ShowGraph(glists,ginfo)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549143986.png" alt="png" title="给graph添加节点" /></p>
<h1 id="给graph添加边"><a class="markdownIt-Anchor" href="#给graph添加边"></a> 给graph添加边</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除前面的graph</span></span><br><span class="line">G1.clear()</span><br><span class="line">G2.clear()</span><br><span class="line">G3.clear()</span><br><span class="line">G4.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加单边</span></span><br><span class="line">G1=nx.Graph()</span><br><span class="line">G1.add_edge(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">G1.add_edge(<span class="number">3</span>, <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加一组边</span></span><br><span class="line">G2=nx.Graph()</span><br><span class="line">e=(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">G2.add_edge(*e)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加多组边</span></span><br><span class="line">G3=nx.Graph()</span><br><span class="line">G3.add_edges_from([(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">4</span>,<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用边生成器</span></span><br><span class="line">G4= nx.Graph()</span><br><span class="line">H = nx.path_graph(<span class="number">10</span>)</span><br><span class="line">G4.add_edges_from(H.edges)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加一组有权边</span></span><br><span class="line">G5=nx.Graph()</span><br><span class="line">G5.add_weighted_edges_from([(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">5.0</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">3.0</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1.0</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">7.3</span>)])  <span class="comment">#边上权重显示看设置graph信息-&gt;指定边属性</span></span><br><span class="line"></span><br><span class="line">glists=[G1,G2,G3,G4,G5]</span><br><span class="line">ginfo=[<span class="string">&#x27;添加单边&#x27;</span>,<span class="string">&#x27;添加一组边&#x27;</span>,<span class="string">&#x27;添加多组边&#x27;</span>,<span class="string">&#x27;使用边生成器&#x27;</span>,<span class="string">&#x27;添加一组有权边&#x27;</span>]</span><br><span class="line">ShowGraph(glists,ginfo,rowsize=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549143993.png" alt="png" title="给graph添加边" /></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(2)-graph生成器</title>
    <url>/2018/09/15/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(2)-graph%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<p>本节主要讲解如何快速使用内置的方法生成graph,官方的文档在<a href="https://networkx.github.io/documentation/stable/reference/generators.html">这里</a>,里面包含了networkX的所有graph生成器,下面的内容只是我节选的内容,并将graph画出来而已.</p>
<a id="more"></a>
<p>声明,文中重复使用了以下代码块 ,现在统一注释在这里:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplot(<span class="number">221</span>)  <span class="comment">#生成2*2的组图,并且当前子图在2*2矩阵的第一个位置.第二个位置是222</span></span><br><span class="line">plt.title(<span class="string">&#x27;complete_graph&#x27;</span>) <span class="comment">#子图的标题</span></span><br><span class="line">nx.draw(G, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>) <span class="comment">#将graph画出来</span></span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>) <span class="comment">#需要坐标轴,以便框住graph</span></span><br><span class="line">plt.xticks([]) <span class="comment">#横坐标不需要刻度</span></span><br><span class="line">plt.yticks([]) <span class="comment">#纵坐标不需要刻度</span></span><br></pre></td></tr></table></figure>
<p>注意如果代码出现找不库,请返回第一个教程,把库文件导入.</p>
<h1 id="生成graph"><a class="markdownIt-Anchor" href="#生成graph"></a> 生成graph</h1>
<h2 id="小图图集的生成器"><a class="markdownIt-Anchor" href="#小图图集的生成器"></a> 小图图集的生成器</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#graph_atlas的图已经被定义,只需要按标号取出来就可以,下面将前10个取出来</span></span><br><span class="line">plt.subplots(<span class="number">2</span>,<span class="number">5</span>,figsize=(<span class="number">15</span>,<span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> ind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    G.clear()</span><br><span class="line">    </span><br><span class="line">    G=nx.graph_atlas(ind)</span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">5</span>,ind+<span class="number">1</span>)</span><br><span class="line">    nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#下面是设置图片</span></span><br><span class="line">    plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;graph_atlas_%s&#x27;</span>%ind)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549009214.png" alt="png" title="小图图集的生成器" /></p>
<h2 id="调用函数生成经典的graph"><a class="markdownIt-Anchor" href="#调用函数生成经典的graph"></a> 调用函数生成经典的graph</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplots(<span class="number">2</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">K_5 = nx.complete_graph(<span class="number">5</span>)</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;complete_graph&#x27;</span>)</span><br><span class="line">nx.draw(K_5, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">K_3_5 = nx.complete_bipartite_graph(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;complete_bipartite_graph&#x27;</span>)</span><br><span class="line">nx.draw(K_3_5, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">barbell = nx.barbell_graph(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;barbell_graph&#x27;</span>)</span><br><span class="line">nx.draw(barbell, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">lollipop = nx.lollipop_graph(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;lollipop_graph&#x27;</span>)</span><br><span class="line">nx.draw(lollipop, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549009226.png" alt="png" title="经典的graph" /></p>
<h2 id="格子graph"><a class="markdownIt-Anchor" href="#格子graph"></a> 格子graph</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G.clear()</span><br><span class="line"></span><br><span class="line">plt.subplots(<span class="number">2</span>,<span class="number">3</span>,figsize=(<span class="number">15</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment">#二维网格图</span></span><br><span class="line">G=nx.grid_2d_graph(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;grid_2d_graph&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#n维网格图</span></span><br><span class="line">grid_graph = nx.grid_graph(dim=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">nx.draw(grid_graph,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;grid_graph&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#m×n的六角形格子图。</span></span><br><span class="line">G=nx.hexagonal_lattice_graph(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;hexagonal_lattice_graph&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#n维超立方体图形。</span></span><br><span class="line">G=nx.hypercube_graph(<span class="number">3</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;hypercube_graph&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#三角格子图</span></span><br><span class="line">G=nx.triangular_lattice_graph(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;hypercube_graph&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549009241.png" alt="png" title="格子graph" /></p>
<h2 id="各种已经被命名的小graph"><a class="markdownIt-Anchor" href="#各种已经被命名的小graph"></a> 各种已经被命名的小graph</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplots(<span class="number">2</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">petersen = nx.petersen_graph()</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;petersen_graph&#x27;</span>)</span><br><span class="line">nx.draw(petersen, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">tutte = nx.tutte_graph()</span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;tutte_graph&#x27;</span>)</span><br><span class="line">nx.draw(tutte, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">maze = nx.sedgewick_maze_graph()</span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;sedgewick_maze_graph&#x27;</span>)</span><br><span class="line">nx.draw(maze, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">tet = nx.tetrahedral_graph()</span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;tetrahedral_graph&#x27;</span>)</span><br><span class="line">nx.draw(tet, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549009237.png" alt="png" title="已经被命名的小graph" /></p>
<h2 id="使用随机graph生成器"><a class="markdownIt-Anchor" href="#使用随机graph生成器"></a> 使用随机graph生成器</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplots(<span class="number">2</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">er = nx.erdos_renyi_graph(<span class="number">10</span>, <span class="number">0.15</span>)</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;erdos_renyi_graph&#x27;</span>)</span><br><span class="line">nx.draw(er, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">ws = nx.watts_strogatz_graph(<span class="number">30</span>, <span class="number">3</span>, <span class="number">0.1</span>)</span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;watts_strogatz_graph&#x27;</span>)</span><br><span class="line">nx.draw(ws, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">ba = nx.barabasi_albert_graph(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;barabasi_albert_graph&#x27;</span>)</span><br><span class="line">nx.draw(ba, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">red = nx.random_lobster(<span class="number">10</span>, <span class="number">0.9</span>, <span class="number">0.9</span>)</span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;random_lobster&#x27;</span>)</span><br><span class="line">nx.draw(red, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549009238.png" alt="png" title="随机graph生成器" /></p>
<h2 id="社交网络"><a class="markdownIt-Anchor" href="#社交网络"></a> 社交网络</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplots(<span class="number">2</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回Zachary的空手道俱乐部图。</span></span><br><span class="line">G.clear()</span><br><span class="line">G = nx.karate_club_graph()</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;karate_club_graph&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#戴维斯南方女性社交网络。</span></span><br><span class="line">G.clear()</span><br><span class="line">G = nx.davis_southern_women_graph()</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;davis_southern_women_graph&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549009245.png" alt="png" title="社交网络" /></p>
<h2 id="社区"><a class="markdownIt-Anchor" href="#社区"></a> 社区</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplots(<span class="number">2</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">er = nx.caveman_graph(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;caveman_graph&#x27;</span>)</span><br><span class="line">nx.draw(er, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">ws = nx.random_partition_graph([<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>],<span class="number">.25</span>,<span class="number">.01</span>)</span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;random_partition_graph&#x27;</span>)</span><br><span class="line">nx.draw(ws, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">ba = nx.ring_of_cliques(<span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;ring_of_cliques&#x27;</span>)</span><br><span class="line">nx.draw(ba, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">red = nx.windmill_graph(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;windmill_graph&#x27;</span>)</span><br><span class="line">nx.draw(red, with_labels=<span class="literal">True</span>, font_weight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549009239.png" alt="png" title="社区" /></p>
<h2 id="树"><a class="markdownIt-Anchor" href="#树"></a> 树</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回随机树</span></span><br><span class="line">G.clear()</span><br><span class="line">G = nx.random_tree(<span class="number">10</span>)</span><br><span class="line">nx.draw(G,with_labels=<span class="literal">True</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;random_tree&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613549009240.png" alt="png" title="树" /></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>NetworkX系列教程(1)-创建graph</title>
    <url>/2018/09/10/NetworkX%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B(1)-%E5%88%9B%E5%BB%BAgraph/</url>
    <content><![CDATA[<p>研究中经常涉及到<code>图论</code>的相关知识,而且常常面对某些术语时,根本不知道在说什么.前不久接触了<strong>NetworkX</strong>这个graph处理工具,发现这个工具已经解决绝大部分的<code>图论</code>问题(也许只是我自己认为的,没有证据证明),所以把这个工具的使用学习下,顺便学习<code>图论</code>的相关知识.</p>
<p><strong>NetworkX</strong>本来是有官方文档的,花时间去学也是可以的,我这里把认为重要的整理出来.这些内容会分几次发布,做成一个系列使用教程.</p>
<a id="more"></a>
<p><strong>系统环境</strong>:</p>
<blockquote>
<p>linuxmint 18.3<br />
python 3.5.2<br />
numpy                             1.14.3<br />
matplotlib                        1.5.1<br />
networkx                          2.1</p>
</blockquote>
<p><strong>全文注意事项</strong>:</p>
<blockquote>
<p>1.为了方便,graph我有时候会称为<code>图</code>,这时候不要将这个和图片混淆了.<br />
2.代码中会频繁使用G.clear(),这是在画新的graph之前,先清空原先的graph<br />
3.matplotlib包不能显示<code>平行边</code>,<code>自循环</code>这类的边,所以需要借助pydot包来显示,不过一般使用matplotlib来显示</p>
</blockquote>
<h1 id="创建一个graph"><a class="markdownIt-Anchor" href="#创建一个graph"></a> 创建一个Graph</h1>
<p><strong>例子:</strong><br />
下面涉及的graph如果不是特别需要,我将使用<code>图1</code>这个手动创建的graph,这个graph有双向边,有孤岛节点,有平行边,有自循环</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548771706.png" alt="图1 例子图" title="图1 例子图" /></p>
<h2 id="导入相应包定义graph"><a class="markdownIt-Anchor" href="#导入相应包定义graph"></a> 导入相应包,定义graph</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入相应的包</span></span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> networkx.drawing.nx_pydot <span class="keyword">import</span> to_pydot</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> *  </span><br><span class="line"></span><br><span class="line"><span class="comment">#定义自定义字体，文件名从1.b查看系统中文字体中来,这是Linux字体路径,windows系统的字体路径自查</span></span><br><span class="line">myfont = FontProperties(fname=<span class="string">&#x27;/usr/share/fonts/truetype/wqy/wqy-zenhei.ttc&#x27;</span>)  </span><br><span class="line"><span class="comment">#解决负号&#x27;-&#x27;显示为方块的问题  </span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#定义图的节点和边</span></span><br><span class="line">nodes=[<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">edges=[(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">7</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">6</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">0.5</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">0.5</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">0.5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#用于显示图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ShowGraph</span>(<span class="params">G</span>):</span></span><br><span class="line">    <span class="comment">#使用pydot保存图片</span></span><br><span class="line">    P=to_pydot(G)                                                               </span><br><span class="line">    P.write_jpeg(<span class="string">&#x27;pydot.png&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#使用matplotlib保存图片</span></span><br><span class="line">    pos=nx.shell_layout(G)</span><br><span class="line">    nx.draw(G,pos,with_labels=<span class="literal">True</span>)</span><br><span class="line">    plt.savefig(<span class="string">&#x27;mat.png&#x27;</span>)</span><br><span class="line">    plt.close()  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#将前面两张图显示</span></span><br><span class="line">    plt.subplots(figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br><span class="line">    <span class="comment">#plt.suptitle(&#x27;Diffrent&#x27;)</span></span><br><span class="line">    <span class="comment">#载入matplotlib的图片</span></span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;matplotlib&#x27;</span>)</span><br><span class="line">    plt.imshow(Image.<span class="built_in">open</span>(<span class="string">&#x27;mat.png&#x27;</span>))</span><br><span class="line">    <span class="comment">#plt.axis(&#x27;off&#x27;)</span></span><br><span class="line">    <span class="comment">#去掉坐标刻度</span></span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#载入pydot的图片</span></span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;pydot&#x27;</span>)</span><br><span class="line">    plt.imshow(Image.<span class="built_in">open</span>(<span class="string">&#x27;pydot.png&#x27;</span>))</span><br><span class="line">    <span class="comment">#plt.axis(&#x27;off&#x27;)</span></span><br><span class="line">    <span class="comment">#去掉坐标刻度</span></span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#显示图片</span></span><br><span class="line">    plt.show() </span><br></pre></td></tr></table></figure>
<h2 id="有自循环的无向图"><a class="markdownIt-Anchor" href="#有自循环的无向图"></a> 有自循环的无向图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义无向图</span></span><br><span class="line">G = nx.Graph()</span><br><span class="line"></span><br><span class="line"><span class="comment">#往图添加节点和边</span></span><br><span class="line">G.add_nodes_from(nodes)</span><br><span class="line">G.add_weighted_edges_from(edges)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">ShowGraph(G)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548771707.png" alt="png" title="有自循环的无向图" /></p>
<h2 id="有自循环的有向图"><a class="markdownIt-Anchor" href="#有自循环的有向图"></a> 有自循环的有向图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#清除前面的无向图</span></span><br><span class="line">G.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义有向图</span></span><br><span class="line">G = nx.DiGraph()</span><br><span class="line"><span class="comment">#添加节点和边</span></span><br><span class="line">G.add_nodes_from(nodes)</span><br><span class="line">G.add_weighted_edges_from(edges)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">ShowGraph(G)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548771708.png" alt="png" title="有自循环的有向图" /></p>
<h2 id="有自循环和平行边的无向图"><a class="markdownIt-Anchor" href="#有自循环和平行边的无向图"></a> 有自循环和平行边的无向图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#清除前面的无向图</span></span><br><span class="line">G.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义带平行边无向图</span></span><br><span class="line">G = nx.MultiGraph()</span><br><span class="line"><span class="comment">#添加节点和边</span></span><br><span class="line">G.add_nodes_from(nodes)</span><br><span class="line">G.add_weighted_edges_from(edges)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">ShowGraph(G)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548771709.png" alt="png" title="有自循环和平行边的无向图" /></p>
<h2 id="有自循环和平行边的有向图"><a class="markdownIt-Anchor" href="#有自循环和平行边的有向图"></a> 有自循环和平行边的有向图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#清除前面的无向图</span></span><br><span class="line">G.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义带平行边有向图</span></span><br><span class="line">G = nx.MultiDiGraph()</span><br><span class="line"><span class="comment">#添加节点和边</span></span><br><span class="line">G.add_nodes_from(nodes)</span><br><span class="line">G.add_weighted_edges_from(edges)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">ShowGraph(G)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548771711.png" alt="png" title="有自循环和平行边的有向图" /></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>NetworkX</tag>
      </tags>
  </entry>
  <entry>
    <title>lixuxmint系统定制与配置（6）-个性化配置</title>
    <url>/2018/07/13/lixuxmint%E7%B3%BB%E7%BB%9F%E5%AE%9A%E5%88%B6%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%886%EF%BC%89-%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>在系统安装完毕，基础的应用安装也弄完后，最后是按照自己的使用习惯配置系统使用环境，本文主要基于<code>linuxmint</code>的系统特性进行配置，主要分为以下几个部分对系统进行配置。</p>
<a id="more"></a>
<h1 id="系统环境配置"><a class="markdownIt-Anchor" href="#系统环境配置"></a> 系统环境配置</h1>
<h2 id="桌面布局"><a class="markdownIt-Anchor" href="#桌面布局"></a> 桌面布局</h2>
<h3 id="整体布局"><a class="markdownIt-Anchor" href="#整体布局"></a> 整体布局</h3>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1566053785015.png" alt="桌面布局" /></p>
<h3 id="桌面控件"><a class="markdownIt-Anchor" href="#桌面控件"></a> 桌面控件</h3>
<h4 id="系统负载"><a class="markdownIt-Anchor" href="#系统负载"></a> 系统负载</h4>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485314126.png" alt="系统负载" /></p>
<h4 id="网络速度"><a class="markdownIt-Anchor" href="#网络速度"></a> 网络速度</h4>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485314121.png" alt="网络速度" /></p>
<h4 id="天气"><a class="markdownIt-Anchor" href="#天气"></a> 天气</h4>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485314122.png" alt="天气" /></p>
<h4 id="快捷键-快速锁屏"><a class="markdownIt-Anchor" href="#快捷键-快速锁屏"></a> 快捷键-快速锁屏</h4>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485314123.png" alt="快速锁屏" /></p>
<h1 id="应用配置"><a class="markdownIt-Anchor" href="#应用配置"></a> 应用配置</h1>
<p>firfox</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485314124.png" alt="插件展示" /></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>插件名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>VivaldiFox</td>
<td>网页标签颜色随内容变化</td>
</tr>
<tr>
<td>2</td>
<td>SwitchyOmegaα</td>
<td>快速切换浏览器是否代理</td>
</tr>
<tr>
<td>3</td>
<td>Anki 划词制卡助手</td>
<td>收集网页陌生单词</td>
</tr>
<tr>
<td>4</td>
<td>夜间助手</td>
<td>调节网页背景色</td>
</tr>
<tr>
<td>5</td>
<td>Textmarker</td>
<td>给网页文字作标记（加粗，上色）</td>
</tr>
<tr>
<td>6</td>
<td>Evernote Web Clipper</td>
<td>印象笔记插件-裁剪网页</td>
</tr>
</tbody>
</table>
<p>rime<br />
选择架构fcitx<br />
设置输入法<br />
美化输入法</p>
<p>小书匠<br />
帐号登录<br />
博客发布设置<br />
图床设置</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485314125.png" alt="图床设置" /></p>
<p>Calibre<br />
存储目录设置<br />
书库导入<br />
插件安装</p>
<p>坚果云<br />
帐号登录<br />
同步目录设置</p>
<p>Zotero<br />
存储目录设置</p>
<p>Shutter<br />
基础配置<br />
安装“编辑扩展”</p>
<p>VLC</p>
<p>Anki</p>
<p>Godenldict</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linuxmint系统定制与配置（5）-效率配置</title>
    <url>/2018/07/13/linuxmint%E7%B3%BB%E7%BB%9F%E5%AE%9A%E5%88%B6%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%885%EF%BC%89-%E6%95%88%E7%8E%87%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本文针对zsh终端及登录服务器等常用操作进行快捷配置，提高日常工作效率</p>
<a id="more"></a>
<h1 id="zsh安装与配置"><a class="markdownIt-Anchor" href="#zsh安装与配置"></a> zsh安装与配置</h1>
<h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2>
<h3 id="检查当前的终端类型"><a class="markdownIt-Anchor" href="#检查当前的终端类型"></a> 检查当前的终端类型</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>
<p>一般情况下，系统会默认安装bash,所以会得到以下输出：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485022428.png" alt="检查终端类型" /></p>
<h3 id="安装zsh"><a class="markdownIt-Anchor" href="#安装zsh"></a> 安装zsh</h3>
<p>(1)安装zsh到系统</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure>
<p>(2)设置zsh为默认的终端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure>
<p>(3)检查设置是否成功<br />
首先是注销系统，重新登录，然后在终端使用<code>echo $SHELL</code>检查当前使用终端，如果输出是包含zsh文字，表示安装成功。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485022529.png" alt="检查终端设置是否成功" /></p>
<h2 id="美化zsh"><a class="markdownIt-Anchor" href="#美化zsh"></a> 美化zsh</h2>
<p>从上面的图看出，未美化前的zsh输出没有任何颜色区分，这样的zsh不是提高我们效率的zsh.<br />
这时候就需要<code>Oh My Zsh</code>这个框架来管理zsh的配置。</p>
<p>安装<code>Oh My Zsh</code>可以使用以下两种方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span></span><br></pre></td></tr></table></figure>
<p>安装完成后，可以通过编辑<code>~/.zshrc</code>的这个文件来对zsh来进行配置（插件，主题等）。下面是通过配置这个文件来提高工作效率的过程,主题和插件我就使用默认的，没有深入折腾。</p>
<h2 id="配置zsh"><a class="markdownIt-Anchor" href="#配置zsh"></a> 配置zsh</h2>
<h3 id="别名设置"><a class="markdownIt-Anchor" href="#别名设置"></a> 别名设置</h3>
<p>别名，即是通过将一个长命令映射到更短的特殊字符，终端输入该特殊字符相当于输入特殊字符。</p>
<p><strong>解压相关</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> -s gz=<span class="string">&#x27;tar -xzvf&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> -s tgz=<span class="string">&#x27;tar -xzvf&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> -s zip=<span class="string">&#x27;unzip&#x27;</span> </span><br><span class="line"><span class="built_in">alias</span> -s bz2=<span class="string">&#x27;tar -xjvf&#x27;</span> </span><br></pre></td></tr></table></figure>
<p><strong>文档编辑相关</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> -s php=vim</span><br><span class="line"><span class="built_in">alias</span> -s py=vim </span><br><span class="line"><span class="built_in">alias</span> -s rb=vim </span><br><span class="line"><span class="built_in">alias</span> -s html=vim</span><br></pre></td></tr></table></figure>
<p>注：需提前安装vim</p>
<p><strong>远程登录服务器与端口映射</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> labser=<span class="string">&#x27;ssh tom@172.xxx.xxx.xxx&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> sshl8888=<span class="string">&#x27;ssh tom@172.xxx.xxx.xxx -L 8888:localhost:8888&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> sshl8889=<span class="string">&#x27;ssh tom@172.xxx.xxx.xxx -L 8889:localhost:8889&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> sshl8890=<span class="string">&#x27;ssh tom@172.xxx.xxx.xxx -L 8890:localhost:8890&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>通配符设置</strong><br />
使用zsh后，有些时候无法使用通配符，需要在配置文件中加入下面一行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setopt</span> nonomatch</span><br></pre></td></tr></table></figure>
<p>把以上配置信息拷贝到<code>~/.zshrc</code>文件末尾，然后使用<code>source ~/.zshrc</code>使之生效。</p>
<hr />
<h1 id="自动登录服务器"><a class="markdownIt-Anchor" href="#自动登录服务器"></a> 自动登录服务器</h1>
<p>每次远程登录服务器，需要手动敲命令和输入密码，如如果要连接多个窗口或者远程拷贝文件，效率就非常低下了。这里使用zsh的别名，配合使用xxxx,达到一个很短的命令登录到服务器内。</p>
<p>ssh服务有两种验证用户登录的方式，一种是基于密码口令的认证，一种是基于密钥的认证。一般的手动登录属于密码口令登录，</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485022539.png" alt="密码口令登录服务器" /></p>
<p>下面是ssh基于密钥认证过程图示</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485022530.png" alt="ssh免密登录" /></p>
<p>下面是生成和分配密钥对的过程：</p>
<p><strong>生成密钥</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p><strong>复制公钥到服务器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub tom@172.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>
<p>结合上面的别名，比如可以直接输入<code>labser</code>就登录到服务器来，快的中间不到1s的功夫，大大提高工作效率；拷贝文件时，没有做别名设置仍然需要输入原命令，但是可以免密拷贝。</p>
<hr />
<h1 id="快捷键配置"><a class="markdownIt-Anchor" href="#快捷键配置"></a> 快捷键配置</h1>
<p>Linuxmint设置里面的<code>键盘</code>项，有一栏快捷键，里面可以设置自定义快捷键。</p>
<p><strong>截图快捷键</strong><br />
我使用<code>Shutter</code>进行截图，每次需要截图，使用快捷键，调出Shutter的选区截图（命令是shutter -s）,所以我的设置如图。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485022536.png" alt="自定义快捷键" /></p>
<p><strong>锁屏</strong><br />
平常喜欢使用super+L进行锁屏，所以这样设置快捷键。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485022537.png" alt="锁屏快捷键" /></p>
<p><strong>终端新开一个tab</strong><br />
打开终端后，喜欢使用super+T在同一终端下新开一个页面。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613485022538.png" alt="终端新开一个tab" /></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>lixuxmint系统定制与配置（4）-应用安装</title>
    <url>/2018/07/13/lixuxmint%E7%B3%BB%E7%BB%9F%E5%AE%9A%E5%88%B6%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%884%EF%BC%89-%E5%BA%94%E7%94%A8%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本文针对列出目前linux上常用的软件，其实每个软件都有自己的个性化配置，以后有时间了，逐个记录下来。编程主力环境是Python,编辑器使用Jupyter,这个编辑器是在远程服务器启动，映射端口到本地来编辑。</p>
<a id="more"></a>
<p><strong>浏览器：</strong> 自带的firfox，Opear(我需要两个浏览器，一个浏览器用来浏览网页，一个用来编程)<br />
<strong>文档编辑器：</strong> 自带的libreoffice,自带的文本编辑器，Markdown编辑器（Typro）</p>
<p><strong>Pdf文档：</strong> FoxitReader<br />
<a href="https://www.foxitsoftware.cn/downloads/">https://www.foxitsoftware.cn/downloads/</a></p>
<p><strong>文献管理：</strong> Zotero<br />
<a href="https://www.zotero.org/">https://www.zotero.org/</a></p>
<p><strong>文档备份：</strong> 坚果云<br />
（下载&amp;Python3运行环境）<a href="https://www.jianguoyun.com/s/downloads/linux">https://www.jianguoyun.com/s/downloads/linux</a><br />
登录出现链接错误提示：<a href="https://blog.csdn.net/jasonzhoujx/article/details/80640566">https://blog.csdn.net/jasonzhoujx/article/details/80640566</a></p>
<p><strong>字典：</strong> goldendict<br />
安装/设置/添加字典</p>
<p><strong>版本控制：</strong> Git</p>
<p><strong>截图：</strong> shutter<br />
shutter内图片编辑器安装看下面这篇文章<br />
<a href="https://www.linuxidc.com/Linux/2018-04/151911.htm">Ubuntu 18.04中的Shutter禁用了“编辑”选项解决-Linux公社</a></p>
<p><strong>gif录屏：</strong> peak</p>
<p>**思维导图：**Xmind<br />
<a href="https://www.xmind.cn/">https://www.xmind.cn/</a><br />
<a href="https://my.oschina.net/2012/blog/1590732">https://my.oschina.net/2012/blog/1590732</a></p>
<p>KX上网：shadowsocks-gui<br />
<a href="https://github.com/shadowsocks/shadowsocks-qt5/releases">https://github.com/shadowsocks/shadowsocks-qt5/releases</a></p>
<p><strong>音乐：</strong> 网易云音乐<br />
到<a href="http://music.163.com/#/download">这里</a>下载Linux版本，然后使用以下命令安装。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i netease-cloud-music_1<span class="number">.1</span><span class="number">.0</span>_amd64_ubuntu.deb</span><br></pre></td></tr></table></figure>
<p>安装完成后，如果<code>遇到点击了，却没有启动</code>的问题，在这个文件<code>/usr/share/applications/netease-cloud-music.desktop</code>的exec添加<code>--no-sandbox</code>，然后<mark>重启</mark>即解决。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613484442233.png" alt="修改后的文件" /></p>
<p><strong>视频：</strong> 使用浏览器观看</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linuxmint系统定制与配置（3）-字体</title>
    <url>/2018/07/13/linuxmint%E7%B3%BB%E7%BB%9F%E5%AE%9A%E5%88%B6%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%883%EF%BC%89-%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<p>系统中自带的字体实在太难看了，看起来不清晰，不明确，特别是终端字体比较难看，正所谓有一个好的字体，可以带来好心情，并提高工作与效率。</p>
<a id="more"></a>
<h1 id="常用中文字体"><a class="markdownIt-Anchor" href="#常用中文字体"></a> 常用中文字体</h1>
<p>文泉驿微黑,微软雅黑,思源黑体</p>
<h1 id="字体安装"><a class="markdownIt-Anchor" href="#字体安装"></a> 字体安装</h1>
<h2 id="检查已安装字体"><a class="markdownIt-Anchor" href="#检查已安装字体"></a> 检查已安装字体</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fc-list             <span class="comment">#检查已安装的所有字体</span></span><br><span class="line">fc-list :lang=zh    <span class="comment">#只检查中文</span></span><br></pre></td></tr></table></figure>
<h2 id="安装字体"><a class="markdownIt-Anchor" href="#安装字体"></a> 安装字体</h2>
<p>安装字体提供在线和本地两种方法，一般安装完字体后，还需要手动建立字体缓存。</p>
<h3 id="字体安装-2"><a class="markdownIt-Anchor" href="#字体安装-2"></a> 字体安装</h3>
<p><strong>（1）在线安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ttf-wqy-microhei  <span class="comment">#文泉驿-微米黑</span></span><br><span class="line">sudo apt-get install ttf-wqy-zenhei   <span class="comment">#文泉驿-正黑</span></span><br><span class="line">sudo apt-get install xfonts-wqy     <span class="comment">#文泉驿-点阵宋体</span></span><br></pre></td></tr></table></figure>
<p><strong>（2）本地安装</strong><br />
现拿到字体 雅黑：msyh.ttf ，把它拷贝到两个位置(<code>~/.fonts</code>和<code>/usr/share/fonts/</code>)后，再授予权限即完成安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv msyh.ttf ~/.fonts         <span class="comment">#拷贝到相应目录</span></span><br><span class="line">mv msyh.ttf /usr/share/fonts/zh_CN   <span class="comment">#拷贝到相应目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.fonts;chmod 766 msyh.ttf     <span class="comment">#授予权限</span></span><br><span class="line"><span class="built_in">cd</span> ~/.config//usr/share/fonts/zh_CN;chmod 766 msyh.ttf   <span class="comment">#授予权限</span></span><br></pre></td></tr></table></figure>
<p><strong>思源黑体</strong>需要下载字体文件进行安装，里面简体中文的就只有几个，不知道为什么不分开，而是要去下载<br />
1G多的文件，我把字体下载下来了，并把开源字体存储在：链接: &gt;<a href="https://pan.baidu.com/s/1eGeTsOG2m0b2cs_-s-4T5A">https://pan.baidu.com/s/1eGeTsOG2m0b2cs_-s-4T5A</a> 密码: krt7<br />
下载下来后，字体文件直接被<code>字体管理器</code>识别了，直接点击安装即可。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613484243866.png" alt="使用字体管理器进行字体安装" /></p>
<h3 id="更新字体缓存"><a class="markdownIt-Anchor" href="#更新字体缓存"></a> 更新字体缓存</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfontscale</span><br><span class="line">mkfontdir</span><br><span class="line">fc-cache -fv  </span><br><span class="line"><span class="comment">#通常复制字体进~/.fonts就会自动刷新字体，如果没有，用这个命令，如果复制进的是/usr/share/fonts/，用sudo fc-cache -fv</span></span><br></pre></td></tr></table></figure>
<p>经过这两个步骤完成字体的安装，可以用<code>fc-list</code>查看是否更新字体到字体库中，也可以在选择字体时查看。</p>
<h1 id="字体环境配置"><a class="markdownIt-Anchor" href="#字体环境配置"></a> 字体环境配置</h1>
<p>在linuxmint的环境中，可以在设置-&gt;字体找到字体设置界面，其他Linux系统自查。我的设置如下，由于我是经常要面对电脑的，所以喜欢把自己放大一点，变黑明显点。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613484243886.png" alt="字体设置" /></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linuxmint系统定制与配置（2）-输入法</title>
    <url>/2018/07/13/linuxmint%E7%B3%BB%E7%BB%9F%E5%AE%9A%E5%88%B6%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%882%EF%BC%89-%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<p>本文是linuxmint安装完成的第二个设置，即安装rime输入法，并进行个性化配置，RIME的官网在<a href="https://rime.im/">这里</a></p>
<a id="more"></a>
<h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1>
<p>刚开始是使用ibus-rime,后来使用过程感觉不舒服，就换回fcitx-rime。使用以下命令安装fcitx-rime</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt install fcitx fcitx-rime</span><br></pre></td></tr></table></figure>
<h1 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h1>
<p>我现在基本使用的是默认配置，不过我拼音不太准确，所以我喜欢使用<code>地球注音</code>，这样打出的字能看到拼音。感觉很不错。基本上使用过程是下面这样的：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613474558167.png" alt="fcitx-rime使用" /></p>
<p><strong>配置过程</strong><br />
1.在输入法中添加rime<br />
2.切换到rime后，按下F4进入进入下面两个配置过程</p>
<p>3.默认的配置已经很好用了，本来想自定义一下界面，发现相关资料很少，所以就不折腾了。首先选择地球注音。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613474558168.png" alt="选择地球注音" /></p>
<p>注：如果候选项无<code>地球拼音</code>，使用下面命令进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install librime-data-terra-pinyin</span><br></pre></td></tr></table></figure>
<p>并在<code>/home/wu/.config/fcitx/rime/default.yaml</code>中添加下’- schema: terra_pinyin’(引号不加)</p>
<p>其次是选择<code>中/汉/半</code>，然后选择<code>繁体字-&gt;简体字</code></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613474558169.png" alt="繁体字转简体字" /></p>
<p>注：选字列表竖排显示是在fcitx设置中选择的</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613474558170.png" alt="选字列表竖排显示" /></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linuxmint系统定制与配置（1）-系统初始配置</title>
    <url>/2018/07/13/linuxmint%E7%B3%BB%E7%BB%9F%E5%AE%9A%E5%88%B6%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%881%EF%BC%89-%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>经常安装新的系统，每次安装完都得去搜索一边如何将系统部署为之前的环境，不仅耗费时间，还不一定能弄回之前的环境，现在把从<code>裸机</code>-&gt;到<code>工作环境</code>的系统定制及配置过程记录下来，期间的配置文件尽量记录下来，以便后面直接使用</p>
<a id="more"></a>
<p>本人的工作环境自评：现在是一名研究生，爱琢磨新的技术，linux系统linuxmint）上的主要是学习，做科研，些许的休闲（听歌，浏览器看视频）.</p>
<h1 id="裸机第一次启动该干什么"><a class="markdownIt-Anchor" href="#裸机第一次启动该干什么"></a> 裸机第一次启动，该干什么？</h1>
<p>系统安装过程中我一般选择时Engshli，因为终端跳转目录时，如果文件名是中文名的，比较不方便，并且我觉得系统毕竟默认是英文的，安装时选择是英文，会不会导致后面系统使用会出现兼容问题（这个完全属于猜测，没有证实或没能证实）。总之，我觉得系统安装就用英文吧，后面第一次开机就该改语言，没影响什么。</p>
<h2 id="看开机引导"><a class="markdownIt-Anchor" href="#看开机引导"></a> 看开机引导</h2>
<p>裸机启动，登录进去后看到第一个界面就是欢迎界面。在这个界面中可以快速配置一些必要的信息。从而开启你的Linux高效的工作方式。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613471971818.png" alt="开机欢迎界面" /></p>
<p><strong>系统快照</strong>： linuxmint19开始，可以随时备份系统快照。以后机器遇到什么不可以解决的问题时，利用这个快照，可以随时将系统重置会快照的系统。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613472335902.png" alt="创建系统快照" /></p>
<p><strong>驱动管理器</strong>： 主要是显卡的驱动可以在这里快速安装（注意：电脑需先联上互联网）</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613472335903.png" alt="系统驱动管理" /></p>
<p><strong>系统更新</strong>： 查看系统当前可用更新，这可能需要更新几次（注意：电脑需先联上互联网）</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613472335904.png" alt="更新" /></p>
<p>其他选项此时暂不设置。尤其需要注意的是，如果联网安装过程过慢时，可以选择不安装，待下面设置了国内软件源后再更新。</p>
<h2 id="改系统语言"><a class="markdownIt-Anchor" href="#改系统语言"></a> 改系统语言</h2>
<p>欢迎向导看完之后，现在开始将系统设置为简体中文，中文界面可以方便后面的设置。在系统设置里找到<code>language</code>这一项，然后选择<code>Chinese，China UTF-8</code>，然后点击下面的应用到整个系统。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613472335910.png" alt="更改系统语言" /></p>
<p>更改系统语言需要重启才可以生效，现在就重启。<mark>这里注意了</mark>，重启选择文件目录语言时，必须选择保留原名字，这样是方便终端进行目录的调整，如果你改成中文，以后就知道怎么悲惨了。（如果很不幸你该了中文，那就把系统语言设置为英文再设置回中文）</p>
<h2 id="改软件源"><a class="markdownIt-Anchor" href="#改软件源"></a> 改软件源</h2>
<p>重启后，开始更新软件源，因为以后免不了在线安装软件包和更新系统，但是直接使用官方的服务器更新可能比较慢，这时候我们需要将软件源设置为国内的。</p>
<p>在设置中找到<code>软件源</code>，依次点击<code>主要</code>和<code>基础</code>，点进去以后也不要立即选，等系统测试各个源的速度后，选择一个速度最快的当作软件源</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613472335915.png" alt="更换软件源" /></p>
<h2 id="更新系统"><a class="markdownIt-Anchor" href="#更新系统"></a> 更新系统</h2>
<p>如果在开机引导界面没有更新系统，现在换了软件源，可以更快更新软件了。现在就进入<code>更新管理器</code>进行更新，如果想使用终端进行更新，依次使用使用一下命令。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt uograde</span><br></pre></td></tr></table></figure>
<h2 id="重启系统"><a class="markdownIt-Anchor" href="#重启系统"></a> 重启系统</h2>
<p>至此，系统层面的设置已完成，下面是针对个人用户更加详细，个性化的设置了，现在开始重启系统，让前面的配置开始生效。（如果存储空间足够，可以在此时备份一个快照）。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>图论---算法篇</title>
    <url>/2018/07/03/%E5%9B%BE%E8%AE%BA---%E7%AE%97%E6%B3%95%E7%AF%87/</url>
    <content><![CDATA[<p>图论中的算法基本都是提出后,经过检验的.我就不讨论算法很基础的原理,只是从看懂一个算法的角度去学习.本着不花时间去重复别人优秀工作的原则,本文中很多部分引用了别人的工作,甚至是照搬过来,因为我觉得算法这东西已经类似<code>真理</code>,证明不需要你,你可以看得懂,别人也可以,只是表达方式不同,别人有优秀的表达方式,我为什么不用呢!</p>
<a id="more"></a>
<h1 id="算法类"><a class="markdownIt-Anchor" href="#算法类"></a> 算法类</h1>
<h2 id="戴克斯特拉算法da"><a class="markdownIt-Anchor" href="#戴克斯特拉算法da"></a> 戴克斯特拉算法(D.A)</h2>
<p><strong>描述:</strong> 又译<strong>迪杰斯特拉算法</strong>,使用了<code>广度优先搜索</code>解决赋权有向图或者无向图的单源最短路径问题，算法最终得到一个最短路径树。</p>
<p><strong>原理:</strong> 迪杰斯特拉算法主要特点是以起始点为中心向外层层扩展，直到扩展到终点为止.</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263619.jpg" alt="迪杰斯特拉算法算法图示" /></p>
<p>结合上图,详细解释迪杰斯特拉算法:<br />
通过维护一个两个集合来实现:</p>
<blockquote>
<p>1.一个集合内存储已经找到的最短距离及其路径(假设为D)<br />
2.另一个是未找到的最短距离的点到起始顶点的路径(假设为U)<br />
下面更新U的过程也是如此</p>
</blockquote>
<p>图示目标:寻找顶点1到所有顶点的最短路径.</p>
<p><strong>第一步:初始化D,U</strong><br />
初始节点到自身距离为0,直接初初始化到D集合,U集合维护顶点到初始节点1的距离和长度,根据上图,可初始化为以下两个集合.</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263622.png" alt="enter description here" title="初始化" /></p>
<p>注:  图中表示节点名称,每个集合记录距离和路径,路径中的数字也表示节点名称,空间不够,不标单引号了.</p>
<p>以下步骤是不断更新两个集合的过程:</p>
<blockquote>
<p>1.D根据U更新当前最短路径到自己(扩张过程)<br />
2.U根据新加入的节点更新自己(松弛过程)<br />
3.迭代以上过程,直到所有路径遍历完</p>
</blockquote>
<p>下面是各个迭代过程图示:</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263625.png" alt="第二步" /><br />
由前面的初始情况可知,与节点1直接相连接一共3个点,最近的点是2.把1与2的当前最短距离和路径加到集合D中,然后根据新的集合D,更新集合U的信息,更新的过程是:</p>
<blockquote>
<p>1.首先看看2节点的出边有那些,图中可以看到是:3,4<br />
2.节点1经过2节点到达上面两个节点与直接到达上面两个节点的距离比较,那个距离小就把信息更新到U集合中</p>
</blockquote>
<hr />
<!-- ![Diagram](./attachments/1529908444491.drawio.html) --->
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263629.png" alt="第三步" /></p>
<p>上一次迭代完成后,集合D有1,2两个点,这两个点能到达的点是6,3,4;广度遍历路径得到1到3个节点的3最近,将节点3填到D中,然后更新U.<br />
此时的广度遍历就是从1开始,可以经过2,最终到达3,4,6其中一个节点的路径.具体包括:</p>
<blockquote>
<p>a. 1-&gt;3<br />
b. 1-&gt;6<br />
c. 1-&gt;2-&gt;4</p>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263632.png" alt="第四步" /><br />
上一次迭代完成后,集合D有1,2,3三个点,这三个点能到达的点是6,4;广度遍历路径得到<code>1-&gt;3-&gt;6</code>这路径最短,将6更新到D后,更新U.</p>
<hr />
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263636.png" alt="第五步" /><br />
上一次迭代完成后,集合D有1,2,3,6四个点,这四个点能到达的点是5,4;广度遍历路径得到<code>1-&gt;3-&gt;4</code>这路径最短,将4更新到D后,更新U.</p>
<hr />
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263640.png" alt="第六步" /><br />
上一次迭代完成后,集合D有1,2,3,6,4五个点,这五个点能到达的点是5;广度遍历路径得到<code>1-&gt;3-&gt;6-&gt;5</code>这路径最短,将4更新到D后,更新U.</p>
<p>最终,节点1到各个节点的最短路径及其长度都保存在集合D中.</p>
<blockquote>
<p>注:迪杰斯特拉算法也可用于有向图最短路径查找,还有一个迪杰斯特拉的优化算法<code>双向的迪杰斯特拉</code>,改进的地方是从源点和终点同时广度优先搜索最短路径,总的来说双向的迪杰斯特拉比一般迪杰斯特拉更快.</p>
</blockquote>
<hr />
<h2 id="最短路径快速算法spfa"><a class="markdownIt-Anchor" href="#最短路径快速算法spfa"></a> 最短路径快速算法(SPFA)</h2>
<p><strong>描述:</strong><br />
SPFA算法是西南交通大学段凡丁于1994年发表的,是一个用于求解<mark>有向带权图单源最短路径</mark>的改良的贝尔曼-福特算法。这一算法被认为在随机的稀疏图上表现出色，并且<mark>极其适合带有负边权的图</mark>。 然而SPFA在最坏情况的时间复杂度与贝尔曼-福特算法相同，因此在非负边权的图中仍然最好使用戴克斯特拉算法。</p>
<p><strong>原理:</strong></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263732.png" alt="" /></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263846.png" alt="最短路径快速算法图示" /></p>
<p>声明:<br />
图片来源于:<a href="https://blog.csdn.net/xunalove/article/details/70045815">最快最好用的——spfa算法</a></p>
<hr />
<h2 id="弗洛伊德算法floyd-warshall"><a class="markdownIt-Anchor" href="#弗洛伊德算法floyd-warshall"></a> 弗洛伊德算法(Floyd-Warshall)</h2>
<p><strong>描述:</strong><br />
是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权（但不可存在负权回路）的最短路径问题，同时也被用于计算有向图的传递闭包.</p>
<p><strong>原理:</strong><br />
假设我有以下graph:</p>
<!-- ![Diagram](./attachments/1529980535179.drawio.html) -->
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263735.png" alt="演示graph" /></p>
<p>可以得到以下的邻接矩阵:</p>
<!--![Diagram](./attachments/1529981065032.drawio.html)-->
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263764.png" alt="graph的邻接矩阵" /></p>
<p>该邻接矩阵D记录了有向图中,直接可达节点之间的距离.<br />
下面就1-&gt;3的最短路径进行分析:</p>
<p>直接可达的路径权重为:9<br />
比这短的路径可能是1-&gt;X-&gt;3 (X是除1,3外的所有点中的一个或多个)</p>
<p><strong>假设X长度为1</strong>,X就是2,4,5其中一个值,1-&gt;X-&gt;3的路径长度小于9,在矩阵中就是D[1][x]+D[x][3]&lt;9(为了理解,假设矩阵从1开始编号).<br />
D[1][2]+D[2][3]=5+3=8&lt;9  更新最短路径长度<br />
D[1][4]+D[4][3]=∞+∞=∞<br />
D[1][5]+D[5][3]=∞+∞=∞</p>
<p><strong>假设X长度是2</strong>,X就是考虑顺序在2,4,5中任取两个.有以下情况<br />
D[1][2]+D[2][4]+D[4][3]=5+2+∞=∞<br />
D[1][4]+D[4][2]+D[2][3]=∞+∞+3=∞<br />
…剩下组合省略</p>
<p><strong>同理X长度为3时</strong>,有以下情况<br />
D[1][2]+D[2][4]+D[4][5]+D[5][3]=2+2+1+2=7&lt;8  更新<br />
…剩下组合省略</p>
<p>最后找到,1到3的最短路径是,1-&gt;2-&gt;4-&gt;5-&gt;3,最短距离为8,更新D矩阵得到:</p>
<!-- ![Diagram](./attachments/1530004137360.drawio.html) -->
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263765.png" alt="更新后D矩阵" /></p>
<p>在这个新的D上继续算其他节点之间的最短路径.当然,这在程序中就是简单遍历,其实这里X的长度就是1到3中间需要经过多少节点.所有节点遍历完成,得到graph内两两节点之间的最短距离.</p>
<hr />
<h2 id="克鲁斯卡尔算法ka"><a class="markdownIt-Anchor" href="#克鲁斯卡尔算法ka"></a> 克鲁斯卡尔算法(K.A)</h2>
<p><strong>描述:</strong><br />
一种用来查找最小生成树的算法，由Joseph Kruskal在1956年发表。用来解决同样问题的还有Prim算法和Boruvka算法等。三种算法都是贪心算法的应用。和Boruvka算法不同的地方是，Kruskal算法在图中存在相同权值的边时也有效。</p>
<p><strong>原理:</strong></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263848.gif" alt="克鲁斯卡尔算法算法图示" /></p>
<p>把所有边选出来,并按照权重进行排序,从权重最小边开始选择,每次选择一条边,每次选择的边不能与原来的边构成环,知道选择的边包含所有的节点.</p>
<hr />
<h2 id="普里姆算法pa"><a class="markdownIt-Anchor" href="#普里姆算法pa"></a> 普里姆算法(P.A)</h2>
<p><strong>描述:</strong><br />
图论中的一种算法，可在加权连通图里搜索最小生成树。意即由此算法搜索到的边子集所构成的树中，不但包括了连通图里的所有顶点，且其所有边的权值之和亦为最小。</p>
<p><strong>原理:</strong><br />
从单一顶点开始，普里姆算法按照以下步骤逐步扩大树中所含顶点的数目，直到遍及连通图的所有顶点。</p>
<blockquote>
<pre><code>输入：一个加权连通图，其中顶点集合为V，边集合为E；
初始化：Vnew = &#123;x&#125;，其中x为集合V中的任一节点（起始点），Enew = &#123;&#125;；
重复下列操作，直到Vnew = V：
    在集合E中选取权值最小的边（u, v），其中u为集合Vnew中的元素，而v则是V中没有加入Vnew的顶点（如果存在有多条满足前述条件即具有相同权值的边，则可任意选取其中之一）；
    将v加入集合Vnew中，将（u, v）加入集合Enew中；
输出：使用集合Vnew和Enew来描述所得到的最小生成树。
</code></pre>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1222446-20200514094835156-1076198969.png" alt="原图" /></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1.png" alt="1" /><br />
(1)顶点D被任意选为起始点。顶点A、B、E和F通过单条边与D相连。A是距离D最近的顶点，因此将A及对应边AD以高亮表示。</p>
<hr />
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/2.png" alt="2" /><br />
(2)下一个顶点为距离D或A最近的顶点。B距D为9，距A为7，E为15，F为6。因此，F距D或A最近，因此将顶点F与相应边DF以高亮表示。</p>
<hr />
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/3.png" alt="3" /><br />
(3)算法继续重复上面的步骤。距离A为7的顶点B被高亮表示。</p>
<hr />
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/4.png" alt="4" /><br />
(4)在当前情况下，可以在C、E与G间进行选择。C距B为8，E距B为7，G距F为11。E最近，因此将顶点E与相应边BE高亮表示。</p>
<hr />
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/5.png" alt="5" /><br />
(5)这里，可供选择的顶点只有C和G。C距E为5，G距E为9，故选取C，并与边EC一同高亮表示。</p>
<hr />
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/6.png" alt="6" /><br />
(6)顶点G是唯一剩下的顶点，它距F为11，距E为9，E最近，故高亮表示G及相应边EG。</p>
<hr />
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/7.png" alt="7" /><br />
(7)现在，所有顶点均已被选取，图中绿色部分即为连通图的最小生成树。在此例中，最小生成树的权值之和为39。</p>
<hr />
<h2 id="拓扑排序算法tsa"><a class="markdownIt-Anchor" href="#拓扑排序算法tsa"></a> 拓扑排序算法(TSA)</h2>
<p><strong>描述:</strong><br />
对一个有向无环图(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边(u,v)∈E(G)，则u在线性序列中出现在v之前。</p>
<p>图形的顶点可以表示要执行的任务，并且边缘可以表示一个任务必须在另一个任务之前执行的约束; 在这个应用中，拓扑排序只是一个有效的任务顺序。通常，我们把这种顶点表示活动、边表示活动间先后关系的有向图称做顶点活动网(Activity On Vertex network)，简称<strong>AOV网</strong>。</p>
<p>一个AOV网应该是一个有向无环图，即不应该带有回路，因为若带有回路，则回路上的所有活动都无法进行.在AOV网中，若不存在回路，则所有活动可排列成一个线性序列，使得每个活动的所有前驱活动都排在该活动的前面，我们把此序列叫做拓扑序列(Topological order)，由AOV网构造拓扑序列的过程叫做拓扑排序(Topological sort)。AOV网的拓扑序列不是唯一的，满足上述定义的任一线性序列都称作它的拓扑序列。</p>
<p><strong>原理:</strong><br />
重复以下两个步骤,即可以得到拓扑序列.</p>
<blockquote>
<p>1.在有向图中任意选择一个无前驱的节点,并且作为当前的拓扑序列输出<br />
2.删除与 前面选择的无前驱节点 的所有关联的边</p>
</blockquote>
<p>例子:</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263766.png" alt="e拓扑排序算法例子" /></p>
<p>下面是得到其中一个拓扑序列的过程:</p>
<blockquote>
<p>第一步:a是无前驱的节点,选择<br />
第二步:a去掉后,b,c为无前驱节点,任选一个,假设选择c<br />
第三步:a,c去掉,只有b为无前驱节点,选择<br />
第四步:a,c,b去掉后,d,e为无前驱节点,任选一个,假设选择d<br />
第五步:a,c,b,d去掉后,e,f为无前驱节点,任选一个,假设选择f<br />
第六步:a,c,b,d,f去掉后,只有e为无前驱节点,选择<br />
第六步:a,c,b,d,f,e去掉后,只有g为无前驱节点,选择<br />
第七步:所有节点遍历完成,得到拓扑序列</p>
</blockquote>
<p>最终得到的拓扑序列为<code>a-&gt;c-&gt;b-&gt;d-&gt;f-&gt;e-&gt;g</code></p>
<hr />
<h2 id="关键路径算法cpa"><a class="markdownIt-Anchor" href="#关键路径算法cpa"></a> 关键路径算法(CPA)</h2>
<p><strong>描述:</strong><br />
关键路径：在AOE网中，从始点到终点具有最大路径长度（该路径上的各个活动所持续的时间之和）的路径称为关键路径,一个AOE网中不一定只有一条关键路径，可能会有多条。<br />
关键活动：关键路径上的活动（边）。<br />
由于AOE网中的某些活动能够同时进行，故完成整个工程所必须花费的时间应该为始点到终点的最大路径长度。关键路径长度是整个工程所需的最短工期。</p>
<p><strong>原理:</strong><br />
现有无向有权图</p>
<!--![Diagram](./attachments/1530005452480.drawio.html) -->
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263767.png" alt="无向有权图" /></p>
<p>根据这个graph定义四个值：前两个针对顶点，后两个针对边</p>
<p>(1)事件最早开始时间：顶点最早发生的时间。<br />
节点B只有A指向,所以其最早开始时间是1,对于节点E,需要等待B,C,D完成才能开始,缺一不可,所以其最早时间是A-&gt;D-&gt;E:8</p>
<p>(2)事件最晚开始时间：顶点最晚发生的时间，超出则会延误整个工期。<br />
从右往左推,假设求得关键路径是A-&gt;D-&gt;E-&gt;H-&gt;J:18,以H为例,J-&gt;H:18-7=11表示J最晚开始时间,超过这个时间J无法在18内完成.J-&gt;I-&gt;H为例,18-5-1=12,也是H的最迟开始时间,但是11比12靠前,所以11为H的最迟开始时间.</p>
<p>(3)活动的最早开始时间：边最早发生时间。<br />
求某一点的最早开始时间就是计算该节点前所有几点完成的时刻.比如E开始时,必须等待A-&gt;C-&gt;E(4);A-&gt;B-&gt;E(4);A-&gt;D-&gt;E(8)上的边必须先完成,取最长时间8为E的最早开始时间,比如上图各节点的最早开始时间如下:</p>
<!---  可编辑文件:   ![Diagram](./attachments/1530145603750.drawio.html) --->
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263768.png" alt="最早发生时间" /></p>
<p>图中所标数字是每个节点的最早开始时间,假设源点(A)从0开始算起,汇点不需要时间处理.那么整个网络,最长的路径就是18(A-&gt;D-&gt;E-&gt;H-&gt;J).各个点的最迟发生时间从后往前推,取较小的,比如H这个点J-&gt;H(18-7=11),J-&gt;I-&gt;H(18-5-1=12),就取11.</p>
<p>(4)活动的最晚开始时间：边最晚发生时间。不推迟工期的最晚开工时间。</p>
<p>以上数字均是时间点,从<code>源点</code>算起.<br />
假设起点是vo，则我们称从v0到vi的最长路径的长度为vi的最早发生时间，同时，vi的最早发生时间也是所有以vi为尾的弧所表示的活动的最早开始时间，使用e（i）表示活动ai最早发生时间，除此之外，我们还定义了一个活动最迟发生时间，使用l（i）表示，不推迟工期的最晚开工时间。我们把e（i）=l（i）的活动ai称为关键活动.</p>
<p>下面是算法的推理过程:<br />
1.构建graph网络<br />
2.从源点开始求graph的拓扑排序序列,如果序列个数小于graph节点个数,则graph存储环,程序退出,否则根据拓扑序列求各个节点的<code>最早开始时间ve(j)</code>,计算公式为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">ve(j)&#x3D;Max(ve(i)+Dur(i,j))</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>3.从汇点求graph的逆拓扑序列,然后根据该序列求各个节点的<code>最晚开始时间vl(j)</code>,计算公式为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">vl(j)&#x3D;Min(vl(i)-Dur(i,j))</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>4.如果ve(j)=vl(j),则i-.j是关键路径,否则不是.</p>
<hr />
<h2 id="广度优先搜索算法bfs"><a class="markdownIt-Anchor" href="#广度优先搜索算法bfs"></a> 广度优先搜索算法(BFS)</h2>
<p><strong>描述:</strong><br />
又译作宽度优先搜索，或横向优先搜索，是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。广度优先搜索的实现一般采用open-closed表。</p>
<p><strong>原理:</strong><br />
优先搜索同以层次的节点,和优先往纵深搜索不同,过程如下图,代码过程不描述.</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263769.gif" alt="广度优先搜索算法" /></p>
<hr />
<h2 id="深度优先搜索算法dfs"><a class="markdownIt-Anchor" href="#深度优先搜索算法dfs"></a> 深度优先搜索算法(DFS)</h2>
<p><strong>描述:</strong><br />
是一种用于遍历或搜索树或图的算法。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。</p>
<p><strong>原理:</strong><br />
过程如下图,代码过程不描述.</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613548263770.gif" alt="深度优先搜索算法" /></p>
<p>参考:<br />
<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA">维基百科-图论</a><br />
<a href="https://baike.baidu.com/item/%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/4049057?fr=aladdin">百度百科-迪杰斯特拉算法</a><br />
<a href="https://blog.csdn.net/qq_35644234/article/details/60870719">最短路径问题—Dijkstra算法详解</a><br />
<a href="https://blog.csdn.net/qq_35644234/article/details/60578189">数据结构—拓扑排序详解</a><br />
<a href="https://blog.csdn.net/qq_34374664/article/details/52261672">傻子也能看懂的弗洛伊德算法</a><br />
<a href="https://www.cnblogs.com/jsgnadsj/p/3432820.html">算法学习记录-图——应用之关键路径</a><br />
<a href="https://blog.csdn.net/qq_35644234/article/details/52664108">数据结构----关键路径详解</a></p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的各种排序问题</title>
    <url>/2018/06/30/Python%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在编写Python时,经常需要进行排序操作,简单的list排序还是很容易的,碰到复杂的就没办法,只能去查了,现在把编程过程中遇到的所有排序问题列下来,欢迎大家提供更加简洁,高效的排序方法,也欢迎<br />
大家给出自己在Python遇到的排序问题.</p>
<p>Python排序根本依赖于两个内建的函数:</p>
<ul>
<li>list.sort()         对list成员进行排序，不返回副本</li>
<li>sorted(list)    对list成员进行排序，返回副本</li>
</ul>
<blockquote>
<p>注:以下使用sorted(list)进行演示</p>
</blockquote>
<a id="more"></a>
<h1 id="基本的排序"><a class="markdownIt-Anchor" href="#基本的排序"></a> 基本的排序</h1>
<h2 id="列表list"><a class="markdownIt-Anchor" href="#列表list"></a> 列表(list)</h2>
<h3 id="按列表元素大小排序"><a class="markdownIt-Anchor" href="#按列表元素大小排序"></a> 按列表元素大小排序</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数值类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;ad&#x27;</span>,<span class="string">&#x27;ada&#x27;</span>,<span class="string">&#x27;ad1&#x27;</span>,<span class="string">&#x27;abe&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;abe&#x27;</span>, <span class="string">&#x27;ad&#x27;</span>, <span class="string">&#x27;ad1&#x27;</span>, <span class="string">&#x27;ada&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串中包含大小写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;ad&#x27;</span>,<span class="string">&#x27;ada&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;ad1&#x27;</span>,<span class="string">&#x27;abe&#x27;</span>,<span class="string">&#x27;Abe&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;Abe&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;abe&#x27;</span>, <span class="string">&#x27;ad&#x27;</span>, <span class="string">&#x27;ad1&#x27;</span>, <span class="string">&#x27;ada&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#小写字母优先</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;ad&#x27;</span>,<span class="string">&#x27;ada&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;ad1&#x27;</span>,<span class="string">&#x27;abe&#x27;</span>,<span class="string">&#x27;Abe&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],key=<span class="built_in">str</span>.lower)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;abe&#x27;</span>, <span class="string">&#x27;Abe&#x27;</span>, <span class="string">&#x27;ad&#x27;</span>, <span class="string">&#x27;ad1&#x27;</span>, <span class="string">&#x27;ada&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>规则解释:</p>
<ol>
<li>如果list内的元素是字符/字符串,默认优先将<mark>大写字母</mark>排前面,其次再按照规则2进行排序;通过参数<code>key=str.lower</code>控制其从<mark>小字母</mark>优先排.</li>
<li>如果list内的元素是字符/字符串,将<mark>依次</mark>按照该字符/字符串的<mark>ASCCII值 #800023</mark>进行排序</li>
<li>虽然列表内的元素的类型可以不一样,但是sotred(list)<mark>不支持 #80000f</mark>列表中既有数字又有字符的排序</li>
</ol>
<h3 id="按列表元素的属性"><a class="markdownIt-Anchor" href="#按列表元素的属性"></a> 按列表元素的属性</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按列表元素的长度进行排序</span></span><br><span class="line"><span class="built_in">sorted</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;ad&#x27;</span>,<span class="string">&#x27;ada&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;ad1&#x27;</span>,<span class="string">&#x27;abe&#x27;</span>,<span class="string">&#x27;Abe&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],key=<span class="keyword">lambda</span> <span class="built_in">str</span>:<span class="built_in">len</span>(<span class="built_in">str</span>))</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;ad&#x27;</span>, <span class="string">&#x27;ada&#x27;</span>, <span class="string">&#x27;ad1&#x27;</span>, <span class="string">&#x27;abe&#x27;</span>, <span class="string">&#x27;Abe&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>注:<br />
lambda为匿名函数,没有函数的具体名称,使用匿名函数是为了使代码更为精简.实际上<code>lambda str:len(str)</code>等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Getlenght</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>
<h2 id="字典dictory"><a class="markdownIt-Anchor" href="#字典dictory"></a> 字典(dictory)</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对字典进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(&#123;<span class="number">1</span>: <span class="string">&#x27;D&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;E&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;A&#x27;</span>&#125;)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照字典中的values的大小进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span></span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;DE&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;DDDB&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;QPOIE&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;WWB&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>.items()</span><br><span class="line">dict_items([(<span class="number">1</span>, <span class="string">&#x27;DE&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;DDDB&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;QPOIE&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;WWB&#x27;</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(<span class="built_in">dict</span>.items(),key=<span class="keyword">lambda</span> value:value[<span class="number">1</span>])</span><br><span class="line">[(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;DDDB&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;DE&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;QPOIE&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;WWB&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照字典中的values的长度进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(<span class="built_in">dict</span>.items(),key=<span class="keyword">lambda</span> value:<span class="built_in">len</span>(value[<span class="number">1</span>]))</span><br><span class="line">[(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;DE&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;WWB&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;DDDB&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;QPOIE&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<p>对字典进行排序,实际上是对字典keys组成的list进行排序,即sorted(dict)==sorted(sorted.values())</p>
<h2 id="元组tuple排序"><a class="markdownIt-Anchor" href="#元组tuple排序"></a> 元组(tuple)排序</h2>
<h3 id="单个元组排序和列表的方法一样"><a class="markdownIt-Anchor" href="#单个元组排序和列表的方法一样"></a> 单个元组排序和列表的方法一样</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#元组排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1=(<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(tup1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2=(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(tup2)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="元组列表"><a class="markdownIt-Anchor" href="#元组列表"></a> 元组列表</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuplist=[(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="number">4</span>),(<span class="string">&#x27;e&#x27;</span>,<span class="number">0</span>),(<span class="string">&#x27;d&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;f&#x27;</span>,<span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student_tuples = [(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>),(<span class="string">&#x27;jane&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),(<span class="string">&#x27;dave&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">10</span>),]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="comment">#直接对元组列表进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(tuplist)</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;e&#x27;</span>, <span class="number">0</span>), (<span class="string">&#x27;f&#x27;</span>, <span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照元组的第某个值进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(tuplist,key=<span class="keyword">lambda</span> tup:tup[<span class="number">1</span>])</span><br><span class="line">[(<span class="string">&#x27;e&#x27;</span>, <span class="number">0</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;f&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照元组的第某个值进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(student_tuples, key=<span class="keyword">lambda</span> student: student[<span class="number">2</span>])</span><br><span class="line">[(<span class="string">&#x27;dave&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">10</span>), (<span class="string">&#x27;jane&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure>
<p>注:直接对元组列表进行排序是按照元组的<mark>第一个值</mark>进行排序</p>
<h1 id="高级排序"><a class="markdownIt-Anchor" href="#高级排序"></a> 高级排序</h1>
<h2 id="使用operator模块"><a class="markdownIt-Anchor" href="#使用operator模块"></a> 使用Operator模块</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter, attrgetter</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个排序关键字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(student_tuples, key=itemgetter(<span class="number">2</span>))</span><br><span class="line">[(<span class="string">&#x27;dave&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">10</span>), (<span class="string">&#x27;jane&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#两个排序关键字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(student_tuples, key=itemgetter(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">[(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;dave&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">10</span>), (<span class="string">&#x27;jane&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="字符串的多关键字排序"><a class="markdownIt-Anchor" href="#字符串的多关键字排序"></a> 字符串的多关键字排序</h2>
<p>基于上面的多关键字排序,可以对字符串做一些有趣的排序,平常我们对字符串进行排序时,可能带有数字,这时候排序只是像平常那样逐个字符串<mark>ASCCII值 #800023</mark>进行排序:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list01=[<span class="string">&#x27;dog1&#x27;</span>,<span class="string">&#x27;cat3&#x27;</span>,<span class="string">&#x27;bird7&#x27;</span>,<span class="string">&#x27;swan4&#x27;</span>,<span class="string">&#x27;penguin6&#x27;</span>,<span class="string">&#x27;cattle5&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(list01)</span><br><span class="line">[<span class="string">&#x27;bird7&#x27;</span>, <span class="string">&#x27;cat3&#x27;</span>, <span class="string">&#x27;cattle5&#x27;</span>, <span class="string">&#x27;dog1&#x27;</span>, <span class="string">&#x27;penguin6&#x27;</span>, <span class="string">&#x27;swan4&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>但是有时候我们需要按照字符串中的字母进行排序,这时候就需要将字符串中的数字切割出来,然后传入key参数给sorted.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按照字符串的某个数字进行排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sort_str</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">str</span>:</span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			c=re.findall(<span class="string">&#x27;\d+&#x27;</span>,<span class="built_in">str</span>)[<span class="number">0</span>]</span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">			c=-<span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">int</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(list01,key=sort_str)</span><br><span class="line">[<span class="string">&#x27;dog1&#x27;</span>, <span class="string">&#x27;cat3&#x27;</span>, <span class="string">&#x27;swan4&#x27;</span>, <span class="string">&#x27;cattle5&#x27;</span>, <span class="string">&#x27;penguin6&#x27;</span>, <span class="string">&#x27;bird7&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>如果字符串中类似这样的,而你只想对字符串的某些位置的数字进行排序,我们先来看看只针对字符串一个特定位置的排序.</p>
<blockquote>
<p>[‘cb_cha0_amni0’,‘cb_cha0_amni2’,‘cb_cha1_amni1’,‘cb_cha0_amni3’]</p>
</blockquote>
<p>使用上面的排序方法得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list02=[<span class="string">&#x27;cb_cha0_amni0&#x27;</span>,<span class="string">&#x27;cb_cha0_amni2&#x27;</span>,<span class="string">&#x27;cb_cha1_amni1&#x27;</span>,<span class="string">&#x27;cb_cha0_amni3&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(list02,key=sort_str)</span><br><span class="line">[<span class="string">&#x27;cb_cha0_amni0&#x27;</span>, <span class="string">&#x27;cb_cha0_amni2&#x27;</span>, <span class="string">&#x27;cb_cha0_amni3&#x27;</span>, <span class="string">&#x27;cb_cha1_amni1&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>上面的自定义提取数字的函数<code>c=re.findall('\d+',str)[0]</code>这一句决定了要对字符串的第几个数字进行排序,假设我要对上面字符数组的第二个值进行排序,重新定义一个提取数值的方法,每次调用返回字符串的第二个数字.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sort_str1</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">str</span>:</span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			c=re.findall(<span class="string">&#x27;\d+&#x27;</span>,<span class="built_in">str</span>)[<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">			c=-<span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">int</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(list02,key=sort_str1)</span><br><span class="line">[<span class="string">&#x27;cb_cha0_amni0&#x27;</span>, <span class="string">&#x27;cb_cha1_amni1&#x27;</span>, <span class="string">&#x27;cb_cha0_amni2&#x27;</span>, <span class="string">&#x27;cb_cha0_amni3&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>比较炸的是你的需求是:<mark>按照字符串中的多个字母排序(比如优先按照第一个字母排序,然后按照第二个字母排序) #007e80</mark></p>
<p>一个想法是:把字符串解析为元组,然后使用<code>itemgetter</code>来完成多关键字排序.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串已经被拆分为元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list03=[(<span class="string">&#x27;cb_cha&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;_amni&#x27;</span>,<span class="number">0</span>),(<span class="string">&#x27;cb_cha&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;_amni&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;cb_cha&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;_amni&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;cb_cha&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;_amni&#x27;</span>,<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#对元祖进行多关键字排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>listtmp=<span class="built_in">sorted</span>(list03, key=itemgetter(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>listtmp</span><br><span class="line">[(<span class="string">&#x27;cb_cha&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;_amni&#x27;</span>, <span class="number">0</span>), (<span class="string">&#x27;cb_cha&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;_amni&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;cb_cha&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;_amni&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;cb_cha&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;_amni&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#将排序后的元组转成字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> strtmp:<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,strtmp)),listtmp))</span><br><span class="line">[<span class="string">&#x27;cb_cha0_amni0&#x27;</span>, <span class="string">&#x27;cb_cha0_amni2&#x27;</span>, <span class="string">&#x27;cb_cha0_amni3&#x27;</span>, <span class="string">&#x27;cb_cha1_amni1&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注:这里用了匿名函数和多个map,这对处理大量的数据是的问题,会耗费很多时间.这种情况比较好的方法是使用excle进行排序,当然,你得手动先将数据分割成一列一列的.</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613527346517.png" alt="EXCLE的自定义排序" /></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中多层List展平为一层</title>
    <url>/2018/06/29/Python%E4%B8%AD%E5%A4%9A%E5%B1%82List%E5%B1%95%E5%B9%B3%E4%B8%BA%E4%B8%80%E5%B1%82/</url>
    <content><![CDATA[<p>使用Python脚本的过程中,偶尔需要使用<code>list多层转一层</code>,又总是忘记怎么写搜索关键词,所以总是找了很久,现在把各种方法记录下来,方便自己也方便大家.</p>
<p>方法很多,现在就简单写8种,后面再对这8种方法做基准测试.</p>
<p>声明:文中的方法均收集自<a href="https://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python">Making a flat list out of list of lists in Python</a></p>
<a id="more"></a>
<h1 id="方法汇总"><a class="markdownIt-Anchor" href="#方法汇总"></a> 方法汇总</h1>
<p><strong>1.定义减层方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">import</span> perfplot</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable  <span class="comment"># or from collections.abc import Iterable</span></span><br><span class="line"><span class="keyword">from</span> iteration_utilities <span class="keyword">import</span> deepflatten</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用两次for循环</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forfor</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [item <span class="keyword">for</span> sublist <span class="keyword">in</span> a <span class="keyword">for</span> item <span class="keyword">in</span> sublist]</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过sum</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_brackets</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(a, [])</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用functools內建模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functools_reduce</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> functools.reduce(operator.concat, a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用itertools內建模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">itertools_chain</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(itertools.chain.from_iterable(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用numpy</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numpy_flat</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(numpy.array(a).flat)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用numpy</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numpy_concatenate</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(numpy.concatenate(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span>(<span class="params">items</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield items from any nested iterable; see REF.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(x, Iterable) <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(x, (<span class="built_in">str</span>, <span class="built_in">bytes</span>)):</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> flatten(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pylangs_flatten</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(flatten(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用库iteration_utilities</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iteration_utilities_deepflatten</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(deepflatten(a, depth=<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><strong>2.测试</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;--------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(forfor(a))</span><br><span class="line">print(sum_brackets(a))</span><br><span class="line">print(functools_reduce(a))</span><br><span class="line">print(itertools_chain(a))</span><br><span class="line">print(numpy_flat(a))</span><br><span class="line">print(numpy_concatenate(a))</span><br><span class="line">print(pylangs_flatten(a))</span><br><span class="line">print(iteration_utilities_deepflatten(a))</span><br></pre></td></tr></table></figure>
<p><mark>输出:</mark></p>
<blockquote>
<p>[[1, 2, 3], [4, 5, 6], [7, 8, 9]]<br />
--------------------------<br />
[1, 2, 3, 4, 5, 6, 7, 8, 9]<br />
[1, 2, 3, 4, 5, 6, 7, 8, 9]<br />
[1, 2, 3, 4, 5, 6, 7, 8, 9]<br />
[1, 2, 3, 4, 5, 6, 7, 8, 9]<br />
[1, 2, 3, 4, 5, 6, 7, 8, 9]<br />
[1, 2, 3, 4, 5, 6, 7, 8, 9]<br />
[1, 2, 3, 4, 5, 6, 7, 8, 9]<br />
[1, 2, 3, 4, 5, 6, 7, 8, 9]</p>
</blockquote>
<hr />
<h1 id="各种方法的基准测试消耗时间对比"><a class="markdownIt-Anchor" href="#各种方法的基准测试消耗时间对比"></a> 各种方法的基准测试(消耗时间对比)</h1>
<p>各种方法在小数据上消耗时间差别不大,如果数据很小,没必要为了选择而烦恼,如果数据很大,可以参考下面基准测试的结果来选择减层方法.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> simple_benchmark <span class="keyword">import</span> benchmark</span><br><span class="line"></span><br><span class="line"><span class="comment">#基准测试</span></span><br><span class="line">b = benchmark(</span><br><span class="line">    [forfor, sum_brackets, functools_reduce, itertools_chain,numpy_flat, numpy_concatenate, pylangs_flatten,iteration_utilities_deepflatten],</span><br><span class="line">    arguments=&#123;<span class="number">2</span>**i: [[<span class="number">0</span>]*<span class="number">5</span>]*(<span class="number">2</span>**i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">13</span>)&#125;,</span><br><span class="line">    argument_name=<span class="string">&#x27;number of inner lists&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示测试结果</span></span><br><span class="line">plt.subplots(<span class="number">1</span>,<span class="number">1</span>,figsize=(<span class="number">15</span>,<span class="number">10</span>))</span><br><span class="line">b.plot()</span><br><span class="line">plt.legend(loc = <span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613527188071.png" alt="消耗时间对比" /></p>
<p>相同数据量,纵轴方向越小,方法越快.</p>
<hr />
<p>代码可以从<a href="https://files.cnblogs.com/files/wushaogui/list%E5%A4%9A%E5%B1%82%E8%BD%AC%E4%B8%80%E5%B1%82.ipynb.zip">这里</a>下载,需要部署Jupyter环境,可参考我的博客部署方法.</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>图论---问题篇</title>
    <url>/2018/06/28/%E5%9B%BE%E8%AE%BA---%E9%97%AE%E9%A2%98%E7%AF%87/</url>
    <content><![CDATA[<p>图论中的算法基本都是提出后,经过检验的.我就不讨论算法很基础的原理,只是从看懂一个算法的角度去学习.本着不花时间去重复别人优秀工作的原则,本文中很多部分引用了别人的工作,甚至是照搬过来,因为我觉得算法这东西已经类似<code>真理</code>,证明不需要你,你可以看得懂,别人也可以,只是表达方式不同,别人有优秀的表达方式,我为什么不用呢!</p>
<a id="more"></a>
<h1 id="问题类"><a class="markdownIt-Anchor" href="#问题类"></a> 问题类</h1>
<h2 id="路径问题"><a class="markdownIt-Anchor" href="#路径问题"></a> 路径问题</h2>
<h3 id="柯尼斯堡七桥问题"><a class="markdownIt-Anchor" href="#柯尼斯堡七桥问题"></a> 柯尼斯堡七桥问题</h3>
<p>这个问题是基于一个现实生活中的事例：当时东普鲁士柯尼斯堡（今日俄罗斯加里宁格勒）市区跨普列戈利亚河两岸，河中心有两个小岛。小岛与河的两岸有七条桥连接。在所有桥都只能走一遍的前提下，如何才能把这个地方所有的桥都走遍？</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613547720478.png" alt="柯尼斯堡七桥问题" /></p>
<p>摘自:</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E6%9F%AF%E5%B0%BC%E6%96%AF%E5%A0%A1%E4%B8%83%E6%A1%A5%E9%97%AE%E9%A2%98">维基百科-柯尼斯堡七桥问题</a></p>
</blockquote>
<hr />
<h3 id="哈密顿回路问题"><a class="markdownIt-Anchor" href="#哈密顿回路问题"></a> 哈密顿回路问题</h3>
<p>哈密顿图是一个无向图,由指定的起点前往指定的终点，途中经过所有其他节点且只经过一次</p>
<p><strong>哈密顿回路:</strong> 闭合的哈密顿路径称作哈密顿回路<br />
<strong>哈密顿路径:</strong> 含有图中所有顶点的路径称作哈密顿路径。</p>
<p>摘自:</p>
<blockquote>
<p><a href="https://baike.baidu.com/item/%E5%93%88%E5%AF%86%E9%A1%BF%E5%9B%9E%E8%B7%AF/5575399">百度百科-哈密顿回路</a></p>
</blockquote>
<hr />
<h3 id="最小生成树问题"><a class="markdownIt-Anchor" href="#最小生成树问题"></a> 最小生成树问题</h3>
<p><strong>最小生成树</strong>是一副连通加权无向图中一棵权值最小的生成树。具体定义为: 在一给定的无向图 G = (V, E) 中，(u, v) 代表连接顶点 u 与顶点 v 的边（即 ( u , v ) ∈ E ，而 w(u, v) 代表此边的权重，若存在 T 为 E 的子集（即 T ⊆ E 且 (V, T) 为树，使得下面的值最小.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">w(T)&#x3D;\sum_&#123;(u,v)\subseteq E&#125;&#123;w(u,v)&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>可以描述为以下问题,有一个有权无向图,找到路径把所有顶点连起来,并保证边上权重和最小. 所以最小生成树也称为:<strong>最小权重生成树</strong></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613547720443.png" alt="enter description here" title="最小生成树" /></p>
<p>一个连通图可能有多个生成树。当图中的边具有权值时，总会有一个生成树的边的权值之和小于或者等于其它生成树的边的权值之和。广义上而言，对于非连通无向图来说，它的每一连通分量同样有最小生成树，它们的并被称为<strong>最小生成森林</strong>。</p>
<p>以有线电视电缆的架设为例，若只能沿着街道布线，则以街道为边，而路口为顶点，其中必然有一最小生成树能使布线成本最低。</p>
<p>摘自:</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91">维基百科-最小生成树</a></p>
</blockquote>
<hr />
<h3 id="中国邮路问题"><a class="markdownIt-Anchor" href="#中国邮路问题"></a> 中国邮路问题</h3>
<p>也称<strong>中国邮递员问题</strong>,此问题为在一个连通的无向图中找到一最短的封闭路径，且此路径需通过所有<em>边</em>至少一次。</p>
<p>注意:下面有一个<code>旅行商问题</code>是经过所有<em>点</em>一次,和这个<em>边</em>不同.</p>
<p>简单来说，邮递员问题就是在一个已知的地区，邮差要设法找到一条最短路径，可以走过此地区所有的街道，且最后要回到出发点.</p>
<p>摘自:</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E9%82%AE%E9%80%92%E5%91%98%E9%97%AE%E9%A2%98">维基百科-邮递员问题</a></p>
</blockquote>
<hr />
<h3 id="最短路问题"><a class="markdownIt-Anchor" href="#最短路问题"></a> 最短路问题</h3>
<p>最短路径问题是图论研究中的一个经典算法问题，旨在寻找图（由结点和路径组成的）中两结点之间的最短路径。算法具体的形式包括：</p>
<blockquote>
<p><strong>确定起点的最短路径问题</strong> - 即已知起始结点，求最短路径的问题。适合使用Dijkstra算法。<br />
<strong>确定终点的最短路径问题</strong> - 与确定起点的问题相反，该问题是已知终结结点，求最短路径的问题。在无向图中该问题与确定起点的问题完全等同，在有向图中该问题等同于把所有路径方向反转的确定起点的问题。<br />
<strong>确定起点终点的最短路径问题</strong> - 即已知起点和终点，求两结点之间的最短路径。<br />
<strong>全局最短路径问题</strong> - 求图中所有的最短路径。适合使用Floyd-Warshall算法。</p>
</blockquote>
<p>用于解决最短路径问题的算法被称做“最短路径算法”，有时被简称作“路径算法”。最常用的路径算法有：</p>
<blockquote>
<p>Dijkstra算法<br />
A*算法<br />
Bellman-Ford算法<br />
SPFA算法（Bellman-Ford算法的改进版本）<br />
Floyd-Warshall算法<br />
Johnson算法<br />
Bi-Direction BFS算法</p>
</blockquote>
<p>摘自:</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98">维基百科-最短路问题</a></p>
</blockquote>
<hr />
<h3 id="斯坦纳树"><a class="markdownIt-Anchor" href="#斯坦纳树"></a> 斯坦纳树</h3>
<p>斯坦纳树问题是组合优化问题，与最小生成树相似，是最短网络的一种。最小生成树是在给定的点集和边中寻求最短网络使所有点连通。而最小斯坦纳树允许在给定点外增加额外的点，使生成的最短网络开销最小。</p>
<p><strong>展示问题,以供理解:</strong></p>
<blockquote>
<p>1.平原上的三个城镇间要兴建一个公用的煤气供应站，在选址问题上，要考虑的主要问题是使由供应站到三个城镇的输送管道的总长最短。如何去寻找合适地点？<br />
2.假若要建的是一个垃圾处理站，要修建三条公路将垃圾站与三个城镇连起来。这时，因为三个城镇的居民的数目或工业性质等的不同，每天运送垃圾使用的车辆数目各不相同，运输的费用也就各异。因此，选取地点时，如果仍考虑使三条公路的总长最小，就不合理了。这时应该考虑：先计算出三个城镇单位时间内生产的垃圾数量的百分比（或每日运输费用的百分比），如何选取地点，使得每个城镇垃圾运输数量与公路里程的乘积之和为最小。</p>
</blockquote>
<p>摘自:</p>
<blockquote>
<p><a href="https://baike.baidu.com/item/%E6%96%AF%E5%9D%A6%E7%BA%B3%E6%A0%91/12796694?fr=aladdin">百度百科-斯坦纳树</a></p>
</blockquote>
<hr />
<h3 id="旅行商问题np困难"><a class="markdownIt-Anchor" href="#旅行商问题np困难"></a> 旅行商问题（NP困难）</h3>
<p>假设有一个旅行商人要拜访n个城市，他必须选择所要走的路径，路径的限制是每个城市只能拜访一次，而且最后要回到原来出发的城市。路径的选择目标是要求得的路径路程为所有路径之中的最小值。</p>
<p>注意 ：上面有一个<code>中国邮路问题</code>是经过所有<em>边</em>一次,和这个<em>点</em>不同.</p>
<p>摘自:</p>
<blockquote>
<p><a href="https://baike.baidu.com/item/TSP%E9%97%AE%E9%A2%98/840008?fromtitle=%E6%97%85%E8%A1%8C%E6%8E%A8%E9%94%80%E5%91%98%E9%97%AE%E9%A2%98&amp;fromid=10675002&amp;fr=aladdin">百度百科-TSP问题</a></p>
</blockquote>
<hr />
<h2 id="网络流与匹配"><a class="markdownIt-Anchor" href="#网络流与匹配"></a> 网络流与匹配</h2>
<h3 id="最大流问题"><a class="markdownIt-Anchor" href="#最大流问题"></a> 最大流问题</h3>
<p>在优化理论中,最大流问题涉及到在一个单源点、单汇点的网络流中找到一条最大的流。<br />
最大流问题可以被看作是一个更复杂的网络流问题的特殊情况,。s-t流（从源点s到汇点t）的最大值等于s-t割的最小容量，这被称为最大流最小割定理。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613547720444.png" alt="最大流问题" /></p>
<p><strong>最小费用最大流问题:</strong> 在一个网络中每段路径都有“容量”和“费用”两个限制的条件下，此类问题的研究试图寻找出：流量从A到B，如何选择路径、分配经过路径的流量，可以达到所用的费用最小的要求。<br />
在实际中：n辆卡车要运送物品，从A地到B地。由于每条路段都有不同的路费要缴纳，每条路能容纳的车的数量有限制，如何分配卡车的出发路径可以达到费用最低，物品又能全部送到。</p>
<p>摘自:</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98">维基百科-最大流问题</a><br />
<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98">维基百科-最小费用最大流问题</a></p>
</blockquote>
<hr />
<h2 id="染色"><a class="markdownIt-Anchor" href="#染色"></a> 染色</h2>
<h3 id="四色问题"><a class="markdownIt-Anchor" href="#四色问题"></a> 四色问题</h3>
<p>每个无外飞地的地图都可以用不多于四种颜色来染色，而且不会有两个邻接的区域颜色相同</p>
<blockquote>
<p>外飞地：某国家拥有一块与本国分离开来的领土，该领土被其他国家包围，则该领土称为某国的外飞地。</p>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613547720479.png" alt="四色问题示意图" /></p>
<p>摘自:</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E8%89%B2%E5%AE%9A%E7%90%86">维基百科-四色定理</a></p>
</blockquote>
<hr />
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Keras训练神经网络备忘录</title>
    <url>/2018/06/04/%E4%BD%BF%E7%94%A8Keras%E8%AE%AD%E7%BB%83%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<p>本文总结了keras使用过程中常见的操作进行汇总</p>
<a id="more"></a>
<h1 id="1优化函数的选择"><a class="markdownIt-Anchor" href="#1优化函数的选择"></a> 1.优化函数的选择</h1>
<p>先写结论,后面再补上每个优化函数的详细解释:</p>
<blockquote>
<p>如果你的数据很稀疏，那应该选择有自适应性的优化函数。并且你还可以减少调参的时间，用默认参数取得好的结果。<br />
RMSprop是adagrad的一个拓展，旨在解决它提前结束的问题。<br />
而RMSprop和Adadelta类似，只是adadelta采用了RMS的方法更新参数。<br />
在RMSprop基础上增加了偏差校正和momentum，形成了Adam。<br />
综上，RMSprop、Adadelta、Adam都是类似的。<br />
Kingma【Kingma, D. P., &amp; Ba, J. L. (2015). Adam: a Method for Stochastic Optimization. International Conference on Learning Representations, 1–13.】的实验表示，偏差校正使得Adam在优化到后面梯度变的稀疏的时候使得其优化性能最好。<br />
所以，可能Adam是最好的优化函数。<br />
所以，如果你希望你的训练能变的更快，或者你要训练的是一个复杂的深度的网络，尽量选择自适应的优化函数。</p>
</blockquote>
<p>摘自:<a href="https://blog.csdn.net/qq_21460525/article/details/70146665">深度学习各种优化函数详解</a></p>
<h1 id="2损失函数的选择"><a class="markdownIt-Anchor" href="#2损失函数的选择"></a> 2.损失函数的选择</h1>
<p>编译模型必须的两个参数之一:</p>
<blockquote>
<p>model.compile(loss=‘mean_squared_error’, optimizer=‘sgd’)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> losses</span><br><span class="line">model.<span class="built_in">compile</span>(loss=losses.mean_squared_error, optimizer=<span class="string">&#x27;sgd&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="22常用的损失函数"><a class="markdownIt-Anchor" href="#22常用的损失函数"></a> 2.2常用的损失函数</h2>
<p><strong>mean_squared_error或mse</strong><br />
<strong>mean_absolute_error或mae</strong><br />
<strong>mean_absolute_percentage_error或mape</strong><br />
<strong>mean_squared_logarithmic_error或msle</strong><br />
<strong>squared_hinge</strong><br />
<strong>hinge</strong><br />
<strong>categorical_hinge</strong><br />
<strong>logcosh</strong><br />
<strong>categorical_crossentropy</strong>:亦称作多类的对数损失，注意使用该目标函数时，需要将标签转化为形如(nb_samples, nb_classes)的二值序列<br />
<strong>sparse_categorical_crossentropy</strong>:如上，但接受稀疏标签。注意，使用该函数时仍然需要你的标签与输出值的维度相同，你可能需要在标签数据上增加一个维度：np.expand_dims(y,-1)<br />
<strong>binary_crossentropy</strong>:（亦称作对数损失，logloss）<br />
<strong>kullback_leibler_divergence</strong>:从预测值概率分布Q到真值概率分布P的信息增益,用以度量两个分布的差异<br />
<strong>poisson</strong>:即(predictions - targets * log(predictions))的均值<br />
<strong>cosine_proximity</strong>:即预测值与真实标签的余弦距离平均值的相反数</p>
<p>注:当使用”categorical_crossentropy”作为目标函数时,标签应该为多类模式,即one-hot编码的向量,而不是单个数值. 可以使用工具中的to_categorical函数完成该转换.示例如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.utils.np_utils <span class="keyword">import</span> to_categorical</span><br><span class="line">categorical_labels = to_categorical(int_labels, num_classes=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>摘自:<a href="http://keras-cn.readthedocs.io/en/latest/other/objectives/">目标函数objectives</a></p>
</blockquote>
<h2 id="22自定义函数"><a class="markdownIt-Anchor" href="#22自定义函数"></a> 2.2自定义函数</h2>
<p>keras的Losses部分的源码是这样的:</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613533510116.png" alt="部分losses" /></p>
<p>可以看出,每次计算loss时,会传给损失函数两个值,一个是正确的标签(y_true),一是模型预测的标签(y_pred),这两个值是shape相同的Theano/TensorFlow张量,根据这一规则,可以设计自己的损失函数.</p>
<h3 id="21实践"><a class="markdownIt-Anchor" href="#21实践"></a> 2.1实践</h3>
<p>(1)基本用法<br />
自定义一个,对真实和预测的差距求4次方的损失函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myloss</span>(<span class="params">pred,true</span>):</span></span><br><span class="line">    result = np.power(pred-true,<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> result.mean()</span><br><span class="line"><span class="comment">#编译模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,loss=myloss)</span><br></pre></td></tr></table></figure>
<p>(2)实际例子<br />
使用one hot分类时,拟合one hot分布的同时,还你拟合均匀分布<br />
自定义的函数是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$loss&#x3D;-(1-e)log&#123;e^&#123;Z_1&#125; \over Z&#125;-e\sum_&#123;i&#x3D;1&#125;^n&#123;&#123;1 \over 3&#125;log&#123;e^&#123;Z_1&#125; \over Z&#125;&#125;$$</span><br><span class="line">$$Z&#x3D;e^&#123;Z_1&#125;+e^&#123;Z_2&#125;+e^&#123;Z_3&#125;$$</span><br></pre></td></tr></table></figure>
<p>实际用keras是这样的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mycrossentropy</span>(<span class="params">y_true, y_pred, e=<span class="number">0.1</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>-e)*K.categorical_crossentropy(y_pred,y_true) + e*K.categorical_crossentropy(y_pred, K.ones_like(y_pred)/nb_classes)</span><br><span class="line"><span class="comment">#编译模型	</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=mycrossentropy)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子来源<a href="https://kexue.fm/archives/4493">Keras中自定义复杂的loss函数</a></p>
</blockquote>
<h3 id="22将损失函数自定义为网络层"><a class="markdownIt-Anchor" href="#22将损失函数自定义为网络层"></a> 2.2将损失函数自定义为网络层</h3>
<p>使用均方差和KL散度定义损失函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomVariationalLayer</span>(<span class="params">Layer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        self.is_placeholder = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">super</span>(CustomVariationalLayer, self).__init__(**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">vae_loss</span>(<span class="params">self, x, x_decoded_mean</span>):</span></span><br><span class="line">        xent_loss = original_dim * metrics.binary_crossentropy(x, x_decoded_mean)<span class="comment">#Square Loss</span></span><br><span class="line">        kl_loss = - <span class="number">0.5</span> * K.<span class="built_in">sum</span>(<span class="number">1</span> + z_log_var - K.square(z_mean) - K.exp(z_log_var), axis=-<span class="number">1</span>)<span class="comment"># KL-Divergence Loss</span></span><br><span class="line">        <span class="keyword">return</span> K.mean(xent_loss + kl_loss)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        x = inputs[<span class="number">0</span>]</span><br><span class="line">        x_decoded_mean = inputs[<span class="number">1</span>]</span><br><span class="line">        loss = self.vae_loss(x, x_decoded_mean)</span><br><span class="line">        self.add_loss(loss, inputs=inputs)</span><br><span class="line">        <span class="comment"># We won&#x27;t actually use the output.</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">		</span><br><span class="line">y = CustomVariationalLayer()([x, x_decoded_mean])</span><br><span class="line">vae = Model(x, y)</span><br><span class="line">vae.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;rmsprop&#x27;</span>, loss=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子来源<a href="https://blog.csdn.net/A_a_ron/article/details/79050204">Keras自定义Loss函数</a></p>
</blockquote>
<h1 id="3模型的保存"><a class="markdownIt-Anchor" href="#3模型的保存"></a> 3.模型的保存</h1>
<h2 id="31同时保存结构和权重"><a class="markdownIt-Anchor" href="#31同时保存结构和权重"></a> 3.1同时保存结构和权重</h2>
<p>官方保持模型的API是这样的:</p>
<blockquote>
<p>def save_model(model, filepath, overwrite=True, include_optimizer=True)</p>
</blockquote>
<p>调用这个函数保持的内容包括:</p>
<ul>
<li>模型的结构</li>
<li>模型的权重</li>
<li>优化器的状态(即保存时优化器的状态,一遍后面从该状态出发继续训练)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"></span><br><span class="line"><span class="comment">#保持模型</span></span><br><span class="line">model.save(<span class="string">&#x27;my_model.h5&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#载入模型</span></span><br><span class="line">model = load_model(<span class="string">&#x27;my_model.h5&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="32模型结构的保存"><a class="markdownIt-Anchor" href="#32模型结构的保存"></a> 3.2模型结构的保存</h2>
<p>如果只希望保持模型结构,可以使用以下方法保存和重建.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># save as JSON</span></span><br><span class="line">json_string = model.to_json()</span><br><span class="line"></span><br><span class="line"><span class="comment"># save as YAML</span></span><br><span class="line">yaml_string = model.to_yaml()</span><br><span class="line"></span><br><span class="line"><span class="comment"># model reconstruction from JSON:</span></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> model_from_json</span><br><span class="line">model = model_from_json(json_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># model reconstruction from YAML</span></span><br><span class="line">model = model_from_yaml(yaml_string)</span><br></pre></td></tr></table></figure>
<h2 id="33模型权重的保存"><a class="markdownIt-Anchor" href="#33模型权重的保存"></a> 3.3模型权重的保存</h2>
<p>如果只希望保持权重,可以使用以下方法保持和载入.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.save_weights(<span class="string">&#x27;my_model_weights.h5&#x27;</span>)</span><br><span class="line">model.load_weights(<span class="string">&#x27;my_model_weights.h5&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="35选择网络层载入"><a class="markdownIt-Anchor" href="#35选择网络层载入"></a> 3.5选择网络层载入</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">假如原模型为：</span></span><br><span class="line"><span class="string">    model = Sequential()</span></span><br><span class="line"><span class="string">    model.add(Dense(2, input_dim=3, name=&quot;dense_1&quot;))</span></span><br><span class="line"><span class="string">    model.add(Dense(3, name=&quot;dense_2&quot;))</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">    model.save_weights(fname)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># new model</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(<span class="number">2</span>, input_dim=<span class="number">3</span>, name=<span class="string">&quot;dense_1&quot;</span>))  <span class="comment"># will be loaded</span></span><br><span class="line">model.add(Dense(<span class="number">10</span>, name=<span class="string">&quot;new_dense&quot;</span>))  <span class="comment"># will not be loaded</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># load weights from first model; will only affect the first layer, dense_1.</span></span><br><span class="line">model.load_weights(fname, by_name=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>摘自:<a href="https://blog.csdn.net/u010159842/article/details/54407745">如何保存Keras模型</a></p>
</blockquote>
<h1 id="4训练历史的保存"><a class="markdownIt-Anchor" href="#4训练历史的保存"></a> 4.训练历史的保存</h1>
<h2 id="41检测运行过程的参数"><a class="markdownIt-Anchor" href="#41检测运行过程的参数"></a> 4.1检测运行过程的参数</h2>
<p>深度学习像<code>炼丹</code>一样,有时候看见出现了<code>仙丹</code>(非常好的训练结果),但是忘记保持了,之后再怎么训练也找不回曾经的那个	<code>点</code>.有没有有一种机制,检测训练过程中的参数,如果结果比前一次好,我就保存模型权重下来呢?<br />
有的,官方提供<code>回调函数</code>检测训练参数.<br />
定义好检测的参数和保存的格式,就可以将回调函数写到训练函数的callbacks即可:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Checkpoint = keras.callbacks.ModelCheckpoint(</span><br><span class="line">    <span class="string">&#x27;Train_record/&#123;epoch:02d&#125;.&#123;val_acc:.2f&#125;.V0.hdf5&#x27;</span>,</span><br><span class="line">    monitor=<span class="string">&#x27;val_loss&#x27;</span>,</span><br><span class="line">    verbose=<span class="number">1</span>,</span><br><span class="line">    save_best_only=<span class="literal">True</span>,</span><br><span class="line">    save_weights_only=<span class="literal">False</span>,</span><br><span class="line">    mode=<span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">    period=<span class="number">1</span>)</span><br><span class="line">	</span><br><span class="line">history = model.fit([train_X_lstm,train_X_resnet],train_y,verbose=<span class="number">1</span>,epochs=<span class="number">150</span>,batch_size=<span class="number">256</span>,validation_data=([vali_X_lstm,vali_X_resnet],vali_y),shuffle=<span class="literal">True</span>,callbacks=[Checkpoint])	</span><br></pre></td></tr></table></figure>
<p>回调函数<code>Checkpoint</code>设置:</p>
<blockquote>
<p>filepath:保存模型的路径,你可以按照上面的方式自定义你的文件名,很直观<br />
monitor: 被监测的数据,训练历史必须包含改值,比如:如果你的训练过程没有设置验证集,就无法检测val_acc<br />
save_best_only:每次是否保存当前的最佳模型<br />
mode:auto, min, max} 的其中之一。 如果 save_best_only=True，那么是否覆盖保存文件的决定就取决于被监测数据的最大或者最小值。 对于 val_acc，模式就会是 max，而对于 val_loss，模式就需要是 min.<br />
save_weights_only: 如果 True，那么只有模型的权重会被保存 (model.save_weights(filepath))， 否则的话，整个模型会被保存 (model.save(filepath))。<br />
period: 每个检查点之间的间隔（训练轮数</p>
</blockquote>
<h2 id="42保持训练过程得到的所有数据"><a class="markdownIt-Anchor" href="#42保持训练过程得到的所有数据"></a> 4.2保持训练过程得到的所有数据</h2>
<p>这里的所有数据是指<code>model.fit()</code>返回的所有数据,包括acc(训练准确度),loss(训练损失),如果指定了验证集,还会有val_acc(验证集准确度),val_loss(训练集损失).保持方法是在训练完成后写入到文件中:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">history=model.fit(train_set_x,train_set_y,batch_size=<span class="number">256</span>,shuffle=<span class="literal">True</span>,nb_epoch=nb_epoch,validation_split=<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;train_history.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(history.history))</span><br></pre></td></tr></table></figure>
<h1 id="5陷阱validation_split与shuffle"><a class="markdownIt-Anchor" href="#5陷阱validation_split与shuffle"></a> 5.陷阱:validation_split与shuffle</h1>
<p>模型训练时,有一个参数可以从训练集抽取一定比例的数据做验证,这个参数是<code>validation_split</code>.</p>
<blockquote>
<p>训练过程抽取训练数据的10%作验证</p>
<blockquote>
<p>history = model.fit([train_X_lstm,train_X_resnet],train_y,verbose=1,epochs=150,batch_size=256,validation_split=0.1,shuffle=True,callbacks=[Checkpoint])</p>
</blockquote>
</blockquote>
<p>但是使用这个参数时,必须注意先对数据Shuffle,据说是因为validation_split只抽取训练集的后面10%数据作验证,如果你前面的数据没有打乱,这样抽取是可能只抽取到一个类别的样本,这样的验证集将没有意义.</p>
<p>所以,使用这个参数前,先将训练数据(标签同步)打乱.</p>
<p>例外需要关注的是:validation_split划分出来的验证集是固定的,不随每次epoch变化</p>
<p><a href="https://keras.io/zh/losses/">官方文档-Losses</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Keras</tag>
      </tags>
  </entry>
  <entry>
    <title>使用LSTM预测航班人数</title>
    <url>/2018/05/17/%E4%BD%BF%E7%94%A8LSTM%E9%A2%84%E6%B5%8B%E8%88%AA%E7%8F%AD%E4%BA%BA%E6%95%B0/</url>
    <content><![CDATA[<p>郑重声明，文章大部分翻译自: <a href="https://machinelearningmastery.com/time-series-prediction-lstm-recurrent-neural-networks-python-keras/"><br />
Time Series Prediction with LSTM Recurrent Neural Networks in Python with Keras</a></p>
<p><strong>数据:</strong> 1949到1960共12年,每年12个月的数据,一共 144 个数据,单位是 1000, 原文数据下载在<a href="https://datamarket.com/data/set/22u3/international-airline-passengers-monthly-totals-in-thousands-jan-49-dec-60#!ds=22u3&amp;display=line">这里</a></p>
<p><strong>目标:</strong> 预测国际航班未来 1 个月的乘客数</p>
<a id="more"></a>
<h2 id="1导入相应库文件及数据情况"><a class="markdownIt-Anchor" href="#1导入相应库文件及数据情况"></a> 1.导入相应库文件及数据情况</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入相应的库</span></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> read_csv</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> LSTM</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> plot_model</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"><span class="keyword">from</span> keras.utils.vis_utils <span class="keyword">import</span> model_to_dot</span><br><span class="line"></span><br><span class="line"><span class="comment">#将数据存储为两个矩阵，一个矩阵的ind位置存储t时刻的值，另一个矩阵存储t+1时刻的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dataset</span>(<span class="params">dataset, look_back=<span class="number">1</span></span>):</span></span><br><span class="line">    dataX, dataY = [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dataset)-look_back-<span class="number">1</span>):</span><br><span class="line">        a = dataset[i:(i+look_back), <span class="number">0</span>]</span><br><span class="line">        dataX.append(a)</span><br><span class="line">        dataY.append(dataset[i + look_back, <span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> numpy.array(dataX), numpy.array(dataY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fix random seed for reproducibility</span></span><br><span class="line">numpy.random.seed(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取数据</span></span><br><span class="line">dataframe = read_csv(<span class="string">&#x27;international-airline-passengers.csv&#x27;</span>, usecols=[<span class="number">1</span>], engine=<span class="string">&#x27;python&#x27;</span>, skipfooter=<span class="number">3</span>)</span><br><span class="line">dataset = dataframe.values</span><br><span class="line">dataset = dataset.astype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数据集</span></span><br><span class="line">print(<span class="string">&#x27;样本中的前面两个数据: \n&#x27;</span>,dataset[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print(<span class="string">&#x27;整个样本的规模: &#x27;</span>,<span class="built_in">len</span>(dataset))</span><br><span class="line"></span><br><span class="line">plt.plot(dataset)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<p>样本中的前面两个数据:<br />
[[112.]  [118.]]<br />
整个样本的规模:  144</p>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613528044762.jpg" alt="数据" title="真实数据在月份上的分布" /></p>
<hr />
<h2 id="2标准化数据划分数据"><a class="markdownIt-Anchor" href="#2标准化数据划分数据"></a> 2.标准化数据,划分数据</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#LSTM对输入数据的规模很敏感，特别是在使用sigmoid（默认）或tanh激活函数时。</span></span><br><span class="line"><span class="comment">#将数据重新调整到0到1的范围（也称为标准化）可能是一种很好的做法。</span></span><br><span class="line"></span><br><span class="line">scaler = MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">dataset = scaler.fit_transform(dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分训练集与测试集,这里使用67%的原始数据作为训练数据,剩下33%作为测试数据</span></span><br><span class="line">train_size = <span class="built_in">int</span>(<span class="built_in">len</span>(dataset) * <span class="number">0.67</span>)</span><br><span class="line">test_size = <span class="built_in">len</span>(dataset) - train_size</span><br><span class="line">train, test = dataset[<span class="number">0</span>:train_size,:], dataset[train_size:<span class="built_in">len</span>(dataset),:]</span><br><span class="line">print(<span class="string">&#x27;划分数据集后的得到的训练数据和测试数据(训练数据未有标签): &#x27;</span>,train.shape,test.shape)</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>:</p>
<blockquote>
<p>划分数据集后的得到的训练数据和测试数据(训练数据未有标签):  (96, 1) (48, 1)</p>
</blockquote>
<hr />
<h2 id="3生成样本"><a class="markdownIt-Anchor" href="#3生成样本"></a> 3.生成样本</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成[t,t+look_back]时间间隔和t+look_back时刻的两个矩阵</span></span><br><span class="line">look_back = <span class="number">1</span></span><br><span class="line">trainX, trainY = create_dataset(train, look_back)</span><br><span class="line">testX, testY = create_dataset(test, look_back)</span><br><span class="line"></span><br><span class="line">print(trainX[:<span class="number">2</span>], trainY[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据被Reshape成 [samples, time steps, features]，这是放入LSTM的shape</span></span><br><span class="line">trainX = numpy.reshape(trainX, (trainX.shape[<span class="number">0</span>], <span class="number">1</span>, trainX.shape[<span class="number">1</span>]))</span><br><span class="line">testX = numpy.reshape(testX, (testX.shape[<span class="number">0</span>], <span class="number">1</span>, testX.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;构造得到模型的输入数据(训练数据已有标签trainY): &#x27;</span>,trainX.shape,testX.shape)</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<p>[[0.01544401] #第一个月份数据<br />
[0.02702703]] #第二个月份数据<br />
[0.02702703 0.05405405]  #每个样本在模型上的应该得到的输出</p>
</blockquote>
<blockquote>
<p>构造得到模型的输入数据(训练数据已有标签trainY):  (95, 1, 1) (47, 1, 1)</p>
</blockquote>
<hr />
<p><strong>这里解释下数据为什么这样划分?</strong><br />
前面我们已经说明了,我们是基于历史数据预测下一时刻的数据,但是每次依赖多少历史数据,我们没有说.这个例子的参数<code>look_back=1</code>设置说明历史数据是1,也就是基于前一个月份数据预测下一个月份数据.下面我以第一年的数据说明数据划分情况.</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613528044763.png" alt="enter description here" title="第一年的数据情况" /></p>
<p>当我们基于1个历史数据预测下一个值时,样本划分就像图示的蓝,红框,蓝色框表示输入模型的数据,红色表示<code>希望</code>模型输出的数据(当然只是希望,会有偏差,后面我们用均方根误差来衡量模型真实输出和这个值的差距).蓝,红框在所有的数据上滑动,得到类似上面的数据划分情况.</p>
<p><mark>当然 #007480</mark>,你也可以改动这个<code>look_back</code>这个值,基于历史多少数据来预测下一个数据可以自己设定.</p>
<p><mark>注意:本来训练数据和测试数据分别有96,48个,但是经过这样划分后都减少1个,分别为95,47.这是因为最后一个数据没有标签.但是测试数据没有必要这样分,因为他不需要标签,这里分的意思是利用分到的标签用于计算模型在测试数据上的均方根误差. #800014</mark></p>
<hr />
<h2 id="4构建lstm网络"><a class="markdownIt-Anchor" href="#4构建lstm网络"></a> 4.构建LSTM网络</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#构建LSTM网络</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(LSTM(<span class="number">4</span>, input_shape=(<span class="number">1</span>, look_back)))</span><br><span class="line">model.add(Dense(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译训练LSTM网络</span></span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;mean_squared_error&#x27;</span>, optimizer=<span class="string">&#x27;adam&#x27;</span>)</span><br><span class="line">model.fit(trainX, trainY, epochs=<span class="number">50</span>, batch_size=<span class="number">1</span>, verbose=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印模型</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存模型</span></span><br><span class="line">SVG(model_to_dot(model,show_shapes=<span class="literal">True</span>).create(prog=<span class="string">&#x27;dot&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;svg&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Epoch <span class="number">1</span>/<span class="number">50</span></span><br><span class="line"><span class="number">95</span>/<span class="number">95</span> [==============================] - 2s 18ms/step - loss: <span class="number">0.0406</span></span><br><span class="line">Epoch <span class="number">2</span>/<span class="number">50</span></span><br><span class="line"><span class="number">95</span>/<span class="number">95</span> [==============================] - 1s 6ms/step - loss: <span class="number">0.0199</span></span><br><span class="line">Epoch <span class="number">3</span>/<span class="number">50</span></span><br><span class="line"><span class="number">95</span>/<span class="number">95</span> [==============================] - 1s 6ms/step - loss: <span class="number">0.0147</span></span><br><span class="line">........后面直到<span class="number">50</span>次省略</span><br><span class="line"></span><br><span class="line"> ______________________________________________________________________________________</span><br><span class="line"> Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line"> ======================================================================================</span><br><span class="line"> lstm_7 (LSTM)                (<span class="literal">None</span>, <span class="number">4</span>)                 <span class="number">96</span>        </span><br><span class="line"> ______________________________________________________________________________________</span><br><span class="line"> dense_7 (Dense)              (<span class="literal">None</span>, <span class="number">1</span>)                 <span class="number">5</span>         </span><br><span class="line"> ======================================================================================</span><br><span class="line"> Total params: <span class="number">101</span></span><br><span class="line"> Trainable params: <span class="number">101</span></span><br><span class="line"> Non-trainable params: <span class="number">0</span></span><br><span class="line"> ______________________________________________________________________________________</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613528044764.png" alt="enter description here" title="模型图示" /></p>
<hr />
<h2 id="5查看模型效果"><a class="markdownIt-Anchor" href="#5查看模型效果"></a> 5.查看模型效果</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用已训练的模型进行预测</span></span><br><span class="line">trainPredict = model.predict(trainX)</span><br><span class="line">testPredict = model.predict(testX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测的值是[0,1]这样的标准化数据，需要将该值转换回原始值</span></span><br><span class="line">trainPredict = scaler.inverse_transform(trainPredict)</span><br><span class="line">trainY = scaler.inverse_transform([trainY])</span><br><span class="line">testPredict = scaler.inverse_transform(testPredict)</span><br><span class="line">testY = scaler.inverse_transform([testY])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算预测的均方根误差</span></span><br><span class="line">trainScore = math.sqrt(mean_squared_error(trainY[<span class="number">0</span>], trainPredict[:,<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">&#x27;Train Score: %.2f RMSE&#x27;</span> % (trainScore))</span><br><span class="line">testScore = math.sqrt(mean_squared_error(testY[<span class="number">0</span>], testPredict[:,<span class="number">0</span>]))</span><br><span class="line">print(<span class="string">&#x27;Test Score: %.2f RMSE&#x27;</span> % (testScore))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图：对训练数据的预测</span></span><br><span class="line">trainPredictPlot = numpy.empty_like(dataset)</span><br><span class="line">trainPredictPlot[:, :] = numpy.nan</span><br><span class="line">trainPredictPlot[look_back:<span class="built_in">len</span>(trainPredict)+look_back, :] = trainPredict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图：对测试数据的预测</span></span><br><span class="line">testPredictPlot = numpy.empty_like(dataset)</span><br><span class="line">testPredictPlot[:, :] = numpy.nan</span><br><span class="line"><span class="comment">#testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict</span></span><br><span class="line">testPredictPlot[<span class="built_in">len</span>(trainPredict)+look_back:<span class="built_in">len</span>(dataset)-<span class="number">1</span>, :] = testPredict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图片</span></span><br><span class="line">plt.plot(scaler.inverse_transform(dataset),color=<span class="string">&#x27;blue&#x27;</span>,label=<span class="string">&#x27;Raw data&#x27;</span>)</span><br><span class="line">plt.plot(trainPredictPlot,color=<span class="string">&#x27;red&#x27;</span>,label=<span class="string">&#x27;Train process&#x27;</span>)</span><br><span class="line">plt.plot(testPredictPlot,color=<span class="string">&#x27;green&#x27;</span>,label=<span class="string">&#x27;Test process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在折线图上显示标签</span></span><br><span class="line">leg = plt.legend(loc=<span class="string">&#x27;best&#x27;</span>, ncol=<span class="number">1</span>, fancybox=<span class="literal">True</span>)</span><br><span class="line">leg.get_frame().set_alpha(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><strong>输出:</strong></p>
<blockquote>
<p>Train Score: 23.39 RMSE   #训练数据的均方根误差<br />
Test Score: 46.92  RMSE  #测试数据的均方根误差</p>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613528044767.png" alt="enter description here" title="模型效果图示" /></p>
<p><mark>蓝色 #0e0080</mark>线是<code>原始数据</code>,<mark>红色 #800028</mark>是<code>训练数据的预测情况</code>,<mark>绿色</mark>是<code>测试数据的预测情况</code>,红色和绿色线越靠近蓝色线,表示模型对数据拟合能力越好.</p>
<hr />
<h2 id="6预测未来的数据"><a class="markdownIt-Anchor" href="#6预测未来的数据"></a> 6.预测未来的数据</h2>
<p>最后一个数据集的下一个月情况没有被预测,现把它拿到后进行预测.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#测试数据的最后一个数据没有预测,这里补上</span></span><br><span class="line">finalX = numpy.reshape(test[-<span class="number">1</span>], (<span class="number">1</span>, <span class="number">1</span>, testX.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#预测得到标准化数据</span></span><br><span class="line">featruePredict = model.predict(finalX)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将标准化数据转换为人数</span></span><br><span class="line">featruePredict = scaler.inverse_transform(featruePredict)</span><br><span class="line"></span><br><span class="line"><span class="comment">#原始数据是1949-1960年的数据,下一个月是1961年1月份</span></span><br><span class="line">print(<span class="string">&#x27;模型预测1961年1月份的国际航班人数是: &#x27;</span>,featruePredict)</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>:</p>
<blockquote>
<p>模型预测1961年1月份的国际航班人数是:  [[430.27188]]</p>
</blockquote>
<hr />
<h2 id="7扩展"><a class="markdownIt-Anchor" href="#7扩展"></a> 7.扩展</h2>
<p>模型有些参数可以自己手动调一下,看看模型在不同参数下的效果(虽然我估计数据量太少,可能调参带来的变化不是很大,但是可以体验调参的过程),下面我就可以调的参数说明:</p>
<blockquote>
<p>(1)损失函数现在使用的是<code>mean_squared_error</code>,可以调成别的<br />
(2)优化器是<code>adam</code>,也可以调,甚至对优化器内的参数进行调整(比如学习率)<br />
(3)训练次数是50,可以调低点(因为我看后面模型的损失不下降了)<br />
(4)基于历史多少数据的参数<code>look_back</code>可调,你可以设置为3,5…</p>
</blockquote>
<p>全部代码可以在<a href="https://files.cnblogs.com/files/wushaogui/%E5%9F%BA%E4%BA%8ELSTM%E7%9A%84%E8%88%AA%E7%8F%AD%E4%B9%98%E5%AE%A2%E9%A2%84%E6%B5%8B.zip">这里</a>找到.</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>LSTM</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter开发环境搭建</title>
    <url>/2018/04/11/Jupyter%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>Jupyter Notebook是一款开放源代码的Web应用程序，允许您创建和共享包含实时代码，方程式，可视化和叙述文本的文档。用途包括：数据清理和转换，数值模拟，统计建模，数据可视化，机器学习等等。</p>
<blockquote>
<p>翻译自<a href="http://jupyter.org/index.html">Jupyter官网</a></p>
</blockquote>
<a id="more"></a>
<h1 id="1jupyter安装"><a class="markdownIt-Anchor" href="#1jupyter安装"></a> 1.Jupyter安装</h1>
<p><strong>2.1检查你的python版本</strong><br />
一般在Linux上直接在命令行执行下面命令便可以可到python版本。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613527089373.gif" alt="enter description here" title="查看系统Python版本" /></p>
<p>在Windows,命令行输入同样命令进行检查。</p>
<p><strong>2.2安装jupyter</strong></p>
<p>如果你的系统是Python 3的版本，输入以下命令安装：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> python3 -m pip install --upgrade pip</span><br><span class="line">python3 -m pip install jupyter</span><br></pre></td></tr></table></figure>
<p>如果你的系统是Python 2的版本，输入以下命令安装：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br><span class="line">python -m pip install jupyter</span><br></pre></td></tr></table></figure>
<h1 id="2notedown插件安装"><a class="markdownIt-Anchor" href="#2notedown插件安装"></a> 2.notedown插件安装</h1>
<p>markdown是一种文字编辑器，通过约定的符号快速写出自己需要的文档。<br />
通过下面命令在jupyter 上安装markdown</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install https://github.com/mli/notedown/tarball/master</span><br></pre></td></tr></table></figure>
<p>插件安装完成后，需要配置启动Jupyter是默认启动markdown插件，配置过程如下：</p>
<p>(1)生成配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<p>(2)修改配置文件<br />
Windows系统下配置文件在：C:\Users\Administrator.jupyter\jupyter_notebook_config.py<br />
Linux系统的配置文件在：~/.jupyter/jupyter_notebook_config.py</p>
<p>打开这个文件，并将下面的配置添加到文件的末尾。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.contents_manager_class = <span class="string">&#x27;notedown.NotedownContentsManager&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="3扩展包安装"><a class="markdownIt-Anchor" href="#3扩展包安装"></a> 3.扩展包安装</h1>
<p>Jupyter notebook extensions是一个为Jupyter notebook提供一系列扩展的库。安装它将极大提升编程效率。</p>
<p><strong>安装</strong><br />
(1) 安装Python包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions</span><br></pre></td></tr></table></figure>
<p>(2)安装js脚本和css文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter contrib nbextension install --user</span><br></pre></td></tr></table></figure>
<p>安装完成后，启动jupyter notebook,会有Nbextensions这一选项，点击会出现如下图情况。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613527089482.png" alt="Nbextensions" /></p>
<p>推荐三个插件：</p>
<blockquote>
<p>1.Collapsible Headings  代码过长时，使用这个来折叠代码，简直不能太爽<br />
2.ExecuteTime 记录Shell的最后运行时间<br />
3.ScrollDown 输出很长时，自动往下刷新</p>
</blockquote>
<h1 id="4运行jupyter"><a class="markdownIt-Anchor" href="#4运行jupyter"></a> 4.运行Jupyter</h1>
<p>Linux/Windows系统均是在命令行中输入<code>jupyter notebook</code>来启动jupyter</p>
<h1 id="5在远端服务器上运行jupyter"><a class="markdownIt-Anchor" href="#5在远端服务器上运行jupyter"></a> 5.在远端服务器上运行jupyter</h1>
<p>通常将jupyter运行在服务器上，然后通过浏览器远程使用jupyter,一般而言，在服务器启动jupyter后，需要交jupyter运行端口映射到本地，然后本地才可以访问。</p>
<p>（1）服务器启动jupyter<br />
登录进服务器后，到你想使用jupyter的目录下运行jupyter,运行方式参考<code>第4步</code></p>
<p>（2）映射服务器端口到地址<br />
服务器启动后，会在命令行告诉你，jupyter是在那个端口执行的。Linux/Mac映射比较简单，Windows目前知道使用Xshell进行映射。</p>
<p><strong>Linux/Mac映射服务器端口</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh tom@172.xx.xx.xx -L 8888:localhost:8888</span><br></pre></td></tr></table></figure>
<p><strong>Windows映射服务器端口</strong><br />
在Xshell上连接到服务器，并已经启动jupyter后，下一步是设置端口映射，进入当前连接的属性界面，点击<code>隧道</code>，将服务器端口与本地端口填上去，确定即可。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613527089387.png" alt="enter description here" title="Xshell映射远程端口" /></p>
<p>参考材料：</p>
<ul>
<li><a href="http://jupyter.org/install">Jupyter官方安装过程</a></li>
<li><a href="https://blog.csdn.net/zsWang9/article/details/78771555">深度学习第一课:MXNet/Gluon环境配置和安装</a>(插件安装部分)</li>
<li><a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions">jupyter_contrib_nbextensions</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>改变ubuntu终端显示语言（桌面系统是中文，终端提示是英文）</title>
    <url>/2018/04/10/%E6%94%B9%E5%8F%98ubuntu%E7%BB%88%E7%AB%AF%E6%98%BE%E7%A4%BA%E8%AF%AD%E8%A8%80%EF%BC%88%E6%A1%8C%E9%9D%A2%E7%B3%BB%E7%BB%9F%E6%98%AF%E4%B8%AD%E6%96%87%EF%BC%8C%E7%BB%88%E7%AB%AF%E6%8F%90%E7%A4%BA%E6%98%AF%E8%8B%B1%E6%96%87%EF%BC%89/</url>
    <content><![CDATA[<p>本文针对linux系统设置为中文后，终端也同步被改为中文，当出现错误提示时，不方便搜索答案，因此需要将终端语言改为英文的</p>
<a id="more"></a>
<p>1.打开终端：<br />
$ vi .bashrc</p>
<p>2.最后添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span>=<span class="string">&quot;linux&quot;</span> ] ;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">export</span> LANGUAGE=en_US</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>关闭当前终端，重新打开终端后命令中的提示就显示英文提示了。</p>
<p>注意对那些中文文件名，文件夹名会显示为乱码。<br />
实际是改变系统两个环境变量  $LANGUAGE 和 $LANG的值（可以用echo $LANG 来查看值）</p>
<p>注：此方法在bash和zsh上均有效</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>读官方Git教程(2)~安装与配置</title>
    <url>/2018/03/25/%E8%AF%BB%E5%AE%98%E6%96%B9Git%E6%95%99%E7%A8%8B(2)~%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>教程内容基本来自<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">git官方教程</a>,认真都了系列的文章,然后对一些重点的记录下来,做了简单的归纳并写上自己的思考.</p>
<a id="more"></a>
<h1 id="1安装"><a class="markdownIt-Anchor" href="#1安装"></a> 1.安装</h1>
<p>在基于 Debian 的发行版上，使用 apt-get安装:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>
<h1 id="2配置"><a class="markdownIt-Anchor" href="#2配置"></a> 2.配置</h1>
<p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p>
<blockquote>
<p>(1)/etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。<br />
(2)~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git 读写此文件。<br />
(3)当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。</p>
</blockquote>
<p>每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。</p>
<p><strong>配置用户信息</strong><br />
当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 使用以下命令配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">git config --global user.email xx@example.com</span><br></pre></td></tr></table></figure>
<p>当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。</p>
<p><strong>配置文本编辑器</strong><br />
Git 会使用操作系统默认的文本编辑器，通常是 Vim。 如果你想使用不同的文本编辑器，例如 Emacs，使用以下命令配置:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.editor emacs</span><br></pre></td></tr></table></figure>
<p><strong>检测配置信息</strong><br />
如果想要检查你的配置，可以使用 git config --list 命令来列出所有 Git 当时能找到的配置。</p>
<p>注:你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置</p>
<p>你可以通过输入 git config <key>来检查 Git 的某一项配置,如查看用户名:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>版本管理</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>读官方Git教程(1)~认识Git</title>
    <url>/2018/03/25/%E8%AF%BB%E5%AE%98%E6%96%B9Git%E6%95%99%E7%A8%8B(1)~%E8%AE%A4%E8%AF%86Git/</url>
    <content><![CDATA[<p>教程内容基本来自<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">git官方教程</a>,认真都了系列的文章,然后对一些重点的记录下来,做了简单的归纳并写上自己的思考.</p>
<a id="more"></a>
<h1 id="1git介绍"><a class="markdownIt-Anchor" href="#1git介绍"></a> 1.Git介绍</h1>
<p><strong>版本控制</strong>是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>
<p>采用版本控制系统（VCS）是个明智的选择。 有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态;  你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因;  又是谁在何时报告了某个功能缺陷等等。 使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。 但额外增加的工作量却微乎其微。</p>
<h1 id="2git版本控制原理"><a class="markdownIt-Anchor" href="#2git版本控制原理"></a> 2.Git版本控制原理</h1>
<p>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。概念上来区分，其它大部分系统以文件变更列表的方式存储信息。下图是一般CSV的设计原理:</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546181169.png" alt="其他版本控制的原理" /></p>
<p>存储的是每个文件与初始版本的差异,即每个版本相当于以增量的方式存储当前版本与初始版本的差异.</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546181170.png" alt="Git版本控制原理" /></p>
<p>Git不采用这种方式,而是是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。Git 对待数据更像是一个 <strong>快照流</strong>。</p>
<h1 id="3git特点"><a class="markdownIt-Anchor" href="#3git特点"></a> 3.Git特点</h1>
<p><strong>3.1本地操作</strong><br />
在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。</p>
<p>举个例子，要浏览项目的历史，Git 不需外连到服务器去获取历史，然后再显示出来——它只需直接从本地数据库中读取。 你能立即看到项目历史。 如果你想查看当前版本与一个月前的版本之间引入的修改，Git 会查找到一个月前的文件做一次本地的差异计算，而不是由远程服务器处理或从远程服务器拉回旧版本文件再来本地处理。</p>
<p><strong>3.2数据完整性</strong><br />
Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。同时, 若你在传送过程中丢失信息或损坏文件，Git 就能发现。</p>
<p><strong>3.3一般只添加数据</strong><br />
你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。</p>
<h1 id="4git中文件的三种状态"><a class="markdownIt-Anchor" href="#4git中文件的三种状态"></a> 4.Git中文件的三种状态</h1>
<p>Git 有三种状态，你的文件可能处于其中之一：</p>
<blockquote>
<p>a.已提交（committed)   已提交表示数据已经安全的保存在本地数据库中。<br />
b.已修改（modified）  已修改表示修改了文件，但还没保存到数据库中。<br />
c.已暂存（staged)   已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</p>
</blockquote>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546181176.png" alt="工作目录、暂存区域以及 Git 仓库" /></p>
<p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p>
<p>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>
<p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作<code>索引</code>，不过一般说法还是叫暂存区域。</p>
<p>基本的 Git 工作流程如下：</p>
<blockquote>
<p>在工作目录中修改文件。<br />
暂存文件，将文件的快照放入暂存区域。<br />
提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</p>
</blockquote>
<p>如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>版本管理</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>对深度学习优化函数的理解</title>
    <url>/2017/11/12/%E5%AF%B9%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%BC%98%E5%8C%96%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>本文介绍深度学习中如何使用优化函数</p>
<a id="more"></a>
<h1 id="深度学习常用优化方法"><a class="markdownIt-Anchor" href="#深度学习常用优化方法"></a> 深度学习常用优化方法</h1>
<blockquote>
<p>1.对于稀疏数据，尽量使用学习率可自适应的优化方法，不用手动调节，而且最好采用默认值<br />
2.SGD通常训练时间更长，但是在好的初始化和学习率调度方案的情况下，结果更可靠<br />
3.如果在意更快的收敛，并且需要训练较深较复杂的网络时，推荐使用学习率自适应的优化方法。<br />
4.Adadelta，RMSprop，Adam是比较相近的算法，在相似的情况下表现差不多。<br />
5.在想使用带动量的RMSprop，或者Adam的地方，大多可以使用Nadam取得更好的效果</p>
</blockquote>
<h2 id="sgd"><a class="markdownIt-Anchor" href="#sgd"></a> SGD</h2>
<blockquote>
<p>随机梯度下降,算法在每读入一个数据都会立刻区计算loss function的梯度来update参数．</p>
<p>优点：:收敛的速度快；可以实现在线更新；能够跳出局部最优<br />
缺点：很容易陷入到局部最优，困在马鞍点</p>
</blockquote>
<h2 id="bgd"><a class="markdownIt-Anchor" href="#bgd"></a> BGD</h2>
<blockquote>
<p>批量梯度下降，算法在读取整个数据集后累加来计算损失函数的的梯度<br />
优点：如果loss function为convex，则基本可以找到全局最优解<br />
缺点：数据处理量大，导致梯度下降慢;不能实时增加实例，在线更新；训练占内存</p>
</blockquote>
<h2 id="mini-bgd"><a class="markdownIt-Anchor" href="#mini-bgd"></a> Mini-BGD</h2>
<blockquote>
<p>小批量数据进行梯度下降，这个优化方法用的也是比较多的，计算效率高而且收敛稳定，是现在深度学习的主流方法</p>
</blockquote>
<h2 id="带动量"><a class="markdownIt-Anchor" href="#带动量"></a> 带动量</h2>
<h3 id="momentum"><a class="markdownIt-Anchor" href="#momentum"></a> Momentum</h3>
<blockquote>
<p>在更新方向的时候保留之前的方向，增加稳定性而且还有摆脱局部最优的能力</p>
</blockquote>
<h3 id="nesterov"><a class="markdownIt-Anchor" href="#nesterov"></a> Nesterov</h3>
<blockquote>
<p>nesterov项在梯度更新时做一个校正，避免前进太快，同时提高灵敏度，滚雪球游戏中，我们希望有一个智能的雪球，它能够预知运动的方向，以至于当它再次遇到斜坡的时候会减慢速度。</p>
</blockquote>
<h2 id="自适应学习率算法"><a class="markdownIt-Anchor" href="#自适应学习率算法"></a> 自适应学习率算法</h2>
<h3 id="adagrad"><a class="markdownIt-Anchor" href="#adagrad"></a> Adagrad</h3>
<blockquote>
<p>自适应梯度算法,是一种改进的随机梯度下降算法<br />
以前的算法中，每一个参数都使用相同的学习率α. Adagrad算法能够在训练中自动对learning_rate进行调整，出现频率较低参数采用较大的α更新．出现频率较高的参数采用较小的α更新．根据描述这个优化方法很适合处理稀疏数据．<br />
Adagrad算法主要的缺点在于，其分母梯度平方的累加和。因为每次加入的都是一个正数，随着训练的进行，学习率将会变得无限小，此时算法将不能进行参数的迭代更新。</p>
</blockquote>
<h3 id="adadelta"><a class="markdownIt-Anchor" href="#adadelta"></a> Adadelta</h3>
<blockquote>
<p>Adadelta算法是adagrad算法的改进版，它主要解决了adagrad算法单调递减学习率的问题。通过约束历史梯度累加来替代累加所有历史梯度平方。这里通过在历史梯度上添加衰减因子，并通过迭代的方式来对当前的梯度进行计算，最终距离较远的梯度对当前的影响较小，而距离当前时刻较近的梯度对当前梯度的计算影响较大</p>
</blockquote>
<h3 id="rmsprop"><a class="markdownIt-Anchor" href="#rmsprop"></a> RMSprop</h3>
<blockquote>
<p>一种自适应学习率方法．不同之处在于，Adagrad会累加之前所有的梯度平方，RMProp仅仅是计算对应的平均值．可以缓解Adagrad算法学习率下降较快的问题．<br />
RMSPprop算法和adadelta算法都是adagrad算法的优化版，用于解决adagrad算法学习率消失的问题，从最终的计算公式来看，RMSProp算法和Adadelta算法有相似的计算表达式</p>
</blockquote>
<h3 id="adam"><a class="markdownIt-Anchor" href="#adam"></a> Adam</h3>
<blockquote>
<p>Adam是对RMSProp优化器的更新.它利用梯度的一阶矩估计和二阶矩估计动态调整每个参数的学习率。Adam的优点主要在于经过偏置校正后，每一次迭代学习率都有个确定范围，使得参数比较平稳。Adam算法可以看作是RMSProp算法和Momentum的结合版。RMSProp算法通过对历史梯度平方乘上衰减因子来计算v(t)，动量则计算历史梯度。</p>
</blockquote>
<h3 id="adamax"><a class="markdownIt-Anchor" href="#adamax"></a> Adamax</h3>
<blockquote>
<p>Adamax是Adam的一种变体，此方法对学习率的上限提供了一个更简单的范围</p>
</blockquote>
<h3 id="nadam"><a class="markdownIt-Anchor" href="#nadam"></a> Nadam</h3>
<blockquote>
<p>Nadam类似于带有Nesterov动量项的Adam</p>
</blockquote>
<p>概要: 上面的方法都存在一个问题，就是update更新的方向完全依赖于计算出来的梯度．很容易陷入局部最优的马鞍点．能不能改变其走向，又保证原来的梯度方向．就像向量变换一样，我们模拟物理中物体流动的动量概念(惯性).引入Momentum的概念</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>优化函数</tag>
      </tags>
  </entry>
  <entry>
    <title>对深度学习dropout机制的理解</title>
    <url>/2017/11/10/%E5%AF%B9%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0dropout%E6%9C%BA%E5%88%B6%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>本文介绍深度学习中的dropout机制</p>
<a id="more"></a>
<h1 id="1定义"><a class="markdownIt-Anchor" href="#1定义"></a> 1.定义</h1>
<p>随机失活（dropout）是对具有深度结构的人工神经网络进行优化的方法，在学习过程中通过将隐含层的部分权重或输出随机归零，降低节点间的相互依赖性（co-dependence ）从而实现神经网络的正则化（regularization），降低其结构风险（structural risk）</p>
<h1 id="2过程"><a class="markdownIt-Anchor" href="#2过程"></a> 2.过程</h1>
<ol>
<li>由于每次用输入网络的样本进行权值更新时，隐含节点都是以一定概率随机出现，因此不能保证每2个隐含节点每次都同时出现，这样权值的更新不再依赖于有固定关系隐含节点的共同作用，阻止了某些特征仅仅在其它特定特征下才有效果的情况。</li>
<li>可以将dropout看作是模型平均的一种。对于每次输入到网络中的样本（可能是一个样本，也可能是一个batch的样本），其对应的网络结构都是不同的，但所有的这些不同的网络结构又同时share隐含节点的权值。这样不同的样本就对应不同的模型，是bagging的一种极端情况。个人感觉这个解释稍微靠谱些，和bagging，boosting理论有点像，但又不完全相同。</li>
<li>native bayes是dropout的一个特例。Native bayes有个错误的前提，即假设各个特征之间相互独立，这样在训练样本比较少的情况下，单独对每个特征进行学习，测试时将所有的特征都相乘，且在实际应用时效果还不错。而Droput每次不是训练一个特征，而是一部分隐含层特征。</li>
<li>还有一个比较有意思的解释是，Dropout类似于性别在生物进化中的角色，物种为了使适应不断变化的环境，性别的出现有效的阻止了过拟合，即避免环境改变时物种可能面临的灭亡。</li>
</ol>
<p>Dropout是指在模型训练时随机让网络某些隐含层节点的权重不工作，不工作的那些节点可以暂时认为不是网络结构的一部分，但是它的权重得保留下来（只是暂时不更新而已），因为下次样本输入时它可能又得工作了。</p>
<h1 id="3过拟合"><a class="markdownIt-Anchor" href="#3过拟合"></a> ３.过拟合</h1>
<p>（1）取平均的作用：先回到标准的模型即没有dropout，我们用相同的训练数据去训练5个不同的神经网络，一般会得到5个不同的结果，此时我们可以采用 “5个结果取均值”或者“多数取胜的投票策略”去决定最终结果。例如3个网络判断结果为数字9,那么很有可能真正的结果就是数字9，其它两个网络给出了错误结果。这种“综合起来取平均”的策略通常可以有效防止过拟合问题。因为不同的网络可能产生不同的过拟合，取平均则有可能让一些“相反的”拟合互相抵消。dropout掉不同的隐藏神经元就类似在训练不同的网络，随机删掉一半隐藏神经元导致网络结构已经不同，整个dropout过程就相当于对很多个不同的神经网络取平均。而不同的网络产生不同的过拟合，一些互为“反向”的拟合相互抵消就可以达到整体上减少过拟合。</p>
<p>（2）减少神经元之间复杂的共适应关系：因为dropout程序导致两个神经元不一定每次都在一个dropout网络中出现。这样权值的更新不再依赖于有固定关系的隐含节点的共同作用，阻止了某些特征仅仅在其它特定特征下才有效果的情况 。迫使网络去学习更加鲁棒的特征 ，这些特征在其它的神经元的随机子集中也存在。换句话说假如我们的神经网络是在做出某种预测，它不应该对一些特定的线索片段太过敏感，即使丢失特定的线索，它也应该可以从众多其它线索中学习一些共同的特征。从这个角度看dropout就有点像L1，L2正则，减少权重使得网络对丢失特定神经元连接的鲁棒性提高。</p>
<p>（3）Dropout类似于性别在生物进化中的角色：物种为了生存往往会倾向于适应这种环境，环境突变则会导致物种难以做出及时反应，性别的出现可以繁衍出适应新环境的变种，有效的阻止过拟合，即避免环境改变时物种可能面临的灭绝。</p>
<h1 id="4理解"><a class="markdownIt-Anchor" href="#4理解"></a> ４.理解</h1>
<p>当前Dropout被大量利用于全连接网络，而且一般认为设置为0.5或者0.3，而在卷积网络隐藏层中由于卷积自身的稀疏化以及稀疏化的ReLu函数的大量使用等原因，Dropout策略在卷积网络隐藏层中使用较少。</p>
<p>Dropout是一种Bagging的近似：Bagging定义k个不同的模型，从training set采样出k个不同的数据集，在第i个模型上用第i个数据集进行训练，最后综合k个模型的结果，获得最终的模型。但是需要的空间、时间都很大，在DNN中并不现实。Dropout的目的是在指数级子网络的深度神经网络中近似Bagging。也就是说，在训练时，每次Dropout后，训练的网络是整个深度神经网络的其中一个子网络。在测试时，将dropout层取消，这样得到的前向传播结果其实就是若干个子网络前向传播综合结果的一种近似。dropout,以0.5的概率将每个隐藏神经元的输出设置为0，以这种方式被抑制的神经元既不参与前向也不参与反向传播。每次输入一个样本，相当于该神经网络尝试一个新结构，但是这些结构之间的共享权值，因为神经元不能依赖其他的神经元而存在，所以这种技术降低了神经元复杂的互适应性，因此，网络需要被迫学习更加健壮的特征，这些特征结合其他神经元的一些不同随机子集时很有用，如果没有dropout网络会出现大量的过拟合，dropout使收敛所需的迭代次数增加一倍。</p>
<p>参考资料：<br />
<a href="https://cloud.tencent.com/developer/news/246964">深度学习中Dropout原理解析</a><br />
<a href="https://www.cnblogs.com/tornadomeet/p/3258122.html">Deep learning：四十一(Dropout简单理解)</a><br />
<a href="https://baike.baidu.com/item/%E9%9A%8F%E6%9C%BA%E5%A4%B1%E6%B4%BB/23293814?fromtitle=dropout&amp;fromid=23294126&amp;fr=aladdin">随机失活</a><br />
<a href="https://blog.csdn.net/weixin_41108334/article/details/83827332">深度学习：经典网络模型lenet,alexnet,vggnet,googlenet,Resnet,densenet可解释性</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>dropout</tag>
      </tags>
  </entry>
  <entry>
    <title>对深度学习梯度的理解</title>
    <url>/2017/11/10/%E5%AF%B9%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A2%AF%E5%BA%A6%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>本文介绍深度学习中的梯度及其问题</p>
<a id="more"></a>
<h1 id="1梯度"><a class="markdownIt-Anchor" href="#1梯度"></a> 1.梯度</h1>
<p>梯度的本意是一个向量（矢量），表示某一函数在该点处的方向导数沿着该方向取得最大值，即函数在该点处沿着该方向（此梯度的方向）变化最快，变化率最大（为该梯度的模），梯度的反方向是f降低最快的方向。</p>
<p>在单变量的实值函数的情况，梯度只是导数，或者，对于一个线性函数，也就是线的斜率。<br />
在多变量的实值函数的情况，梯度只是各个变量的偏导数，并把这些偏导数写成向量的形式。</p>
<h1 id="2梯度消失"><a class="markdownIt-Anchor" href="#2梯度消失"></a> 2.梯度消失</h1>
<p>许多激活函数将输出值挤压在很小的区间内，在激活函数两端较大范围的定义域内梯度为0，导致权重更新的缓慢训练难度增加，造成学习停止。前面层上的梯度是来自后面的层上项的乘积，当层数过多时，随着乘积的累积，将越来越小。</p>
<p>从深层网络角度来讲，不同的层学习的速度差异很大，表现为网络中靠近输出的层学习的情况很好，靠近输入的层学习的很慢，有时甚至训练了很久，前几层的权值和刚开始随机初始化的值差不多。</p>
<p>具体来说，我们常常使用sigmoid作为神经元的输入输出函数。对于幅度为1的信号，在BP反向传播梯度时，每传递一层，梯度衰减为原来的0.25。</p>
<h1 id="3梯度爆炸"><a class="markdownIt-Anchor" href="#3梯度爆炸"></a> 3.梯度爆炸</h1>
<p>训练过程中表现为loss为Nan，使得学习过程难以继续。当网络过深，如果连乘的因子大部分小于1，最后乘积可能趋于0；另一方面，如果连乘的因子大部分大于1，最后乘积可能趋于无穷。这就是所谓的梯度消失与梯度爆炸。</p>
<h1 id="4解决思路"><a class="markdownIt-Anchor" href="#4解决思路"></a> ４.解决思路：</h1>
<h2 id="1pre-training-fine-tuning"><a class="markdownIt-Anchor" href="#1pre-training-fine-tuning"></a> 1.Pre-training + fine-tuning</h2>
<p>每次训练一层，训练完成BP所有层</p>
<h2 id="2合理的初始化权重"><a class="markdownIt-Anchor" href="#2合理的初始化权重"></a> 2.合理的初始化权重</h2>
<p>为了防止梯度爆炸或者梯度消失,我们希望wi尽可能小,最合理的方法就是设置W方差为k/n表示神经元的输入特征数量,k根据选择的激活函数不同而不同。为什么不初始化为0或者随机初始化呢？理由如下：<br />
<strong>将所有权重初始化为零</strong>会使模型相当于是一个线性模型，因为如果将权重初始化为零，那么损失函数对每个 w 的梯度都会是一样的，这样在接下来的迭代中，同一层内所有神经元的梯度相同，梯度更新也相同，所有的权重也都会具有相同的值，这样的神经网络和一个线性模型的效果差不多。（将 biases 设为零不会引起多大的麻烦，即使 bias 为 0，每个神经元的值也是不同的。）<br />
<strong>随机初始化</strong>将权重进行随机初始化，使其服从标准正态分布 （ np.random.randn(size_l, size_l-1) ）<br />
在训练深度神经网络时可能会造成两个问题，梯度消失和梯度爆炸。</p>
<h2 id="2梯度剪切-正则"><a class="markdownIt-Anchor" href="#2梯度剪切-正则"></a> 2.梯度剪切、正则</h2>
<p>梯度剪切这个方案主要是针对梯度爆炸提出的，其思想是设置一个梯度剪切阈值，然后更新梯度的时候，如果梯度超过这个阈值，那么就将其强制限制在这个范围之内。这可以防止梯度爆炸。另外一种解决梯度爆炸的手段是采用权重正则化（weithts regularization）比较常见的是l1 l1l1正则，和l2 l2l2正则,正则化是通过对网络权重做正则限制过拟合。</p>
<h2 id="3relu-leakyrelu-elu等激活函数缓解梯度消失"><a class="markdownIt-Anchor" href="#3relu-leakyrelu-elu等激活函数缓解梯度消失"></a> 3.Relu、leakyReLu、Elu等激活函数缓解梯度消失</h2>
<p>Relu思想也很简单，如果激活函数的导数为1，那么就不存在梯度消失爆炸的问题了，每层的网络都可以得到相同的更新速度，relu就这样应运而生。</p>
<h2 id="4batchnorm"><a class="markdownIt-Anchor" href="#4batchnorm"></a> 4.batchnorm</h2>
<p>BN反向传播式子中有权重w 的存在，所以w 的大小影响了梯度的消失和爆炸，batchnorm就是通过对每一层的输出规范为均值和方差一致的方法，消除了w带来的放大缩小的影响，进而解决梯度消失和爆炸的问题，或者可以理解为BN将输出从饱和区拉倒了非饱和区。</p>
<h2 id="5残差机制"><a class="markdownIt-Anchor" href="#5残差机制"></a> 5.残差机制</h2>
<p>残差机制短路机制可以无损地传播梯度，而另外一项残差梯度则需要经过带有weights的层，梯度不是直接传递过来的。残差梯度不会那么巧全为-1，而且就算其比较小，有1的存在也不会导致梯度消失。所以残差学习会更容易。</p>
<h2 id="6lstm"><a class="markdownIt-Anchor" href="#6lstm"></a> 6.LSTM</h2>
<p>LSTM不那么容易发生梯度消失的，主要原因在于LSTM内部复杂的“门”，LSTM通过它内部的“门”可以接下来更新的时候“记住”前几次训练的”残留记忆“</p>
<p>参考：<br />
<a href="https://baike.baidu.com/item/%E6%A2%AF%E5%BA%A6/13014729">梯度</a><br />
<a href="https://blog.csdn.net/zhaomengszu/article/details/77834845">大白话讲解BP算法</a><br />
<a href="https://www.cnblogs.com/mengnan/p/9480804.html">神经网络中的梯度消失</a><br />
<a href="https://www.jianshu.com/p/b4739a40004d">梯度消失，梯度爆炸</a><br />
<a href="https://blog.csdn.net/u013555719/article/details/78319568">改善深层神经网络_深度学习的实用层面1.10_1.12/梯度消失/梯度爆炸/权重初始化</a><br />
<a href="https://blog.csdn.net/u013250416/article/details/81410693">梯度消失与梯度爆炸、Loss为Nan的原因</a><br />
<a href="https://www.jianshu.com/p/332c5cb15933">权重初始化的几个方法</a><br />
<a href="https://blog.csdn.net/qq_25737169/article/details/78847691">详解机器学习中的梯度消失、爆炸原因及其解决方法</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>梯度</tag>
      </tags>
  </entry>
  <entry>
    <title>对深度学习激活函数的理解</title>
    <url>/2017/11/08/%E5%AF%B9%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>激活函数是深度学习中重要的构件，本文从深度学习的激活函数的使用及类型来解析</p>
<a id="more"></a>
<h1 id="深度学习-激活函数"><a class="markdownIt-Anchor" href="#深度学习-激活函数"></a> 深度学习－激活函数</h1>
<h2 id="激活函数"><a class="markdownIt-Anchor" href="#激活函数"></a> 激活函数</h2>
<blockquote>
<p>当没有神经网络的时候，神经元对数据的处理就是基于权重和偏移做线性变换。线性变换很简单，但是限制了对复杂任务的处理能力。没有激活函数的神经网络就是一个线性回归模型。激活函数做的非线性变换可以使得神经网络处理非常复杂的任务。例如，我们希望我们的神经网络可以对语言翻译和图像分类做操作，这就需要非线性转换。</p>
<p>同时，激活函数也使得反向传播算法变的可能。因为，这时候梯度和误差会被同时用来更新权重和偏移。没有可微分的线性函数(wx+b导数为w,每次更新只是二维图中直线的旋转)，这就不可能了。</p>
</blockquote>
<h2 id="激活函数类型"><a class="markdownIt-Anchor" href="#激活函数类型"></a> 激活函数类型</h2>
<h3 id="linear"><a class="markdownIt-Anchor" href="#linear"></a> linear</h3>
<blockquote>
<p>线性激活函数</p>
</blockquote>
<h3 id="sigmoid"><a class="markdownIt-Anchor" href="#sigmoid"></a> sigmoid</h3>
<blockquote>
<p>sigmoid函数也叫 Logistic 函数，用于隐层神经元输出，取值范围为(0,1)，它可以将一个实数映射到(0,1)的区间，可以用来做二分类。<br />
在特征相差比较复杂或是相差不是特别大时效果比较好。</p>
<p>sigmoid缺点：<br />
激活函数计算量大，反向传播求误差梯度时，求导涉及除法<br />
反向传播时，很容易就会出现梯度消失的情况，从而无法完成深层网络的训练<br />
Sigmoids函数饱和且kill掉梯度。<br />
Sigmoids函数收敛缓慢。</p>
</blockquote>
<h3 id="tanh"><a class="markdownIt-Anchor" href="#tanh"></a> tanh</h3>
<blockquote>
<p>也称为双切正切函数，取值范围为[-1,1]。<br />
tanh在特征相差明显时的效果会很好，在循环过程中会不断扩大特征效果。<br />
与 sigmoid 的区别是，tanh 是 0 均值的，比Sigmoid函数收敛速度更快，因此实际应用中 tanh 会比 sigmoid 更好，但是没有改变Sigmoid函数的最大问题——由于饱和性产生的梯度消失</p>
</blockquote>
<h3 id="relu"><a class="markdownIt-Anchor" href="#relu"></a> relu</h3>
<blockquote>
<p>整流线性单元<br />
使用 ReLU 得到的 SGD 的收敛速度会比 sigmoid/tanh 快很多</p>
<p>ReLU 的缺点：<br />
训练的时候很”脆弱”，很容易就”die”了<br />
例如，一个非常大的梯度流过一个 ReLU 神经元，更新过参数之后，这个神经元再也不会对任何数据有激活现象了，那么这个神经元的梯度就永远都会是 0.<br />
如果 learning rate 很大，那么很有可能网络中的 40% 的神经元都”dead”了。</p>
</blockquote>
<h3 id="leaky-relu-p-relu-r-relu"><a class="markdownIt-Anchor" href="#leaky-relu-p-relu-r-relu"></a> Leaky-ReLU、P-ReLU、R-ReLU</h3>
<blockquote>
<p>Leaky ReLU 的概念是：当 x &lt; 0 时，它得到 0.1 的正梯度。该函数一定程度上缓解了 dead ReLU 问题，但是使用该函数的结果并不连贯。尽管它具备 ReLU 激活函数的所有特征，如计算高效、快速收敛、在正区域内不会饱和。</p>
<p>Leaky ReLU 可以得到更多扩展。不让 x 乘常数项，而是让 x 乘超参数，这看起来比 Leaky ReLU 效果要好。该扩展就是 Parametric ReLU。</p>
<p>Randomized ReLU，在测试阶段，把训练过程中所有的 αij 取个平均值。</p>
<p>总之，最好使用 ReLU，但是你可以使用 Leaky ReLU 或 Parametric ReLU 实验一下，看看它们是否更适合你的问题。</p>
</blockquote>
<h3 id="maxout"><a class="markdownIt-Anchor" href="#maxout"></a> Maxout</h3>
<blockquote>
<p>Maxout 是对 ReLU 和 Leaky ReLU 的一般化归纳。<br />
这样 Maxout 神经元就拥有 ReLU 单元的所有优点（线性和不饱和），而没有它的缺点（死亡的 ReLU 单元）。然而和 ReLU 对比，它每个神经元的参数数量增加了一倍，这就导致整体参数的数量激增。</p>
</blockquote>
<h3 id="softplus"><a class="markdownIt-Anchor" href="#softplus"></a> Softplus</h3>
<blockquote>
<p>softplus可以看作是ReLu的平滑。根据神经科学家的相关研究，softplus和ReLu与脑神经元激活频率函数有神似的地方。也就是说，相比于早期的激活函数，softplus和ReLu更加接近脑神经元的激活模型，而神经网络正是基于脑神经科学发展而来，这两个激活函数的应用促成了神经网络研究的新浪潮。ReLU是目前深度学习模型中应用最火热的激活函数之一。</p>
</blockquote>
<h3 id="softmax"><a class="markdownIt-Anchor" href="#softmax"></a> softmax</h3>
<blockquote>
<p>Softmax - 用于多分类神经网络输出</p>
</blockquote>
<h3 id="elu"><a class="markdownIt-Anchor" href="#elu"></a> ELU</h3>
<blockquote>
<p>指数化线性单元<br />
优点：ELU具备Relu的优点，同时ELU也解决了Relu函数自身“死区”问题。不过ELU函数指数操作稍稍加大了工作量，实际计算中ELU中超参数λ一般设置为1。</p>
</blockquote>
<h3 id="selu"><a class="markdownIt-Anchor" href="#selu"></a> selu</h3>
<blockquote>
<p>可伸缩的指数线性单元</p>
</blockquote>
<h3 id="exponential"><a class="markdownIt-Anchor" href="#exponential"></a> exponential</h3>
<blockquote>
<p>自然数指数激活函数</p>
</blockquote>
<h2 id="激活函数选择"><a class="markdownIt-Anchor" href="#激活函数选择"></a> 激活函数选择</h2>
<blockquote>
<p>１．Sigmoid 和 ReLU 比较：sigmoid 的梯度消失问题，ReLU 的导数就不存在这样的问题<br />
２．Sigmoid 和 Softmax 区别：sigmoid将一个real value映射到（0,1）的区间，用来做二分类， softmax 把一个 k 维的real value向量映射成一个b维,其中 b维 是一个 0～1 的常数，输出神经元之和为 1.0，所以相当于概率值，然后可以根据 bi 的概率大小来进行多分类的任务。<br />
３．Sigmoid 和 tanh(x) 不建议使用；<br />
４．Relu最常用；<br />
５．为了进一步提高模型精度，Leaky Relu、参数化Relu、随机化Relu 和 ELU 均可尝试（但四者之间无绝对的高下之分）。<br />
６．在较深层的神经网络中，选用relu激活函数能使梯度更好地传播回去，但当使用softmax作为最后一层的激活函数时，其前一层最好不要使用relu进行激活，而是使用tanh作为替代，否则最终的loss很可能变成Nan；<br />
７．当选用高级激活函数时，建议的尝试顺序为ReLU-&gt;ELU-&gt;PReLU-&gt;MPELU，因为前两者没有超参数，而后两者需要自己调节参数使其更适应构建的网络结构。</p>
</blockquote>
<p>参考：<br />
<a href="https://www.cnblogs.com/lovychen/p/7561895.html">深度学习激活函数比较</a><br />
<a href="https://blog.csdn.net/hai008007/article/details/79749557">深度学习中激活函数的作用</a><br />
<a href="https://blog.csdn.net/qq_33221533/article/details/80973829">深度学习中的激活函数</a><br />
<a href="https://cloud.tencent.com/developer/article/1347786">深度学习: 激活函数 (Activation Functions)</a><br />
<a href="https://blog.csdn.net/cyh_24/article/details/50593400">神经网络之激活函数(Activation Function)</a><br />
<a href="https://www.jianshu.com/p/6158d88a4512">深度学习中的激活函数</a><br />
<a href="http://www.360doc.com/content/17/1102/21/1489589_700400500.shtml">深度学习中的主要激活函数有哪些？</a><br />
<a href="https://www.jianshu.com/p/916243941347">深度学习之激活函数详解</a><br />
<a href="https://blog.csdn.net/siyue0211/article/details/80480396">[深度学习] 激活函数</a><br />
<a href="https://www.cnblogs.com/liuyu124/p/7332471.html">浅谈深度学习中的激活函数 - The Activation Function in Deep Learning</a><br />
<a href="https://keras.io/zh/activations/">激活函数的用法</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>激活函数</tag>
      </tags>
  </entry>
  <entry>
    <title>对深度学习预训练的理解</title>
    <url>/2017/11/06/%E5%AF%B9%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%A2%84%E8%AE%AD%E7%BB%83%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>本文从原理及使用方法，介绍深度学习中的预训练操作</p>
<a id="more"></a>
<h2 id="1什么使用预训练"><a class="markdownIt-Anchor" href="#1什么使用预训练"></a> 1.什么使用预训练？</h2>
<p>深度网络存在以下缺点：1. 网络越深，需要的训练样本数越多。若用监督则需大量标注样本，不然小规模样本容易造成过拟合。（深层网络意味着特征比较多，机器学习里面临多特征：a.多样本 b.规则化c.特征选择）2. 多层神经网络参数优化是个高阶非凸优化问题，常收敛较差的局部解3. 梯度扩散问题。BP算法计算出的梯度随着深度向前而显著下降，导致前面网络参数贡献很小，更新速度慢。</p>
<p>解决方法：逐层贪婪训练。无监督预训练（unsupervised pre-training）即训练网络的第一个隐藏层，再训练第二个，最后用这些训练好的网络参数值作为整个网络参数的初始值。  无监督学习—&gt;参数初始值；监督学习—&gt;fine-tuning，即训练有标注样本。经过预训练最终能得到比较好的局部最优解。简单来说，预训练模型(pre-trained model)是前人为了解决类似问题所创造出来的模型。你在解决问题的时候，不用从零开始训练一个新模型，可以从在类似问题中训练过的模型入手。</p>
<h2 id="2选择预训练模型"><a class="markdownIt-Anchor" href="#2选择预训练模型"></a> 2.选择预训练模型</h2>
<p>当在训练经网络的时候我们的目标是什么？我们希望网络能够在多次正向反向迭代的过程中，找到合适的权重。<br />
  通过使用之前在大数据集上经过训练的预训练模型，我们可以直接使用相应的结构和权重，将它们应用到我们正在面对的问题上。这被称作是“迁移学习”，即将预训练的模型“迁移”到我们正在应对的特定问题中。<br />
  在选择预训练模型的时候你需要非常仔细，如果你的问题与预训练模型训练情景下有很大的出入，那么模型所得到的预测结果将会非常不准确。<br />
  举例来说，如果把一个原本用于语音识别的模型用来做用户识别，那结果肯定是不理想的。<br />
  幸运的是，Keras库中有许多这类预训练的结构。<br />
  ImageNet数据集已经被广泛用作训练集，因为它规模足够大(包括120万张图片)，有助于训练普适模型。ImageNet的训练目标，是将所有的图片正确地划分到1000个分类条目下。这1000个分类基本上都来源于我们的日常生活，比如说猫猫狗狗的种类，各种家庭用品，日常通勤工具等等。<br />
  在迁移学习中，这些预训练的网络对于ImageNet数据集外的图片也表现出了很好的泛化性能。<br />
  既然预训练模型已经训练得很好，我们就不会在短时间内去修改过多的权重，在迁移学习中用到它的时候，往往只是进行微调(fine tune)。<br />
  在修改模型的过程中，我们通过会采用比一般训练模型更低的学习速率。</p>
<h2 id="3微调模型的方法"><a class="markdownIt-Anchor" href="#3微调模型的方法"></a> 3.微调模型的方法</h2>
<p>a.特征提取<br />
  我们可以将预训练模型当做特征提取装置来使用。具体的做法是，将输出层去掉，然后将剩下的整个网络当做一个固定的特征提取机，从而应用到新的数据集中。</p>
<p>b.采用预训练模型的结构<br />
  我们还可以采用预训练模型的结构，但先将所有的权重随机化，然后依据自己的数据集进行训练。</p>
<p>c.训练特定层，冻结其他层<br />
  另一种使用预训练模型的方法是对它进行部分的训练。具体的做法是，将模型起始的一些层的权重保持不变，重新训练后面的层，得到新的权重。在这个过程中，我们可以多次进行尝试，从而能够依据结果找到frozen layers和retrain layers之间的最佳搭配。<br />
  如何使用与训练模型，是由数据集大小和新旧数据集(预训练的数据集和我们要解决的数据集)之间数据的相似度来决定的。</p>
<p><strong>场景一：数据集小，数据相似度高(与pre-trained model的训练数据相比而言)</strong><br />
  在这种情况下，因为数据与预训练模型的训练数据相似度很高，因此我们不需要重新训练模型。我们只需要将输出层改制成符合问题情境下的结构就好。<br />
  我们使用预处理模型作为模式提取器。<br />
  比如说我们使用在ImageNet上训练的模型来辨认一组新照片中的小猫小狗。在这里，需要被辨认的图片与ImageNet库中的图片类似，但是我们的输出结果中只需要两项——猫或者狗。<br />
  在这个例子中，我们需要做的就是把dense layer和最终softmax layer的输出从1000个类别改为2个类别。</p>
<p><strong>场景二：数据集小，数据相似度不高</strong><br />
  在这种情况下，我们可以冻结预训练模型中的前k个层中的权重，然后重新训练后面的n-k个层，当然最后一层也需要根据相应的输出格式来进行修改。<br />
  因为数据的相似度不高，重新训练的过程就变得非常关键。而新数据集大小的不足，则是通过冻结预训练模型的前k层进行弥补。</p>
<p><strong>场景三：数据集大，数据相似度不高</strong><br />
  在这种情况下，因为我们有一个很大的数据集，所以神经网络的训练过程将会比较有效率。然而，因为实际数据与预训练模型的训练数据之间存在很大差异，采用预训练模型将不会是一种高效的方式。<br />
  因此最好的方法还是将预处理模型中的权重全都初始化后在新数据集的基础上重头开始训练。</p>
<p><strong>场景四：数据集大，数据相似度高</strong><br />
  这就是最理想的情况，采用预训练模型会变得非常高效。最好的运用方式是保持模型原有的结构和初始权重不变，随后在新数据集的基础上重新训练。</p>
<h2 id="4预训练的效果"><a class="markdownIt-Anchor" href="#4预训练的效果"></a> 4.预训练的效果</h2>
<p>a.测试误差即泛化能力更强<br />
b.fine-tuning对神经网络权值改变很小，似乎权值被困在某个局部区域。而且第一层改变最少，第二层次之…最后一层最大。这说明浅层的权值参数似乎是把参数整体限制在某个范围，即浅层权值对结果影响比较大，然而BP算法会出现梯度消失，即不容易改变浅层的权值参数。<br />
c.模型参数轨迹，无预训练不同初始值收敛到不同局部点，收敛点的扩散性；预训练会更偏向某些点，收敛点的收敛性。</p>
<h2 id="5注意事项"><a class="markdownIt-Anchor" href="#5注意事项"></a> 5.注意事项</h2>
<p>预训练类似于规则化权值,但是预训练规则化又不同于经典的规则化（L1/L2），训练数目越多，预训练结果越好,基于pre-training的深度学习网络，当满足大数据、深层次、多节点网络，效果更优。</p>
<p>参考：<br />
<a href="https://blog.csdn.net/u012509485/article/details/80507138">深度学习预训练</a><br />
<a href="https://www.jianshu.com/p/bdbd8f63afcb">深度学习中的预训练</a><br />
<a href="https://blog.csdn.net/weixin_39454351/article/details/86573753">深度学习中预训练和微调的个人理解</a><br />
<a href="https://blog.csdn.net/Hk_john/article/details/80495385">迁移学习：怎样用预训练模型搞定深度学习？</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>预训练</tag>
      </tags>
  </entry>
  <entry>
    <title>对深度学习池化的理解</title>
    <url>/2017/11/05/%E5%AF%B9%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%B1%A0%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>本文从原理及使用方法，介绍深度学习中的池化操作</p>
<a id="more"></a>
<h2 id="1为什么要池化"><a class="markdownIt-Anchor" href="#1为什么要池化"></a> １．为什么要池化？</h2>
<ol>
<li>invariance(不变性)，这种不变性包括translation(平移)，rotation(旋转)，scale(尺度)</li>
<li>保留主要的特征同时减少参数(降维，效果类似PCA)和计算量，防止过拟合，提高模型泛化能力</li>
</ol>
<h2 id="2怎么池化"><a class="markdownIt-Anchor" href="#2怎么池化"></a> ２．怎么池化？</h2>
<p>最常见的池化操作为平均池化mean pooling和最大池化max pooling：<br />
平均池化：计算图像区域的平均值作为该区域池化后的值。<br />
最大池化：选图像区域的最大值作为该区域池化后的值。<br />
随机池化：只需对feature map中的元素按照其概率值大小随机选择，即元素值大的被选中的概率也大</p>
<p>在提取信息的时候，在池化的时候，如果取区域均值（mean-pooling），往往能保留整体数据的特征，能凸出背景的信息，而如果取区域最大值（max-pooling），则能更好保留纹理上的特征，但这些应该都不如小波变换那样，可以保留更多的细节特征，整体上也应该更加细微。</p>
<p>在ICLR2013上，Zeiler提出了stochastic pooling，元素值大的被选中的概率也大，但不是像max-pooling那样总是取最大值，这种方法的优势是，一方面最大化保证了Max值的取值，一方面又部分确保不会所有元素都被max值给忽悠住，造成过度失真。</p>
<p>这种方式想来还是有缺陷的，因为这种随机行挑选尽管有概率倾向，但它是人为叠加上的，无法总是保证一定随机的概率选择中能够选择到更好的结果，所以也会出现更糟糕的结果的时候，不过加入概率算法好处是，它为产生更好的结果产生了可能，所以总的来说，还是有可能得到更好的结果的。</p>
<p>假设目标总是容易被命中的，而有那么个正态分布与目标的分布是近似重合的，如何保证这种分布比较能吻合目标？平均值与最大值都会产生偏移，因为毕竟太暴力了，而概率算法加入无疑是比较理想的，能减少这种偏移的可能，如果运气足够好，收敛会非常好，那么还有可能得到更加贴近的结果，于是这个又扯到了运气上来了。</p>
<p>只是，术数里的收敛为何能那么准确，这个从数学角度实在是难解，究竟是什么没有考虑到？目前有一种隐隐地思路，需要探索以术数的模型套上去，只是还是没有找到桥梁在哪里，第一是要找出，信息是如何演算并折叠在卦中的，第二是要找出如何还能够把信息进行还原。</p>
<p>在尝试计算了近十万个图形与随机起卦之间的联系后，发现要建立这个联系，是极难完成的任务，制作自动编码器运算到一定程度收敛越来越慢，随便估计也是要花上个几个月的（还不一定最后算得出来），想来还是思路有问题。</p>
<p>至于max与average效果是否一样，还是要看需要识别的图像细节特征情况，这个不一定的，不过据说差异不会超过2%。</p>
<p>不过仔细点说的话，评估特征提取的误差主要来自两个方面：<br />
（1）邻域大小受限造成的估计值方差增大，average能减小这种误差。<br />
（2）卷积层参数误差造成估计均值的偏移，max能减小这种误差。</p>
<p>也就是说，average对背景保留更好，max对纹理提取更好，如果是识别字体什么的，应该考虑max.</p>
<h2 id="4反池化"><a class="markdownIt-Anchor" href="#4反池化"></a> ４．反池化</h2>
<p>反池化是池化的逆操作，是无法通过池化的结果还原出全部的原始数据。因为池化的过程就只保留了主要信息，舍去部分信息。<br />
如果想从池化后的这些主要信息恢复出全部信息，则存在信息缺失，这时只能通过补位来实现最大程度的信息完整。<br />
池化有两种：最大池化和平均池化，其反池化也需要与其对应。</p>
<h2 id="3注意事项"><a class="markdownIt-Anchor" href="#3注意事项"></a> ３．注意事项</h2>
<p>最大池化只是计算神经网络某一层的静态属性，没有什么需要模型进行学习的，它只是一个静态属性。<br />
池化还有重叠池化和空金字塔池化，空间金字塔池化的思想来自于Spatial Pyramid Model，它一个pooling变成了多个scale的pooling。用不同大小池化窗口作用于卷积特征，我们可以得到1X1,2X2,4X4的池化结果，由于conv5中共有256个过滤器，所以得到1个256维的特征，4个256个特征，以及16个256维的特征，然后把这21个256维特征链接起来输入全连接层，通过这种方式把不同大小的图像转化成相同维度的特征。</p>
<p>参考：<br />
<a href="https://blog.csdn.net/zxyhhjs2017/article/details/78607469">深度学习—之pooling层的作用与缺陷</a><br />
<a href="https://blog.csdn.net/denghuanhuandeng/article/details/76601778">深度学习之-池化操作</a><br />
<a href="https://www.cnblogs.com/DOMLX/p/9579108.html">深度学习（一）神经网络中的池化与反池化原理</a><br />
<a href="https://blog.csdn.net/woxincd/article/details/85199928">深度学习 池化的概念</a><br />
<a href="https://www.cnblogs.com/eilearn/p/9282902.html">深度学习—池化、padding的理解</a><br />
<a href="https://www.jianshu.com/p/b742c8c92b26">吴恩达深度学习笔记(79)-池化层讲解（Pooling layers）</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>正则化</tag>
      </tags>
  </entry>
  <entry>
    <title>对正则化的理解</title>
    <url>/2017/10/25/%E5%AF%B9%E6%AD%A3%E5%88%99%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>本文介绍深度学习中的正则化操作</p>
<a id="more"></a>
<h2 id="1为什么要使用正则化"><a class="markdownIt-Anchor" href="#1为什么要使用正则化"></a> 1.为什么要使用正则化</h2>
<p>训练机器学习模型的要点之一是避免过拟合。如果发生过拟合，模型的精确度会下降。这是由于模型过度尝试捕获训练数据集的噪声。噪声，是指那些不能代表数据真实特性的数据点，它们的生成是随机的。学习和捕捉这些数据点让你的模型复杂度增大，有过拟合的风险。</p>
<h2 id="2什么是正则化"><a class="markdownIt-Anchor" href="#2什么是正则化"></a> 2.什么是正则化</h2>
<p>正则化是一种回归的形式，它将系数估计（coefficient estimate）朝零的方向进行约束、调整或缩小。也就是说，正则化可以在学习过程中降低模型复杂度和不稳定程度，从而避免过拟合的危险。正则化将模型学习后的参数估计朝零缩小调整。</p>
<p>机器学习中几乎都可以看到损失函数后面会添加一个额外项，常用的额外项一般有两种， L1正则化 和 L2正则化，或者 L1范数 和 L2范数。</p>
<p>L1正则化是指权值向量w ww中各个元素的绝对值之和<br />
L2正则化是指权值向量w ww中各个元素的平方和然后再求平方根<br />
一般都会在正则化项之前添加一个系数，Python中用α \alphaα表示，一些文章也用λ \lambdaλ表示。这个系数需要用户指定。<br />
L1正则化可以产生稀疏权值矩阵，即产生一个稀疏模型，可以用于特征选择<br />
L2正则化可以防止模型过拟合（overfitting）；一定程度上，L1也可以防止过拟合</p>
<h2 id="3正则化超参的选择"><a class="markdownIt-Anchor" href="#3正则化超参的选择"></a> 3.正则化超参的选择</h2>
<p>L1正则：越大的λ 越容易使F(x)在x=0时取到最小值<br />
L2正则：λ越大，代价函数最值时各参数也会变得很小</p>
<h2 id="4注意事项"><a class="markdownIt-Anchor" href="#4注意事项"></a> 4.注意事项</h2>
<p>标准的最小二乘模型常常产生方差。即对于与训练集不同的数据集，模型可能不能很好地泛化。正则化能在不显著增大偏差的的同时，显著减小模型的方差。因此，正则化技术中使用的调整因子 λ，能控制对方差和偏差的影响。当 λ 的值开始上升时，它减小了系数的值，从而降低了方差。直到上升到某个值之前，λ 的增大很有利，因为它只是减少方差（避免过拟合），而不会丢失数据的任何重要特性。但是在某个特定值之后，模型就会失去重要的性质，导致偏差上升产生欠拟合。因此，要仔细选择 λ 的值。</p>
<p>除了上面提到的额正则化策略，其实还有挺多，比如CNN中的参数共享，对抗训练等。不过从本质上看，正则化策略要做的事情其实是一样的，就是将先验信息以不同方式加入到网络中去，达到限制模型有效容量的效果，从而减小过拟合的风险。</p>
<p>参考：<br />
<a href="https://www.jiqizhixin.com/articles/2017-11-23-4">初学者如何学习机器学习中的L1和L2正则化</a><br />
<a href="https://blog.csdn.net/jinping_shi/article/details/52433975">机器学习中正则化项L1和L2的直观理解</a><br />
<a href="https://blog.csdn.net/qq_16137569/article/details/81584165">小结深度学习中的正则化（超详细分析）</a><br />
<a href="https://www.jianshu.com/p/ae7c2322167e">深度学习中的正则化</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>正则化</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy中数据的常用的保存与读取方法</title>
    <url>/2017/09/23/Numpy%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%9D%E5%AD%98%E4%B8%8E%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在经常性读取大量的数值文件时(比如深度学习训练数据),可以考虑现将数据存储为Numpy格式,然后直接使用Numpy去读取,速度相比为转化前快很多.</p>
<p>下面就常用的保存数据到二进制文件和保存数据到文本文件进行介绍:</p>
<a id="more"></a>
<h1 id="保存为二进制文件npynpz"><a class="markdownIt-Anchor" href="#保存为二进制文件npynpz"></a> 保存为二进制文件(.npy/.npz)</h1>
<h2 id="numpysave"><a class="markdownIt-Anchor" href="#numpysave"></a> <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.save.html#numpy.save">numpy.save</a></h2>
<p>保存一个数组到一个二进制的文件中,保存格式是<code>.npy</code></p>
<p><strong>参数介绍</strong><br />
numpy.save(file, arr, allow_pickle=True, fix_imports=True)</p>
<blockquote>
<p>file:文件名/文件路径<br />
arr:要存储的数组<br />
allow_pickle:布尔值,允许使用Python pickles保存对象数组(可选参数,默认即可)<br />
fix_imports:为了方便Pyhton2中读取Python3保存的数据(可选参数,默认即可)</p>
</blockquote>
<p><strong>使用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#生成数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据保存</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.save(<span class="string">&#x27;save_x&#x27;</span>,x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取保存的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.load(<span class="string">&#x27;save_x.npy&#x27;</span>)</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure>
<h2 id="numpysavez"><a class="markdownIt-Anchor" href="#numpysavez"></a> <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.savez.html#numpy.savez">numpy.savez</a></h2>
<p>这个同样是保存数组到一个二进制的文件中,但是厉害的是,它可以保存多个数组到同一个文件中,保存格式是<code>.npz</code>,它其实就是多个前面np.save的保存的<code>npy</code>,再通过打包(未压缩) 的方式把这些文件归到一个文件上,不行你去解压<code>npz</code>文件就知道了,里面是就是自己保存的多个<code>npy</code>.</p>
<p><strong>参数介绍</strong><br />
numpy.savez(file, *args, **kwds)</p>
<blockquote>
<p>file:文件名/文件路径<br />
*args:要存储的数组,可以写多个,如果没有给数组指定Key,Numpy将默认从’arr_0’,'arr_1’的方式命名<br />
kwds:(可选参数,默认即可)</p>
</blockquote>
<p><strong>使用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#生成数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=np.sin(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">array([ <span class="number">0.</span>        ,  <span class="number">0.84147098</span>,  <span class="number">0.90929743</span>,  <span class="number">0.14112001</span>, -<span class="number">0.7568025</span> ,</span><br><span class="line">       -<span class="number">0.95892427</span>, -<span class="number">0.2794155</span> ,  <span class="number">0.6569866</span> ,  <span class="number">0.98935825</span>,  <span class="number">0.41211849</span>])</span><br><span class="line">	   </span><br><span class="line"><span class="comment">#数据保存</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.save(<span class="string">&#x27;save_xy&#x27;</span>,x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取保存的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>npzfile=np.load(<span class="string">&#x27;save_xy.npz&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>npzfile  <span class="comment">#是一个对象,无法读取</span></span><br><span class="line">&lt;numpy.lib.npyio.NpzFile <span class="built_in">object</span> at <span class="number">0x7f63ce4c8860</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照组数默认的key进行访问</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>npzfile[<span class="string">&#x27;arr_0&#x27;</span>]</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>npzfile[<span class="string">&#x27;arr_1&#x27;</span>]</span><br><span class="line">array([ <span class="number">0.</span>        ,  <span class="number">0.84147098</span>,  <span class="number">0.90929743</span>,  <span class="number">0.14112001</span>, -<span class="number">0.7568025</span> ,</span><br><span class="line">       -<span class="number">0.95892427</span>, -<span class="number">0.2794155</span> ,  <span class="number">0.6569866</span> ,  <span class="number">0.98935825</span>,  <span class="number">0.41211849</span>])</span><br></pre></td></tr></table></figure>
<p>更加神奇的是,你可以不适用Numpy默认给数组的Key,而是自己给数组有意义的Key,这样就可以不用去猜测自己加载数据是否是自己需要的.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据保存</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.savez(<span class="string">&#x27;newsave_xy&#x27;</span>,x=x,y=y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取保存的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>npzfile=np.load(<span class="string">&#x27;newsave_xy.npz&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照保存时设定组数key进行访问</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>npzfile[<span class="string">&#x27;x&#x27;</span>]</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>npzfile[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">array([ <span class="number">0.</span>        ,  <span class="number">0.84147098</span>,  <span class="number">0.90929743</span>,  <span class="number">0.14112001</span>, -<span class="number">0.7568025</span> ,</span><br><span class="line">       -<span class="number">0.95892427</span>, -<span class="number">0.2794155</span> ,  <span class="number">0.6569866</span> ,  <span class="number">0.98935825</span>,  <span class="number">0.41211849</span>])</span><br></pre></td></tr></table></figure>
<p>简直不能太爽,深度学习中,有时候你保存了训练集,验证集,测试集,还包括他们的标签,用这个方式存储起来,要啥加载啥,文件数量大大减少,也不会到处改文件名去.</p>
<h2 id="numpysavez_compressed"><a class="markdownIt-Anchor" href="#numpysavez_compressed"></a> <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.savez_compressed.html#numpy.savez_compressed">numpy.savez_compressed</a></h2>
<p>这个就是在前面numpy.savez的基础上加了压缩,前面我介绍时尤其注明numpy.savez是得到的文件打包,不压缩的.这个文件就是对文件进行打包时使用了压缩,可以理解为压缩前各<code>npy</code>的文件大小不变,使用该函数比前面的numpy.savez得到的<code>npz</code>文件更小.</p>
<p><mark>注:函数所需参数和numpy.savez一致,用法完成一样.</mark></p>
<h1 id="保存到文本文件"><a class="markdownIt-Anchor" href="#保存到文本文件"></a> 保存到文本文件</h1>
<h2 id="numpysavetxt"><a class="markdownIt-Anchor" href="#numpysavetxt"></a> <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html#numpy.savetxt">numpy.savetxt</a></h2>
<p>保存数组到文本文件上,可以直接打开查看文件里面的内容.</p>
<p><strong>参数介绍</strong><br />
numpy.savetxt(fname, X, fmt=’%.18e’, delimiter=’ ‘, newline=’\n’, header=’’, footer=’’, comments=’# ', encoding=None)</p>
<blockquote>
<p>fname:文件名/文件路径,如果文件后缀是<code>.gz</code>,文件将被自动保存为<code>.gzip</code>格式,np.loadtxt可以识别该格式<br />
X:要存储的1D或2D数组<br />
fmt:控制数据存储的格式<br />
delimiter:数据列之间的分隔符<br />
newline:数据行之间的分隔符<br />
header:文件头步写入的字符串<br />
footer:文件底部写入的字符串<br />
comments:文件头部或者尾部字符串的开头字符,默认是’#’<br />
encoding:使用默认参数</p>
</blockquote>
<p><strong>使用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#生成数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = y = z = np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line">	   </span><br><span class="line"><span class="comment">#保存数据</span></span><br><span class="line">np.savetxt(<span class="string">&#x27;test.out&#x27;</span>, x)</span><br><span class="line">np.savetxt(<span class="string">&#x27;test1.out&#x27;</span>, x,fmt=<span class="string">&#x27;%1.4e&#x27;</span>)</span><br><span class="line">np.savetxt(<span class="string">&#x27;test2.out&#x27;</span>, x, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">np.savetxt(<span class="string">&#x27;test3.out&#x27;</span>, x,newline=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">np.savetxt(<span class="string">&#x27;test4.out&#x27;</span>, x,delimiter=<span class="string">&#x27;,&#x27;</span>,newline=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">np.savetxt(<span class="string">&#x27;test5.out&#x27;</span>, x,delimiter=<span class="string">&#x27;,&#x27;</span>,header=<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">np.savetxt(<span class="string">&#x27;test6.out&#x27;</span>, x,delimiter=<span class="string">&#x27;,&#x27;</span>,footer=<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>保存下来的文件都是友好的,可以直接打开看看有什么变化.</p>
<h2 id="numpyloadtxt"><a class="markdownIt-Anchor" href="#numpyloadtxt"></a> <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html#numpy.loadtxt">numpy.loadtxt</a></h2>
<p>根据前面定制的保存格式,相应的加载数据的函数也得变化.</p>
<p><strong>参数介绍</strong><br />
numpy.loadtxt(fname, dtype=&lt;class ‘float’&gt;, comments=’#’, delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding=‘bytes’)</p>
<blockquote>
<p>fname:文件名/文件路径,如果文件后缀是<code>.gz</code>或<code>.bz2</code>,文件将被解压,然后再载入<br />
dtype:要读取的数据类型<br />
comments:文件头部或者尾部字符串的开头字符,用于识别头部,尾部字符串<br />
delimiter:划分读取上来值的字符串<br />
converters:数据行之间的分隔符<br />
…后面不常用的就不写了</p>
</blockquote>
<p><strong>使用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.loadtxt(<span class="string">&#x27;test.out&#x27;</span>)</span><br><span class="line">np.loadtxt(<span class="string">&#x27;test2.out&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>参考资料:<br />
<a href="https://docs.scipy.org/doc/numpy/reference/routines.io.html">官方API-Routines</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Gluon学习03-基础数据类型Ndarray</title>
    <url>/2017/09/23/Gluon%E5%AD%A6%E4%B9%A003-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8BNdarray/</url>
    <content><![CDATA[<p>本文介绍如何Gluon的基本数据类型Ndarray</p>
<a id="more"></a>
<p>本机环境介绍:</p>
<blockquote>
<p>系统:Linuxmint<br />
Python版本:Python3</p>
</blockquote>
<hr />
<h1 id="1api介绍"><a class="markdownIt-Anchor" href="#1api介绍"></a> 1.API介绍</h1>
<p>MxNet版本:1.2.0<br />
API地址:<a href="https://mxnet.incubator.apache.org/api/python/ndarray/ndarray.html">https://mxnet.incubator.apache.org/api/python/ndarray/ndarray.html</a></p>
<p>Ndarray在CPU/GPU上提供必要的张量操作,是一个多维的,固定大小的,同类型的矩阵.mxnet.ndarray与numpy.ndarray非常相似.</p>
<p><strong>The NDArray class:</strong><br />
1.属性<br />
shape/size/ndim/context/dtype</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#数据的形状</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = mx.nd.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.shape</span><br><span class="line">(<span class="number">4L</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = mx.nd.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.shape</span><br><span class="line">(<span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据的多少</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = mx.nd.zeros((<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.size</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.prod(x.shape)</span><br><span class="line"><span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据的阶/秩</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = mx.nd.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.ndim</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = mx.nd.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.ndim</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据所在的设备</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = mx.nd.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.context</span><br><span class="line">cpu(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(x.context)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = mx.nd.zeros((<span class="number">2</span>,<span class="number">3</span>), mx.gpu(<span class="number">0</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.context</span><br><span class="line">gpu(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据的类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = mx.nd.zeros((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.dtype</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = mx.nd.zeros((<span class="number">2</span>,<span class="number">3</span>), dtype=<span class="string">&#x27;int32&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.dtype</span><br></pre></td></tr></table></figure>
<p>2.转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#转为标量,形状必须是(1,)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = mx.nd.ones((<span class="number">1</span>,), dtype=<span class="string">&#x27;int32&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.asscalar()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(x.asscalar())</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = mx.nd.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.asnumpy()</span><br><span class="line">array([[ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>]], dtype=float32)</span><br></pre></td></tr></table></figure>
<p>3.创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过自身API创建</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=nd.arange((<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0.</span> <span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span> <span class="number">4.</span> <span class="number">5.</span> <span class="number">6.</span> <span class="number">7.</span> <span class="number">8.</span> <span class="number">9.</span>]</span><br><span class="line">&lt;NDArray <span class="number">10</span> @cpu(<span class="number">0</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=nd.zeros((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br><span class="line">&lt;NDArray 2x3 @cpu(<span class="number">0</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=nd.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[[[<span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span>]]</span><br><span class="line"> [[<span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span>]</span><br><span class="line">  [<span class="number">1.</span>]]]</span><br><span class="line">&lt;NDArray 2x3x1 @cpu(<span class="number">0</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过list创建</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=[<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e=nd.array(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e</span><br><span class="line">[<span class="number">6.</span> <span class="number">5.</span> <span class="number">4.</span> <span class="number">3.</span> <span class="number">2.</span> <span class="number">1.</span>]</span><br><span class="line">&lt;NDArray <span class="number">6</span> @cpu(<span class="number">0</span>)&gt;</span><br></pre></td></tr></table></figure>
<p>4.形状</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#转置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = mx.nd.arange(<span class="number">0</span>,<span class="number">6</span>).reshape((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.asnumpy()</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>],</span><br><span class="line">       [ <span class="number">3.</span>,  <span class="number">4.</span>,  <span class="number">5.</span>]], dtype=float32)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.T.asnumpy()</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">1.</span>,  <span class="number">4.</span>],</span><br><span class="line">       [ <span class="number">2.</span>,  <span class="number">5.</span>]], dtype=float32)</span><br><span class="line">	   </span><br><span class="line"><span class="comment">#改变形状</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = mx.nd.arange(<span class="number">0</span>,<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="number">0.</span> <span class="number">1.</span> <span class="number">2.</span>]</span><br><span class="line"> [<span class="number">3.</span> <span class="number">4.</span> <span class="number">5.</span>]]</span><br><span class="line">&lt;NDArray 2x3 @cpu(<span class="number">0</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x.reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[[<span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">2.</span> <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">4.</span> <span class="number">5.</span>]]</span><br><span class="line">&lt;NDArray 3x2 @cpu(<span class="number">0</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#列多少不管,就明确是n行,列= (x.size/n)上整</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x.reshape(<span class="number">2</span>,-<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[[<span class="number">0.</span> <span class="number">1.</span> <span class="number">2.</span>]</span><br><span class="line"> [<span class="number">3.</span> <span class="number">4.</span> <span class="number">5.</span>]]</span><br><span class="line">&lt;NDArray 2x3 @cpu(<span class="number">0</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#只要一行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x.reshape(-<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[<span class="number">0.</span> <span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span> <span class="number">4.</span> <span class="number">5.</span>]</span><br><span class="line">&lt;NDArray <span class="number">6</span> @cpu(<span class="number">0</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>5.元素扩展</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拼接,输入数组的唯独应该相同</span></span><br><span class="line">x = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line">y = [[<span class="number">3</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">5</span>]]</span><br><span class="line">z = [[<span class="number">6</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">7</span>],[<span class="number">8</span>,<span class="number">8</span>]]</span><br><span class="line">concat(x,y,z,dim=<span class="number">0</span>) = [[ <span class="number">1.</span>,  <span class="number">1.</span>],</span><br><span class="line">                       [ <span class="number">2.</span>,  <span class="number">2.</span>],</span><br><span class="line">                       [ <span class="number">3.</span>,  <span class="number">3.</span>],</span><br><span class="line">                       [ <span class="number">4.</span>,  <span class="number">4.</span>],</span><br><span class="line">                       [ <span class="number">5.</span>,  <span class="number">5.</span>],</span><br><span class="line">                       [ <span class="number">6.</span>,  <span class="number">6.</span>],</span><br><span class="line">                       [ <span class="number">7.</span>,  <span class="number">7.</span>],</span><br><span class="line">                       [ <span class="number">8.</span>,  <span class="number">8.</span>]]</span><br></pre></td></tr></table></figure>
<p><strong>参考:</strong><br />
<a href="https://mxnet.incubator.apache.org/api/python/ndarray/ndarray.html">NDArray API</a></p>
<p><font color='red'>每日一学,争取进步03</font></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Gluon</tag>
      </tags>
  </entry>
  <entry>
    <title>Gluon学习02-使用GPU</title>
    <url>/2017/09/22/Gluon%E5%AD%A6%E4%B9%A002-%E4%BD%BF%E7%94%A8GPU/</url>
    <content><![CDATA[<p>本文介绍Mxnet如何使用GPU的过程</p>
<a id="more"></a>
<p>本机环境介绍:</p>
<blockquote>
<p>系统:Linuxmint<br />
Python版本:Python3</p>
</blockquote>
<h1 id="1安装cuda与cudnn"><a class="markdownIt-Anchor" href="#1安装cuda与cudnn"></a> 1.安装cuda与cudnn</h1>
<p><strong>(0)定义</strong></p>
<p>CUDA(Compute Unified Device Architecture)，是英伟达公司推出的一种基于新的并行编程模型和指令集架构的通用计算架构，它能利用英伟达GPU的并行计算引擎，比CPU更高效的解决许多复杂计算任务。</p>
<blockquote>
<p>摘自:<a href="https://blog.csdn.net/fangjin_kl/article/details/53906874">CPU、GPU、CUDA，CuDNN 简介</a></p>
</blockquote>
<p>cuDNN（CUDA Deep Neural Network library）：是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库。如果你要用GPU训练模型，cuDNN不是必须的，但是一般会采用这个加速库。</p>
<blockquote>
<p>摘自:<a href="https://blog.csdn.net/u014380165/article/details/77340765">GPU，CUDA，cuDNN的理解</a></p>
</blockquote>
<p><strong>(1)下载</strong></p>
<p>选择合适版本下载cuda:<br />
网址:<a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613540535696.png" alt="选择合适版本" /></p>
<p>配合前面的cuda版本,下载相应的cudnn:<br />
网址:<a href="https://developer.nvidia.com/rdp/cudnn-archive">https://developer.nvidia.com/rdp/cudnn-archive</a><br />
注:这里需要注册账号才可以下,有时收不到激活邮件,可以多试试不同放入邮箱,不行就出去一下.</p>
<p><strong>(2)安装</strong></p>
<p>下载完成以上两个文件后,首先安装cuda,使用以下命令安装:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb</span><br><span class="line">sudo apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install cuda</span><br></pre></td></tr></table></figure>
<p>然后,解压cudnn,将相应文件拷贝的cuda的安装目录上,使用以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvzf cudnn-8.0-linux-x64-v5.1-ga.tgz </span><br><span class="line">sudo cp cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/include</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda/lib64</span><br><span class="line">sudo chmod a+r /usr/<span class="built_in">local</span>/cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>
<p><strong>(3)配置</strong></p>
<p>将cuda安装路径配置到系统路径下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;<span class="variable">$LD_LIBRARY_PATH</span>:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64&quot;</span></span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda</span><br></pre></td></tr></table></figure>
<p>根据自己环境将该信息添加到相应文件,我的是<code>~/.zshrc</code>,如果终端是bash,则是<code>~/.bashrc</code>.</p>
<h1 id="2安装mxnet-gpu"><a class="markdownIt-Anchor" href="#2安装mxnet-gpu"></a> 2.安装mxnet-gpu</h1>
<p><strong>(1)卸载以前安装的CPU版本的mxnet</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall mxnet</span><br></pre></td></tr></table></figure>
<p><strong>(2)安装mxnet-gpu</strong></p>
<p>根据前面安装的cuda 版本,安装相应的mxnet-gpu</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --pre mxnet-cu75 <span class="comment"># CUDA 7.5</span></span><br><span class="line">pip install --pre mxnet-cu80 <span class="comment"># CUDA 8.0</span></span><br><span class="line">pip install --pre mxnet-cu90 <span class="comment"># CUDA 9.0</span></span><br></pre></td></tr></table></figure>
<p>注:如果安装过程过慢,可以更换pip的源,更换方法是可以看这篇博客<a href="https://blog.csdn.net/chenghuikai/article/details/55258957">更换pip源到国内镜像</a></p>
<p><strong>参考:</strong><br />
<a href="http://zh.gluon.ai/chapter_crashcourse/install.html">Gluon动手学深度学习</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Gluon</tag>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>分析LSTM中的神经元个数</title>
    <url>/2017/09/22/%E5%88%86%E6%9E%90LSTM%E4%B8%AD%E7%9A%84%E7%A5%9E%E7%BB%8F%E5%85%83%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<p>本文通过拆解LSTM，并通过统计几个模块的参数量来分析各个模块的原理</p>
<a id="more"></a>
<h2 id="1lstm简单介绍"><a class="markdownIt-Anchor" href="#1lstm简单介绍"></a> 1.LSTM简单介绍</h2>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613540825355.png" alt="LSTM在时间上展开" /></p>
<p>红框从左到右,依次是:<br />
<strong>忘记门层:</strong> 决定从细胞状态中丢弃什么信息,通过当前时刻输入和前一个时刻输出决定<br />
<strong>细胞状态:</strong>  确定并更新<code>新信息</code>到当前时刻的细胞状态中<br />
<strong>输出门层:</strong> 基于目前的细胞状态决定该时刻的输出</p>
<h2 id="2简单假设样例"><a class="markdownIt-Anchor" href="#2简单假设样例"></a> 2.简单假设样例</h2>
<p>假设现有一个样本,Shape=(13,5),时间步是13,每个时间步的特征长度是5.形象点,我把一个样本画了出来:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>a</mi><mn>1</mn><mn>1</mn></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>a</mi><mn>1</mn><mn>2</mn></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>a</mi><mn>1</mn><mn>5</mn></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>a</mi><mn>2</mn><mn>1</mn></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>a</mi><mn>2</mn><mn>2</mn></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>a</mi><mn>2</mn><mn>5</mn></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>a</mi><mn>13</mn><mn>1</mn></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>a</mi><mn>13</mn><mn>2</mn></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>a</mi><mn>13</mn><mn>5</mn></msubsup></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\begin{pmatrix}
    a_1^1 &amp; a_1^2 &amp; \cdots &amp; a_1^{5} \\
    a_2^1 &amp; a_2^2 &amp; \cdots &amp; a_2^{5} \\
    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
    a_{13}^1 &amp; a_{13}^2 &amp; \cdots &amp; a_{13}^{5} \\
\end{pmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500349999999997em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.5049950000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.1050050000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.7050150000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.950035em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.64em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.44em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-2.5799999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.3800000000000006em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500349999999997em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.5049950000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.1050050000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.7050150000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.950035em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>使用Keras框架添加LSTM层时,我的设置是这样的<code>keras.layers.LSTM(10)</code>,也就是我现在设定,<mark>每个时间</mark>步经过LSTM后,得到的中间隐向量是10维(意思是5-&gt;10维),13个时间步的数据进去得到的是(13*10)的数据.</p>
<p>每个时间步对应神经元个数(参数个数)一样.也就是算一个LSTM中神经元个数,算一个时间步中参与的神经元个数即可.下面将对LSTM每个计算部分进行神经元分析.</p>
<h2 id="3神经元分析"><a class="markdownIt-Anchor" href="#3神经元分析"></a> 3.神经元分析</h2>
<h3 id="31忘记门层"><a class="markdownIt-Anchor" href="#31忘记门层"></a> 3.1忘记门层</h3>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613540825356.png" alt="忘记门层" /></p>
<p>图中公式的<code>!$h_&#123;t-1&#125;$</code>是上一个状态的隐向量(已设定隐向量长度为10),<code>!$x_t$</code>为当前状态的输入(长度为5),那么<code>!$[h_&#123;t-1&#125;,x_t]$</code>的长度就是10+5=15了.<code>!$W_f$</code>和<code>!$b_f$</code>为该层的参数.</p>
<p>该层输出是中间隐向量的长度(10),经过<code>!$\sigma$</code>激活前后的长度不变.只需要考虑<code>!$\sigma$</code>里面的操作得到10维特征即可.</p>
<p><code>!$[h_&#123;t-1&#125;,x_t]$</code>是(1,15)的向量,与<code>!$W_f$</code>相乘得到(1,10)的向量,根据矩阵相乘规律,得到<code>!$W_f$</code>是(15,10)的矩阵,得到(1,10)矩阵后,与该门层偏置相加,偏置也应该有相同的形状,即<code>!$b_f$</code>是(1,10)的矩阵.</p>
<p>即:该层神经元为:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>N</mi><mi>e</mi><mi>u</mi><mi>r</mi><mi>o</mi><mi>n</mi><msub><mi>s</mi><mn>1</mn></msub><mo>=</mo><mn>15</mn><mo>×</mo><mn>10</mn><mo>+</mo><mn>10</mn><mo>=</mo><mn>160</mn></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">Neurons_{1} =15 \times 10 + 10 =160 \tag{1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span></span><span class="tag"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p>
<h3 id="32细胞状态"><a class="markdownIt-Anchor" href="#32细胞状态"></a> 3.2细胞状态</h3>
<p>(1)确定更新信息过程</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613540825365.png" alt="确定该时刻细胞要更新的内容" /></p>
<p>可以看到,这里公式和前面的一样的,<code>!$\sigma$</code>和<code>!$\tanh$</code>都是激活函数,不影响参数个数.</p>
<p>同理这过程的神经元个数是:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>N</mi><mi>e</mi><mi>u</mi><mi>r</mi><mi>o</mi><mi>n</mi><msub><mi>s</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn><mo>×</mo><mo stretchy="false">(</mo><mn>15</mn><mo>×</mo><mn>10</mn><mo>+</mo><mn>10</mn><mo stretchy="false">)</mo><mo>=</mo><mn>320</mn></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">Neurons_{2} =2 \times (15 \times 10 + 10) =320 \tag{2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mord">0</span></span><span class="tag"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p>
<p>(2)更新过程</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613540825378.png" alt="细胞状态更新" /></p>
<p>公式中的四个值,均是前面计算得到的结果,因此该过程没有参数需要学习.</p>
<h3 id="33输出层"><a class="markdownIt-Anchor" href="#33输出层"></a> 3.3输出层</h3>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613540825379.png" alt="输出门层" /></p>
<p>一样的公式,神经元个数一样.即个数为:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>N</mi><mi>e</mi><mi>u</mi><mi>r</mi><mi>o</mi><mi>n</mi><msub><mi>s</mi><mn>3</mn></msub><mo>=</mo><mn>15</mn><mo>×</mo><mn>10</mn><mo>+</mo><mn>10</mn><mo>=</mo><mn>160</mn></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">Neurons_{3} =15 \times 10 + 10 =160 \tag{3}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span></span><span class="tag"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p>
<h3 id="34总结"><a class="markdownIt-Anchor" href="#34总结"></a> 3.4总结</h3>
<p>把公式(1),(2),(3)的神经元加起来,就是该LSTM的神经元个数了.</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>e</mi><mi>u</mi><mi>r</mi><mi>o</mi><mi>n</mi><msub><mi>s</mi><mrow><mi>a</mi><mi>l</mi><mi>l</mi></mrow></msub><mo>=</mo><mi>N</mi><mi>e</mi><mi>u</mi><mi>r</mi><mi>o</mi><mi>n</mi><msub><mi>s</mi><mn>1</mn></msub><mo>+</mo><mi>N</mi><mi>e</mi><mi>u</mi><mi>r</mi><mi>o</mi><mi>n</mi><msub><mi>s</mi><mn>2</mn></msub><mo>+</mo><mi>N</mi><mi>e</mi><mi>u</mi><mi>r</mi><mi>o</mi><mi>n</mi><msub><mi>s</mi><mn>3</mn></msub><mo>=</mo><mn>160</mn><mo>+</mo><mn>320</mn><mo>+</mo><mn>160</mn><mo>=</mo><mn>640</mn></mrow><annotation encoding="application/x-tex">Neurons_{all} =Neurons_{1}+Neurons_{2}+Neurons_{3}=160+320+160 =640 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord">0</span></span></span></span></span></p>
<p>其实,我们可以把这个问题一般化,不看这个例子,<mark>假设你一个时间步的特征长度是n,经过该LSTM得到的长度是m #800028</mark>,这样就可以算出该LSTM层的神经元个数为:</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>e</mi><mi>u</mi><mi>r</mi><mi>o</mi><mi>n</mi><msub><mi>s</mi><mrow><mi>a</mi><mi>l</mi><mi>l</mi></mrow></msub><mo>=</mo><mn>4</mn><mo>×</mo><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mo>×</mo><mi>m</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">Neurons_{all} =4 \times {((n+m)\times m + m )}  
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span></span></p>
<h2 id="4测试"><a class="markdownIt-Anchor" href="#4测试"></a> 4.测试</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> LSTM</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"></span><br><span class="line">time_step=<span class="number">13</span></span><br><span class="line">featrue=<span class="number">5</span></span><br><span class="line">hidenfeatrue=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">model=Sequential()</span><br><span class="line">model.add( LSTM(hidenfeatrue,input_shape=(time_step,featrue)))</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure>
<p>输出是:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_________________________________________________________________________________</span><br><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================================</span><br><span class="line">lstm_8 (LSTM)                (<span class="literal">None</span>, <span class="number">10</span>)                <span class="number">640</span>       </span><br><span class="line">=================================================================================</span><br><span class="line">Total params: <span class="number">640</span></span><br><span class="line">Trainable params: <span class="number">640</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">_________________________________________________________________________________</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参考:<br />
<a href="https://www.jianshu.com/p/9dc9f41f0b29">理解 LSTM 网络</a><br />
<a href="https://blog.csdn.net/roslei/article/details/61912618">推荐给初学LSTM或者懂个大概却不完全懂的人</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>LSTM</tag>
      </tags>
  </entry>
  <entry>
    <title>Gluon学习01-部署环境</title>
    <url>/2017/09/19/Gluon%E5%AD%A6%E4%B9%A001-%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>Gluon与Maxnet的关系就像Keras与Tensorflow的关系，本文介绍部署Gluon环境的整个过程</p>
<a id="more"></a>
<p>本机环境介绍:</p>
<blockquote>
<p>系统:Linuxmint<br />
Python版本:Python3</p>
</blockquote>
<h1 id="1下载并安装miniconda"><a class="markdownIt-Anchor" href="#1下载并安装miniconda"></a> 1.下载并安装Miniconda</h1>
<p><strong>(1)下载并安装</strong></p>
<p>网址:<a href="https://conda.io/miniconda.html">https://conda.io/miniconda.html</a></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613540294748.png" alt="选择自己合适的版本" /></p>
<p>Linux环境下,使用命令<code>chmod 755 xx.sh</code>给下载的.sh文件运行权限,然后运行该脚本.按提示安装完成后需要将安装路径配置到相应文件上,一般最后提示将路径写到相应文件,如果提示不对,自己手动添加到相应文件上.比如我终端是zsh,则在<code>~/.zshrc</code>最后添加了下面配置:</p>
<blockquote>
<p>#set Miniconda<br />
export PATH=/home/wu/miniconda3/bin:$PATH</p>
</blockquote>
<p>注:该配置包含了我的用户名<code>wu</code>,复制时需做相应修改.</p>
<p><strong>(2)使用国内源,加速包的安装</strong></p>
<p>使用命令为:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 优先使用清华 conda 镜像。</span></span><br><span class="line">conda config --prepend channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者选用科大 conda 镜像。</span></span><br><span class="line">conda config --prepend channels http://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br></pre></td></tr></table></figure>
<h1 id="2使用miniconda配置gluon环境"><a class="markdownIt-Anchor" href="#2使用miniconda配置gluon环境"></a> 2.使用Miniconda配置Gluon环境</h1>
<p><strong>(1)终端键入以下命令,下载相应的教程文件和配置文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir gluon-tutorials &amp;&amp; <span class="built_in">cd</span> gluon-tutorials</span><br><span class="line">curl https://zh.gluon.ai/gluon_tutorials_zh.tar.gz -o tutorials.tar.gz</span><br><span class="line">tar -xzvf tutorials.tar.gz &amp;&amp; rm tutorials.tar.gz</span><br></pre></td></tr></table></figure>
<p><strong>(2)配置环境</strong></p>
<p>进入下载的目录下,可以看到文件<code>environment.yml</code>,这里面包含了配置环境所需的所有库名称及版本号.打开一开,就是几个库而已.</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613540294749.png" alt="所需环境" /></p>
<p>使用以下命令来完成环境部署:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda env create -f environment.yml</span><br><span class="line"><span class="built_in">source</span> activate gluon</span><br></pre></td></tr></table></figure>
<h1 id="3测试"><a class="markdownIt-Anchor" href="#3测试"></a> 3.测试</h1>
<p>键入以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>
<p>浏览器会自动打开一个页面,该页面上可用使用<code>cell(块)</code>的方式写代码,非常方便,关于Jupyter notebook的详细安装与配置,请参照  <a href="https://www.cnblogs.com/wushaogui/p/8797841.html">Jupyter开发环境搭建</a></p>
<h1 id="4使用国内服务器加速数据集下载"><a class="markdownIt-Anchor" href="#4使用国内服务器加速数据集下载"></a> 4.使用国内服务器,加速数据集下载</h1>
<p>训练模型时,如果需要在线下载数据,从国外下载数据非常慢,经常导致无法运行,可以更换为国内镜像来解决.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MXNET_GLUON_REPO=https://apache-mxnet.s3.cn-north-1.amazonaws.com.cn/ jupyter notebook</span><br></pre></td></tr></table></figure>
<p><strong>参考:</strong><br />
<a href="http://zh.gluon.ai/chapter_crashcourse/install.html">Gluon动手学深度学习</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Gluon</tag>
      </tags>
  </entry>
  <entry>
    <title>Mxnet框架的环境搭建</title>
    <url>/2017/09/15/Mxnet%E6%A1%86%E6%9E%B6%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>Mxnet是亚马逊开发的深度学习框架，和谷歌Tensorflow是同类型的框架。</p>
<a id="more"></a>
<p>1.安装Mxnet</p>
<p>这里只展示在线安装，源码编译安装等不演示；GPU安装与Mxnet无关，只需安装不同的Mxnet版本就可以。要使用GPU还是得另外配置好Cuda和Cudnn。</p>
<p>（1）安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y wget python gcc</span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py &amp;&amp; sudo python get-pip.py</span><br></pre></td></tr></table></figure>
<p>(2)安装Mxnet</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install mxnet</span><br></pre></td></tr></table></figure>
<p>注：要安装GPU版本，命令是<code>pip install mxnet-cu90</code>，根据Cuda版本，安装不同mxnet-cuxx版本，具体查官网信息</p>
<p>(3)安装Graphviz（非必须）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install graphviz</span><br><span class="line">pip install graphviz</span><br></pre></td></tr></table></figure>
<p>2.测试是否安装完成</p>
<p>(1)进入python命令编辑界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure>
<p>(2)依次每行拷贝以下命令进行测试,最后输入一致，即表示安装完成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import mxnet as mx</span><br><span class="line">&gt;&gt;&gt; a = mx.nd.ones((2, 3))</span><br><span class="line">&gt;&gt;&gt; b = a * 2 + 1</span><br><span class="line">&gt;&gt;&gt; b.asnumpy()</span><br><span class="line">array([[ 3.,  3.,  3.],</span><br><span class="line">       [ 3.,  3.,  3.]], dtype=float32)</span><br></pre></td></tr></table></figure>
<p>(3)退出python控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span>()</span><br></pre></td></tr></table></figure>
<p>参考资料：</p>
<ul>
<li><a href="https://mxnet.incubator.apache.org/install/index.html">Mxnet官方安装方法</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Mxnet</tag>
      </tags>
  </entry>
  <entry>
    <title>linux上cuda与cudnn环境搭建</title>
    <url>/2017/05/19/linux%E4%B8%8Acuda%E4%B8%8Ecudnn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本文介绍在linux上如何安装cuda及cudnn</p>
<a id="more"></a>
<p>cuda官网：<a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a></p>
<h2 id="cuda下载"><a class="markdownIt-Anchor" href="#cuda下载"></a> cuda下载</h2>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613529405158.png" alt="下载cuda" /></p>
<h2 id="cuda安装"><a class="markdownIt-Anchor" href="#cuda安装"></a> cuda安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin</span><br><span class="line">sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line">wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class="line">sudo dpkg -i cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class="line">sudo apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub</span><br><span class="line">sudo apt-get updatesudo apt-get -y install cuda</span><br></pre></td></tr></table></figure>
<p>cudnn官网：<a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></p>
<h2 id="cudnn安装"><a class="markdownIt-Anchor" href="#cudnn安装"></a> cudnn安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i libcudnn7_7.6.5.32-1+cuda10.2_amd64.deb</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2>
<p>重启系统，然后运行下面例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找测试例子所在位置</span></span><br><span class="line">locate cuda | grep <span class="string">&#x27;samples&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编译测试例子</span></span><br><span class="line">sudo make -j8</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行测试例子</span></span><br><span class="line"> ./deviceQuery</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613529405176.png" alt="测试成功提示" /></p>
<p>输出提示PASS,则安装成功！！！</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>特征工程学习之sklearn单机特征工程</title>
    <url>/2017/03/25/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%E5%AD%A6%E4%B9%A0%E4%B9%8Bsklearn%E5%8D%95%E6%9C%BA%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p>本文基于sklearn进行数据的特征工作</p>
<a id="more"></a>
<h1 id="0数据的导入"><a class="markdownIt-Anchor" href="#0数据的导入"></a> 0.数据的导入</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入IRIS数据集</span></span><br><span class="line">iris=load_iris()</span><br><span class="line"></span><br><span class="line"><span class="comment">#特征矩阵</span></span><br><span class="line">print(iris.data[:<span class="number">5</span>],<span class="built_in">len</span>(iris.data))</span><br><span class="line"></span><br><span class="line"><span class="comment">#目标向量</span></span><br><span class="line">print(iris.target[:<span class="number">5</span>],<span class="built_in">len</span>(iris.target))</span><br></pre></td></tr></table></figure>
<pre><code>[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]] 150
[0 0 0 0 0] 150
</code></pre>
<h1 id="1数据预处理"><a class="markdownIt-Anchor" href="#1数据预处理"></a> 1.数据预处理</h1>
<h2 id="11无量纲化"><a class="markdownIt-Anchor" href="#11无量纲化"></a> 1.1无量纲化</h2>
<h3 id="111标准化"><a class="markdownIt-Anchor" href="#111标准化"></a> 1.1.1标准化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="comment">#标准化，返回值为标准化后的值</span></span><br><span class="line">iris_standar=StandardScaler().fit_transform(iris.data)</span><br><span class="line">print(iris_standar[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[-0.90068117  1.03205722 -1.3412724  -1.31297673]
 [-1.14301691 -0.1249576  -1.3412724  -1.31297673]
 [-1.38535265  0.33784833 -1.39813811 -1.31297673]
 [-1.50652052  0.10644536 -1.2844067  -1.31297673]
 [-1.02184904  1.26346019 -1.3412724  -1.31297673]]
</code></pre>
<h3 id="112区间缩放"><a class="markdownIt-Anchor" href="#112区间缩放"></a> 1.1.2区间缩放</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区间缩放，返回值为已经缩放到[0,1]的值</span></span><br><span class="line">iris_minmax=MinMaxScaler().fit_transform(iris.data)</span><br><span class="line">print(iris_minmax[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[ 0.22222222  0.625       0.06779661  0.04166667]
 [ 0.16666667  0.41666667  0.06779661  0.04166667]
 [ 0.11111111  0.5         0.05084746  0.04166667]
 [ 0.08333333  0.45833333  0.08474576  0.04166667]
 [ 0.19444444  0.66666667  0.06779661  0.04166667]]
</code></pre>
<h2 id="12对定量特征进行二值化"><a class="markdownIt-Anchor" href="#12对定量特征进行二值化"></a> 1.2对定量特征进行二值化</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Binarizer</span><br><span class="line"></span><br><span class="line"><span class="comment">#二值化，分界线设置为3，返回二值化后的特征</span></span><br><span class="line">iris_binarizer=Binarizer(threshold=<span class="number">3</span>).fit_transform(iris.data)</span><br><span class="line">print(iris_binarizer[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1.  1.  0.  0.]
 [ 1.  0.  0.  0.]
 [ 1.  1.  0.  0.]
 [ 1.  1.  0.  0.]
 [ 1.  1.  0.  0.]]
</code></pre>
<h2 id="13对定性特征进行哑编码"><a class="markdownIt-Anchor" href="#13对定性特征进行哑编码"></a> 1.3对定性特征进行哑编码</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 哑编码，对iris的目标集进行哑编码，返回编码后的值</span></span><br><span class="line">iris_onehotencoder=OneHotEncoder().fit_transform(iris.target.reshape((-<span class="number">1</span>,<span class="number">1</span>)))</span><br><span class="line">print(iris.target[-<span class="number">5</span>:])</span><br><span class="line">print(iris.target.reshape((-<span class="number">1</span>,<span class="number">1</span>))[-<span class="number">5</span>:])</span><br><span class="line">print(iris_onehotencoder[-<span class="number">5</span>:])</span><br></pre></td></tr></table></figure>
<pre><code>[2 2 2 2 2]
[[2]
 [2]
 [2]
 [2]
 [2]]
  (0, 2)	1.0
  (1, 2)	1.0
  (2, 2)	1.0
  (3, 2)	1.0
  (4, 2)	1.0
</code></pre>
<h2 id="14缺失值计算"><a class="markdownIt-Anchor" href="#14缺失值计算"></a> 1.4缺失值计算</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> vstack, array, nan</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Imputer</span><br><span class="line"></span><br><span class="line"><span class="comment">#缺失值计算，返回值为计算缺失值后的数据</span></span><br><span class="line"><span class="comment">#参数missing_value为缺失值的表示形式，默认为NaN</span></span><br><span class="line"><span class="comment">#参数strategy为缺失值填充方式，默认为mean（均值）</span></span><br><span class="line">iris_imputer=Imputer().fit_transform(vstack((array([nan, nan, nan, nan]), iris.data)))</span><br><span class="line">print(iris_imputer[:<span class="number">5</span>],<span class="built_in">len</span>(iris_imputer))</span><br></pre></td></tr></table></figure>
<pre><code>[[ 5.84333333  3.054       3.75866667  1.19866667]
 [ 5.1         3.5         1.4         0.2       ]
 [ 4.9         3.          1.4         0.2       ]
 [ 4.7         3.2         1.3         0.2       ]
 [ 4.6         3.1         1.5         0.2       ]] 151
</code></pre>
<h2 id="15数据变换"><a class="markdownIt-Anchor" href="#15数据变换"></a> 1.5数据变换</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"></span><br><span class="line"><span class="comment">#多项式转换</span></span><br><span class="line"><span class="comment">#参数degree为度，默认值为2</span></span><br><span class="line">iris_pol=PolynomialFeatures().fit_transform(iris.data)</span><br><span class="line">print(iris_pol[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[  1.     5.1    3.5    1.4    0.2   26.01  17.85   7.14   1.02  12.25
    4.9    0.7    1.96   0.28   0.04]
 [  1.     4.9    3.     1.4    0.2   24.01  14.7    6.86   0.98   9.     4.2
    0.6    1.96   0.28   0.04]
 [  1.     4.7    3.2    1.3    0.2   22.09  15.04   6.11   0.94  10.24
    4.16   0.64   1.69   0.26   0.04]
 [  1.     4.6    3.1    1.5    0.2   21.16  14.26   6.9    0.92   9.61
    4.65   0.62   2.25   0.3    0.04]
 [  1.     5.     3.6    1.4    0.2   25.    18.     7.     1.    12.96
    5.04   0.72   1.96   0.28   0.04]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> log1p</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> FunctionTransformer</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义转换函数为对数函数的数据变换</span></span><br><span class="line"><span class="comment">#第一个参数是单变元函数</span></span><br><span class="line">iris_ftf=FunctionTransformer(log1p).fit_transform(iris.data)</span><br><span class="line">print(iris_ftf[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1.80828877  1.5040774   0.87546874  0.18232156]
 [ 1.77495235  1.38629436  0.87546874  0.18232156]
 [ 1.74046617  1.43508453  0.83290912  0.18232156]
 [ 1.7227666   1.41098697  0.91629073  0.18232156]
 [ 1.79175947  1.5260563   0.87546874  0.18232156]]
</code></pre>
<h1 id="2特征选择"><a class="markdownIt-Anchor" href="#2特征选择"></a> 2.特征选择</h1>
<h2 id="21filter"><a class="markdownIt-Anchor" href="#21filter"></a> 2.1Filter</h2>
<h3 id="211方差选择法"><a class="markdownIt-Anchor" href="#211方差选择法"></a> 2.1.1方差选择法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> VarianceThreshold</span><br><span class="line"></span><br><span class="line"><span class="comment">#方差选择法，返回值为特征选择后的数据</span></span><br><span class="line"><span class="comment">#参数threshold为方差的阈值</span></span><br><span class="line">iris_vt=VarianceThreshold(threshold=<span class="number">3</span>).fit_transform(iris.data)</span><br><span class="line">print(iris_vt,<span class="built_in">len</span>(iris_vt))</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1.4]
 [ 1.4]
 [ 1.3]
 [ 1.5]
 [ 1.4]
 [ 1.7]
 [ 1.4]
 .......
</code></pre>
<h3 id="212相关系数法此处使用第二篇博客进行修改"><a class="markdownIt-Anchor" href="#212相关系数法此处使用第二篇博客进行修改"></a> 2.1.2相关系数法(此处使用第二篇博客进行修改)</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest,chi2</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsonr</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择K个最好的特征，返回选择特征后的数据</span></span><br><span class="line"><span class="comment">#第一个参数为计算评估特征是否好的函数，该函数输入特征矩阵和目标向量，输出二元组（评分，P值）的数组，数组第i项为第i个特征的评分和P值。在此定义为计算相关系数</span></span><br><span class="line"><span class="comment">#参数k为选择的特征个数</span></span><br><span class="line">iris_pear=SelectKBest(chi2, k=<span class="number">2</span>).fit_transform(iris.data, iris.target)</span><br><span class="line">print(iris_pear,<span class="built_in">len</span>(iris_pear))</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1.4  0.2]
 [ 1.4  0.2]
 [ 1.3  0.2]
 [ 1.5  0.2]
 [ 1.4  0.2]
 [ 1.7  0.4]
 [ 1.4  0.3]
 [ 1.5  0.2]
 [ 1.4  0.2]
  ..........
</code></pre>
<h3 id="213卡方检验"><a class="markdownIt-Anchor" href="#213卡方检验"></a> 2.1.3卡方检验</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> chi2</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择K个最好的特征，返回选择特征后的数据</span></span><br><span class="line">iris_chi2=SelectKBest(chi2, k=<span class="number">2</span>).fit_transform(iris.data, iris.target)</span><br><span class="line">print(iris_chi2[:<span class="number">5</span>],<span class="built_in">len</span>(iris_chi2))</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1.4  0.2]
 [ 1.4  0.2]
 [ 1.3  0.2]
 [ 1.5  0.2]
 [ 1.4  0.2]] 150
</code></pre>
<h3 id="214互信息法"><a class="markdownIt-Anchor" href="#214互信息法"></a> 2.1.4互信息法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</span><br><span class="line"><span class="keyword">from</span> minepy <span class="keyword">import</span> MINE</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于MINE的设计不是函数式的，定义mic方法将其为函数式的，返回一个二元组，二元组的第2项设置成固定的P值0.5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mic</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    m = MINE()</span><br><span class="line">    m.compute_score(x, y)</span><br><span class="line">    <span class="keyword">return</span> (m.mic(), <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择K个最好的特征，返回特征选择后的数据</span></span><br><span class="line">SelectKBest(<span class="keyword">lambda</span> X, Y: array(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:mic(x, Y), X.T)).T, k=<span class="number">2</span>).fit_transform(iris.data, iris.target)</span><br></pre></td></tr></table></figure>
<pre><code>---------------------------------------------------------------------------

ImportError                               Traceback (most recent call last)

&lt;ipython-input-47-807ad1fcacee&gt; in &lt;module&gt;()
      1 from sklearn.feature_selection import SelectKBest
----&gt; 2 from minepy import MINE
      3 
      4 #由于MINE的设计不是函数式的，定义mic方法将其为函数式的，返回一个二元组，二元组的第2项设置成固定的P值0.5
      5 def mic(x, y):


ImportError: No module named 'minepy'
</code></pre>
<h2 id="22wrapper"><a class="markdownIt-Anchor" href="#22wrapper"></a> 2.2Wrapper</h2>
<h3 id="321-递归特征消除法"><a class="markdownIt-Anchor" href="#321-递归特征消除法"></a> 3.2.1 递归特征消除法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> RFE</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line"><span class="comment">#递归特征消除法，返回特征选择后的数据</span></span><br><span class="line"><span class="comment">#参数estimator为基模型</span></span><br><span class="line"><span class="comment">#参数n_features_to_select为选择的特征个数</span></span><br><span class="line">iris_pfe=RFE(estimator=LogisticRegression(), n_features_to_select=<span class="number">2</span>).fit_transform(iris.data, iris.target)</span><br><span class="line">print(iris_pfe[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[ 3.5  0.2]
 [ 3.   0.2]
 [ 3.2  0.2]
 [ 3.1  0.2]
 [ 3.6  0.2]]
</code></pre>
<h2 id="33-embedded"><a class="markdownIt-Anchor" href="#33-embedded"></a> 3.3 Embedded</h2>
<h3 id="331-基于惩罚项的特征选择法"><a class="markdownIt-Anchor" href="#331-基于惩罚项的特征选择法"></a> 3.3.1 基于惩罚项的特征选择法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectFromModel</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line"><span class="comment">#带L1惩罚项的逻辑回归作为基模型的特征选择</span></span><br><span class="line">iris_sfm=SelectFromModel(LogisticRegression(penalty=<span class="string">&quot;l1&quot;</span>, C=<span class="number">0.1</span>)).fit_transform(iris.data, iris.target)</span><br><span class="line">print(iris_sfm[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[ 5.1  3.5  1.4]
 [ 4.9  3.   1.4]
 [ 4.7  3.2  1.3]
 [ 4.6  3.1  1.5]
 [ 5.   3.6  1.4]]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LR</span>(<span class="params">LogisticRegression</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, threshold=<span class="number">0.01</span>, dual=<span class="literal">False</span>, tol=<span class="number">1e-4</span>, C=<span class="number">1.0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 fit_intercept=<span class="literal">True</span>, intercept_scaling=<span class="number">1</span>, class_weight=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 random_state=<span class="literal">None</span>, solver=<span class="string">&#x27;liblinear&#x27;</span>, max_iter=<span class="number">100</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 multi_class=<span class="string">&#x27;ovr&#x27;</span>, verbose=<span class="number">0</span>, warm_start=<span class="literal">False</span>, n_jobs=<span class="number">1</span></span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#权值相近的阈值</span></span><br><span class="line">        self.threshold = threshold</span><br><span class="line">        LogisticRegression.__init__(self, penalty=<span class="string">&#x27;l1&#x27;</span>, dual=dual, tol=tol, C=C,</span><br><span class="line">                 fit_intercept=fit_intercept, intercept_scaling=intercept_scaling, class_weight=class_weight,</span><br><span class="line">                 random_state=random_state, solver=solver, max_iter=max_iter,</span><br><span class="line">                 multi_class=multi_class, verbose=verbose, warm_start=warm_start, n_jobs=n_jobs)</span><br><span class="line">        <span class="comment">#使用同样的参数创建L2逻辑回归</span></span><br><span class="line">        self.l2 = LogisticRegression(penalty=<span class="string">&#x27;l2&#x27;</span>, dual=dual, tol=tol, C=C, fit_intercept=fit_intercept, intercept_scaling=intercept_scaling, class_weight = class_weight, random_state=random_state, solver=solver, max_iter=max_iter, multi_class=multi_class, verbose=verbose, warm_start=warm_start, n_jobs=n_jobs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y, sample_weight=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="comment">#训练L1逻辑回归</span></span><br><span class="line">        <span class="built_in">super</span>(LR, self).fit(X, y, sample_weight=sample_weight)</span><br><span class="line">        self.coef_old_ = self.coef_.copy()</span><br><span class="line">        <span class="comment">#训练L2逻辑回归</span></span><br><span class="line">        self.l2.fit(X, y, sample_weight=sample_weight)</span><br><span class="line"></span><br><span class="line">        cntOfRow, cntOfCol = self.coef_.shape</span><br><span class="line">        <span class="comment">#权值系数矩阵的行数对应目标值的种类数目</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cntOfRow):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cntOfCol):</span><br><span class="line">                coef = self.coef_[i][j]</span><br><span class="line">                <span class="comment">#L1逻辑回归的权值系数不为0</span></span><br><span class="line">                <span class="keyword">if</span> coef != <span class="number">0</span>:</span><br><span class="line">                    idx = [j]</span><br><span class="line">                    <span class="comment">#对应在L2逻辑回归中的权值系数</span></span><br><span class="line">                    coef1 = self.l2.coef_[i][j]</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(cntOfCol):</span><br><span class="line">                        coef2 = self.l2.coef_[i][k]</span><br><span class="line">                        <span class="comment">#在L2逻辑回归中，权值系数之差小于设定的阈值，且在L1中对应的权值为0</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">abs</span>(coef1-coef2) &lt; self.threshold <span class="keyword">and</span> j != k <span class="keyword">and</span> self.coef_[i][k] == <span class="number">0</span>:</span><br><span class="line">                            idx.append(k)</span><br><span class="line">                    <span class="comment">#计算这一类特征的权值系数均值</span></span><br><span class="line">                    mean = coef / <span class="built_in">len</span>(idx)</span><br><span class="line">                    self.coef_[i][idx] = mean</span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectFromModel</span><br><span class="line"> </span><br><span class="line"><span class="comment">#带L1和L2惩罚项的逻辑回归作为基模型的特征选择</span></span><br><span class="line"><span class="comment">#参数threshold为权值系数之差的阈值</span></span><br><span class="line">iris_sfm2=SelectFromModel(LR(threshold=<span class="number">0.5</span>, C=<span class="number">0.1</span>)).fit_transform(iris.data, iris.target)</span><br><span class="line">print(iris_sfm2[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]
</code></pre>
<h3 id="332-基于树模型的特征选择法"><a class="markdownIt-Anchor" href="#332-基于树模型的特征选择法"></a> 3.3.2 基于树模型的特征选择法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectFromModel</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment">#GBDT作为基模型的特征选择</span></span><br><span class="line">iris_sfm3=SelectFromModel(GradientBoostingClassifier()).fit_transform(iris.data, iris.target)</span><br><span class="line">print(iris_sfm3[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[ 1.4  0.2]
 [ 1.4  0.2]
 [ 1.3  0.2]
 [ 1.5  0.2]
 [ 1.4  0.2]]
</code></pre>
<h1 id="4-降维"><a class="markdownIt-Anchor" href="#4-降维"></a> 4 降维</h1>
<h2 id="41-主成分分析法pca"><a class="markdownIt-Anchor" href="#41-主成分分析法pca"></a> 4.1 主成分分析法（PCA）</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line"><span class="comment">#主成分分析法，返回降维后的数据</span></span><br><span class="line"><span class="comment">#参数n_components为主成分数目</span></span><br><span class="line">iris_pca=PCA(n_components=<span class="number">2</span>).fit_transform(iris.data)</span><br><span class="line">print(iris_pca[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[[-2.68420713  0.32660731]
 [-2.71539062 -0.16955685]
 [-2.88981954 -0.13734561]
 [-2.7464372  -0.31112432]
 [-2.72859298  0.33392456]]
</code></pre>
<h2 id="42-线性判别分析法lda"><a class="markdownIt-Anchor" href="#42-线性判别分析法lda"></a> 4.2 线性判别分析法（LDA）</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.lda <span class="keyword">import</span> LDA</span><br><span class="line"></span><br><span class="line"><span class="comment">#线性判别分析法，返回降维后的数据</span></span><br><span class="line"><span class="comment">#参数n_components为降维后的维数</span></span><br><span class="line">LDA(n_components=<span class="number">2</span>).fit_transform(iris.data, iris.target)</span><br></pre></td></tr></table></figure>
<pre><code>---------------------------------------------------------------------------

ImportError                               Traceback (most recent call last)

&lt;ipython-input-56-21fd5d727aec&gt; in &lt;module&gt;()
----&gt; 1 from sklearn.lda import LDA
      2 
      3 #线性判别分析法，返回降维后的数据
      4 #参数n_components为降维后的维数
      5 LDA(n_components=2).fit_transform(iris.data, iris.target)


ImportError: No module named 'sklearn.lda'
</code></pre>
<p><strong>参考文章</strong></p>
<p>1.<a href="http://www.cnblogs.com/jasonfreak/p/5448385.html">使用sklearn做单机特征工程</a></p>
<p>2.<a href="https://blog.csdn.net/lming_08/article/details/39210409">利用scikit-learn进行FeatureSelection</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>特征工程</tag>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解皮尔逊相关系数</title>
    <url>/2017/03/18/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%9A%AE%E5%B0%94%E9%80%8A%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/</url>
    <content><![CDATA[<p>本文介绍机器学习中的皮尔逊相关系数</p>
<a id="more"></a>
<h1 id="1是什么"><a class="markdownIt-Anchor" href="#1是什么"></a> 1.是什么？</h1>
<blockquote>
<p>在统计学中，皮尔逊相关系数( Pearson correlation coefficient），又称皮尔逊积矩相关系数（Pearson product-moment correlation coefficient，简称 PPMCC或PCCs），是用于度量两个变量X和Y之间的相关（线性相关），其值介于-1与1之间。</p>
</blockquote>
<h1 id="2怎么算"><a class="markdownIt-Anchor" href="#2怎么算"></a> 2.怎么算？</h1>
<blockquote>
<p>Pearson相关系数是用协方差除以两个变量的标准差得到的，虽然协方差能反映两个随机变量的相关程度（协方差大于0的时候表示两者正相关，小于0的时候表示两者负相关），但其数值上受量纲的影响很大，不能简单地从协方差的数值大小给出变量相关程度的判断。为了消除这种量纲的影响，于是就有了相关系数的概念。</p>
</blockquote>
<h1 id="3适用范围"><a class="markdownIt-Anchor" href="#3适用范围"></a> 3.适用范围</h1>
<blockquote>
<p>当两个变量的标准差都不为零时，相关系数才有定义，皮尔逊相关系数适用于：<br />
(1)、两个变量之间是线性关系，都是连续数据。<br />
(2)、两个变量的总体是正态分布，或接近正态的单峰分布。<br />
(3)、两个变量的观测值是成对的，每对观测值之间相互独立。</p>
</blockquote>
<h1 id="4皮尔逊相关系数和余弦相似度"><a class="markdownIt-Anchor" href="#4皮尔逊相关系数和余弦相似度"></a> 4.皮尔逊相关系数和余弦相似度</h1>
<blockquote>
<p>皮尔逊相关系数的计算是先对向量每一分量减去分量均值，再求余弦相似度，这一操作称为中心化。</p>
</blockquote>
<h1 id="5皮尔逊相关系数和检验p值"><a class="markdownIt-Anchor" href="#5皮尔逊相关系数和检验p值"></a> 5.皮尔逊相关系数和检验P值</h1>
<blockquote>
<p>（1）显著水平,就是P值,这是首要的,因为如果不显著,相关系数再高也没用,可能只是因为偶然因素引起的,那么多少才算显著,一般p值小于0.05就是显著了；如果小于0.01就更显著；例如p值=0.001,就是很高的显著水平了,只要显著,就可以下结论说：拒绝原假设无关,两组数据显著相关也说两者间确实有明显关系.通常需要p值小于0.1,最好小于0.05设甚至0.01,才可得出结论：两组数据有明显关系,如果p=0.5,远大于0.1,只能说明相关程度不明显甚至不相关.起码不是线性相关.</p>
<p>（2）相关系数,也就是Pearson Correlation(皮尔逊相关系数),通常也称为R值,在确认上面指标显著情况下,再来看这个指标,一般相关系数越高表明两者间关系越密切.<br />
R&gt;0 代表连个变量正相关,即一个变大另一个随之变大</p>
</blockquote>
<h1 id="6统计学三大相关系数"><a class="markdownIt-Anchor" href="#6统计学三大相关系数"></a> 6.统计学三大相关系数</h1>
<h2 id="a斯皮尔曼等级相关系数"><a class="markdownIt-Anchor" href="#a斯皮尔曼等级相关系数"></a> a.斯皮尔曼等级相关系数</h2>
<blockquote>
<p>定义：主要用于解决称名数据和顺序数据相关的问题。适用于两列变量，而且具有等级变量性质具有线性关系的资料。</p>
<p>区别1:斯皮尔曼等级相关系数对数据条件的要求没有皮尔逊相关系数严格，只要两个变量的观测值是成对的等级评定资料，或者是由连续变量观测资料转化得到的等级资料，不论两个变量的总体分布形态、样本容量的大小如何，都可以用斯皮尔曼等级相关系数来进行研究。</p>
<p>区别2:相对于皮尔森相关系数，斯皮尔曼相关系数对于数据错误和极端值的反应不敏感。但是一组能用积差相关计算的数据，如果改用等级相关，精确度会低于积差相关。凡符合积差相关条件的，最好不要用等级相关计算。</p>
</blockquote>
<h2 id="b肯德尔相关系数"><a class="markdownIt-Anchor" href="#b肯德尔相关系数"></a> b.肯德尔相关系数</h2>
<blockquote>
<p>定义：Kendall(肯德尔)系数的定义：n个同类的统计对象按特定属性排序，其他属性通常是乱序的。同序对（concordant pairs）和异序对（discordant pairs）之差与总对数（n*(n-1)/2)的比值定义为Kendall(肯德尔)系数。</p>
</blockquote>
<h2 id="c选择那种相关系数"><a class="markdownIt-Anchor" href="#c选择那种相关系数"></a> c.选择那种相关系数</h2>
<blockquote>
<p>适用情况1：计算积距pearson相关系数，连续性变量才可采用;计算Spearman秩相关系数，适合于定序变量或不满足正态分布假设的等间隔数据;计算Kendall秩相关系数，适合于定序变量或不满足正态分布假设的等间隔数据。</p>
<p>适用情况2：当资料不服从双变量正态分布或总体分布未知，或原始数据用等级表示时，宜用 spearman或kendall相关。</p>
</blockquote>
<h1 id="7相关系数的简单分类"><a class="markdownIt-Anchor" href="#7相关系数的简单分类"></a> 7.相关系数的简单分类</h1>
<blockquote>
<p>|r|&gt;0.95 显著性相关<br />
|r|&gt;=0.8 高度相关<br />
0.5&lt;=|r|&lt;0.8 中度相关<br />
0.3&lt;=|r|&lt;0.5 低度相关<br />
|r|&lt;0.3 关系极弱，认为不相关</p>
</blockquote>
<p>参考：<br />
<a href="https://baike.baidu.com/item/%E7%9A%AE%E5%B0%94%E9%80%8A%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/12712835?fr=aladdin">皮尔逊相关系数</a><br />
<a href="https://blog.csdn.net/huangfei711/article/details/78456165?utm_source=gold_browser_extension">如何通俗易懂地理解皮尔逊相关系数？</a><br />
<a href="https://blog.csdn.net/sujinhehehe/article/details/83380303">皮尔逊相关系数和余弦相似度</a><br />
<a href="https://blog.csdn.net/xiaocong1990/article/details/71267144">皮尔逊相关系数和检验P值</a><br />
<a href="https://blog.csdn.net/lambsnow/article/details/79972145">皮尔森Pearson相关系数 VS 斯皮尔曼Spearman相关系数</a><br />
<a href="https://blog.csdn.net/ruthywei/article/details/82533595">统计学三大相关系数之肯德尔(kendall)相关性系数</a><br />
<a href="https://www.cnblogs.com/quietwalk/p/8288205.html">Kendall’s tau-b（肯德尔）等级相关系数</a><br />
<a href="https://blog.csdn.net/zhaozhn5/article/details/78392220">三大统计相关系数：Pearson、Spearman秩相关系数、kendall等级相关系数</a><br />
<a href="https://baike.baidu.com/item/%E6%96%AF%E7%9A%AE%E5%B0%94%E6%9B%BC%E7%AD%89%E7%BA%A7%E7%9B%B8%E5%85%B3/1858796?fr=aladdin">斯皮尔曼等级相关</a><br />
<a href="https://baike.baidu.com/item/kendall%E7%A7%A9%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/6246854?fr=aladdin">kendall秩相关系数</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>评价指标</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积核的理解-多通道的卷积过程</title>
    <url>/2017/03/15/%E5%8D%B7%E7%A7%AF%E6%A0%B8%E7%9A%84%E7%90%86%E8%A7%A3-%E5%A4%9A%E9%80%9A%E9%81%93%E7%9A%84%E5%8D%B7%E7%A7%AF%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>问题</strong><br />
1.对一个通道进行卷积时，10个卷积核得到10个featrue map;那么10个卷积核对多个通道（比如RGB三个通道）进行卷积时，得到多少个featrue map?是10*3=30个吗？<br />
2.多个卷积核对一个通道进行卷积是，其参数计算方法为：<br />
（卷积核-宽×卷积核-高）×通道数+通道数（通道数即偏置）</p>
<a id="more"></a>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"></span><br><span class="line">model=Sequential()</span><br><span class="line">model.add(Conv2D(<span class="number">2</span>, (<span class="number">2</span>,<span class="number">3</span>),input_shape=(<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">conv2d_3 (Conv2D)            (<span class="literal">None</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)           <span class="number">14</span>        </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">14</span></span><br><span class="line">Trainable params: <span class="number">14</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure>
<p>那么多个卷积核对多个通道操作时，使用的参数个数为多少？？？</p>
<hr />
<p>下文思路来源于博客：</p>
<ul>
<li>[<a href="https://blog.csdn.net/u014114990/article/details/51125776">https://blog.csdn.net/u014114990/article/details/51125776</a>]</li>
<li>[<a href="https://blog.csdn.net/yudiemiaomiao/article/details/72466402">https://blog.csdn.net/yudiemiaomiao/article/details/72466402</a>]</li>
</ul>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"></span><br><span class="line">model=Sequential()</span><br><span class="line">model.add(Conv2D(<span class="number">2</span>, (<span class="number">2</span>,<span class="number">3</span>),input_shape=(<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>)))</span><br><span class="line">p</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">conv2d_5 (Conv2D)            (<span class="literal">None</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)           <span class="number">26</span>        </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">26</span></span><br><span class="line">Trainable params: <span class="number">26</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br></pre></td></tr></table></figure>
<p>该例子卷积核的计算公式为：<code>!$输入通道数*输出通道数*卷积核宽*卷积核高$</code><br />
即2*2*2*3</p>
<p><mark>caffe实现卷积的过程</mark></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613529748060.png" alt="enter description here" title="Caffe卷积过程" /></p>
<blockquote>
<p>Caffe中的卷积计算是将卷积核矩阵和输入图像矩阵变换为两个大的矩阵A与B，然后A与B进行矩阵相乘得到结果C（利用GPU进行矩阵相乘的高效性），三个矩阵的说明如下：<br />
（1）在矩阵A中<br />
M为卷积核个数，K=k*k，等于卷积核大小，即第一个矩阵每行为一个卷积核向量（是将二维的卷积核转化为一维），总共有M行，表示有M个卷积核。<br />
（2）在矩阵B中     		$$ N=（（image_h + 2<em>pad_h – kernel_h）/stride_h+<br />
1）</em>（（image_w +2<em>pad_w – kernel_w）/stride_w + 1）$$<br />
image_h：输入图像的高度<br />
image_w：输入图像的宽度<br />
pad_h：在输入图像的高度方向两边各增加pad_h个单位长度（因为有两边，所以乘以2）<br />
pad_w：在输入图像的宽度方向两边各增加pad_w个单位长度（因为有两边，所以乘以2）<br />
kernel_h：卷积核的高度<br />
kernel_w：卷积核的宽度<br />
stride_h：高度方向的滑动步长；<br />
stride_w：宽度方向的滑动步长。<br />
因此，N为输出图像大小的长宽乘积，也是卷积核在输入图像上滑动可截取的最大特征数。<br />
K=k</em>k，表示利用卷积核大小的框在输入图像上滑动所截取的数据大小，与卷积核大小一样大。 （3）在矩阵C中<br />
矩阵C为矩阵A和矩阵B相乘的结果，得到一个M*N的矩阵，其中每行表示一个输出图像即feature map，共有M个输出图像（输出图像数目等于卷积核数目）<br />
（在Caffe中是使用src/caffe/util/im2col.cu中的im2col和col2im来完成矩阵的变形和还原操作）</p>
</blockquote>
<hr />
<p>其实多个卷积核对多个通道进行卷积的过程是：<br />
1.每个输入通道对应一个卷积核（相互之间不同）<br />
2.某个输入通道与对应卷积核乘积，然后所有输出加起来，即代表一个输出通道；每个输出通道都这样计算而来。</p>
<p><strong>例子</strong></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613529748240.gif" alt="enter description here" title="多通道卷积过程" /></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>卷积</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习链式求导法则</title>
    <url>/2017/03/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%93%BE%E5%BC%8F%E6%B1%82%E5%AF%BC%E6%B3%95%E5%88%99/</url>
    <content><![CDATA[<p>本文使用一个两层的神经网络，推导深度学习中经典的过程：链式求导</p>
<a id="more"></a>
<p><strong>原始网络结构</strong><br />
<img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613531916405.png" alt="网络结构" /></p>
<p>链式求导法则，从网络的输出层将输入层逐层回传误差，并求得每个参数要下降的梯度。</p>
<h2 id="1输出层的前一层之间的参数更新"><a class="markdownIt-Anchor" href="#1输出层的前一层之间的参数更新"></a> 1.输出层的前一层之间的参数更新</h2>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613531916548.png" alt="倒数第二层参数更新示意图" /></p>
<p>对于一个神经元来说，其更新节点前的边权重过程需要求三个导数，分别是：<br />
(1)边上尾节点总的误差与输出之间的导数，即目标函数与输出之间的导数</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>e</mi><msub><mi>r</mi><mn>1</mn></msub><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>2</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>t</mi><mi>r</mi><mi>a</mi><mi>g</mi><msub><mi>e</mi><mn>1</mn></msub><mo>−</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>t</mi><mi>r</mi><mi>a</mi><mi>g</mi><msub><mi>e</mi><mn>2</mn></msub><mo>−</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>2</mn></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo>−</mo><mi>t</mi><mi>r</mi><mi>a</mi><mi>g</mi><msub><mi>e</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">Der_1=\frac{\sigma(E_{total})}{\sigma(Out_{o1})}=\frac{\sigma(E_{o1}+E_{o2})}{\sigma(Out_{o1})}\\=\frac{\sigma(\frac{1}{2}((trage_1-Out_{o1})^2+(trage_2-Out_{o2})^2 ) }{\sigma(Out_{o1})}=Out_{o1}-trage_1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.516108em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.580108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7350000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>(2)边上尾节点输出和其激活函数的导数</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>e</mi><msub><mi>r</mi><mn>2</mn></msub><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>e</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>n</mi><mi>e</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub></mrow></msup></mrow></mfrac><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mi>e</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow></mrow></mfrac><mo>=</mo><mi>o</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>o</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Der_2=\frac{\sigma(Out_{o1})}{\sigma(net_{o1})}=\frac{\sigma(\frac{1}{1+e^{-net_{o1}}})}{\sigma{(net_{o1})}}=out_{o1}(1-out_{o1})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.574439em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.638439em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7933310000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7611214285714286em;"><span style="top:-2.8217785714285717em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29964em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>(3)边上尾节点输入与该边的导数</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>e</mi><msub><mi>r</mi><mn>3</mn></msub><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>e</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>w</mi><mn>5</mn></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub><mo>∗</mo><msub><mi>w</mi><mn>5</mn></msub><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>w</mi><mn>5</mn></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">Der_3=\frac{\sigma(net_{o1})}{\sigma(w_5)}=\frac{\sigma(Out_{h1} * w_5+b)}{\sigma(w_5)}=Out_{h1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>边权重<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">w_5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>下降的梯度为以上三个导数的乘积。</p>
<h2 id="2其他层参数更新"><a class="markdownIt-Anchor" href="#2其他层参数更新"></a> 2.其他层参数更新</h2>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613531916549.png" alt="倒数第三层参数更新示意图" /></p>
<p>下面展示求目标函数对权重<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的梯度，<br />
总体公式：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>w</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>∗</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>e</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>∗</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>e</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>w</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\sigma(E_{total})}{\sigma(w_1)}=\frac{\sigma(E_{total})}{\sigma(Out_{h_1})}* \frac{\sigma(Out_{h_1})}{\sigma(net_{h_1})} * \frac{\sigma(net_{h_1})}{\sigma(w_1)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3631em;vertical-align:-0.9361em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.3631em;vertical-align:-0.9361em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6769999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6769999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>其中：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac><mi mathvariant="normal">＝</mi><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>2</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>+</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>2</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac><mi mathvariant="normal">≠</mi><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>2</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\sigma(E_{total})}{\sigma(Out_{h_1})}＝ \frac{\sigma(E_{o1})+\sigma(E_{o2})}{\sigma(Out_{h_1})}= \frac{\sigma(E_{o1})}{\sigma(Out_{h_1})}+ \frac{\sigma(E_{o2})}{\sigma(Out_{h_1})} \neq   \frac{\sigma(E_{o1}+E_{o2})}{\sigma(Out_{h_1})}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3631em;vertical-align:-0.9361em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">＝</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3631em;vertical-align:-0.9361em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.3631em;vertical-align:-0.9361em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3631em;vertical-align:-0.9361em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>e</mi><msub><mi>t</mi><msub><mi>o</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>∗</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>e</mi><msub><mi>t</mi><msub><mi>o</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><msub><mi>h</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex"> \frac{\sigma(E_{o1})}{\sigma(Out_{h_1})}=\frac{\sigma(E_{o1})}{\sigma(net_{o_1})}* \frac{\sigma(net_{o_1})}{\sigma(Out_{h_1})}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3631em;vertical-align:-0.9361em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3631em;vertical-align:-0.9361em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.3631em;vertical-align:-0.9361em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6769999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>e</mi><msub><mi>t</mi><msub><mi>o</mi><mn>1</mn></msub></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>∗</mo><mfrac><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>O</mi><mi>u</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>e</mi><msub><mi>t</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\sigma(E_{o1})}{\sigma(net_{o_1})}=\frac{\sigma(E_{o1})}{\sigma(Out_{o1})} * \frac{\sigma(Out_{o1})}{\sigma(net_{o1})}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3631em;vertical-align:-0.9361em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9361em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>通过以上公式可以计算出，目标函数对权重<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的梯度。</p>
<p>参考：<br />
<a href="https://blog.csdn.net/zhaomengszu/article/details/77834845">大白话讲解BP算法</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>链式求导</tag>
      </tags>
  </entry>
  <entry>
    <title>Zotero使用教程(2)-数据备份</title>
    <url>/2016/06/02/Zotero%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(2)-%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<p>这篇文章的目标是让你无论是 <code>换系统</code>，<code>重新安装zotero</code>等都可以还原回你的文献库，而且整个过程基本是自动完成的。</p>
<a id="more"></a>
<p>这部分解决下面的两种情况：</p>
<blockquote>
<p>1.zotero有自己既定的一套存储方式，不是一般的文件管理器那样直接看到其pdf，这个可以通过前篇文章的插件zotfile解决。但是<strong>如果想备份这个插件导出来的pdf,该如何解决呢？</strong><br />
2.zotero不仅保存了pdf,还有各种各样的笔记，网页，如果仅仅保存pdf,显然是不够的。虽然zotero支持整个文献库的导入导出，但是得时常去手动备份，很是麻烦。</p>
</blockquote>
<p>在这里我极度向大家推荐，跨平台的同步工具 <code>坚果云</code>，只需要往设定的同步盘放入文件，文件就自动备份到云端，并且有移动版本，可以随时随地查看自己的文献。</p>
<p>下面是我的坚果云目录：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613486879369.png" alt="坚果云目录设置" /></p>
<p>目录解释：<br />
<strong>Zotero</strong>  是Zotero的存储目录，无论你在zotero作笔记，加标签等操作，zotero会存储到这里，然后坚果云自动同步，实现备份,重新安装zotero时，只需要设置该目录为存储目录，文献库就会和原来一模一样（包括笔记，网页啥的都在啊）。</p>
<p><strong>Zotero_papers</strong> 是使用插件zotfile导出的pdf文件目录，在Zotero导出到该目录后，坚果云会自动同步到云端，实现备份</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613486879375.png" alt="移动端查看导出的pdf" /></p>
<p>注：图片中导出pdf的有文件夹的层级关系，是因为我在Zotero的文献就是按照层级划分的，插件zotfile会按照层级自动新建文件夹到<strong>Zotero_papers</strong></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Zotero</tag>
      </tags>
  </entry>
  <entry>
    <title>给阅读的网页作标记</title>
    <url>/2016/06/01/%E7%BB%99%E9%98%85%E8%AF%BB%E7%9A%84%E7%BD%91%E9%A1%B5%E4%BD%9C%E6%A0%87%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>需求</strong>：经常性的阅读一些文档，阅读过程中，想做些记录，但是现有的这方面工具很少，即是有也是需要使用账号登录，并进行收费的</p>
<a id="more"></a>
<p>现在FireFox下找到一款名为Textmarker的插件，该插件支持对文本进行高亮显示，并且可以自定义高亮的样式。</p>
<p>插件地址：<a href="https://addons.mozilla.org/zh-CN/firefox/addon/textmarkerpro/?src=api">https://addons.mozilla.org/zh-CN/firefox/addon/textmarkerpro/?src=api</a></p>
<p>插件使用效果：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613525617346.jpg" alt="Textmarker使用效果" /></p>
<p>我的插件配置：<br />
<img src="./attachments/1613525617396.jpg" alt="Textmarker样式" /></p>
<p>导入配置数据：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613525617407.jpg" alt="导入配置数据" /></p>
<p><font color="red"><strong>注：标注后刷新会消失高亮，所以建议标注后存储到第三方中，比如印象笔记等。</strong></font></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Firefox</tag>
      </tags>
  </entry>
  <entry>
    <title>安装windows和linux双系统备忘录</title>
    <url>/2016/06/01/%E5%AE%89%E8%A3%85windows%E5%92%8Clinux%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<p>本文针对安装windows和linux双系统的流程进行梳理，汇集两个系统上常用的软件，并针对出错的问题进行记录</p>
<a id="more"></a>
<h2 id="安装过程"><a class="markdownIt-Anchor" href="#安装过程"></a> 安装过程</h2>
<p>略</p>
<h2 id="使用软件"><a class="markdownIt-Anchor" href="#使用软件"></a> 使用软件</h2>
<table>
<thead>
<tr>
<th>Windows</th>
<th>Ubuntu</th>
</tr>
</thead>
<tbody>
<tr>
<td>备份数据-》清理硬盘-》安装系统-》卸载多余的东西-》升级win10-》安装软件-》登录各软件帐号-》拷贝数据回本机</td>
<td>刻录U盘-》安装系统-》更新源-》安装软件-》美化</td>
</tr>
</tbody>
</table>
<p>Windows:</p>
<blockquote>
<p>必装：<br />
上网：校园网（<a href="http://dr.com">dr.com</a>)<br />
杀毒软件：电脑管家<br />
笔记：印象笔记<br />
社交：QQ轻聊版<br />
办公：word 2016(破解工具：KMSpico Install)<br />
浏览器：谷歌(<a href="mailto:wushaogui123@gmail.com">wushaogui123@gmail.com</a>)/360极速(15878192524)<br />
网盘：百度网盘<br />
解压工具：闪电压缩<br />
编辑工具：sublime/notepad++<br />
音乐：网易云音乐(<a href="mailto:wushaogui2014@126.com">wushaogui2014@126.com</a>)<br />
截图：Fast stone<br />
翻墙：lantern<br />
驱动：驱动人生<br />
虚拟镜像：Daemon_Tools_Lite<br />
英语词典：有道<br />
选装：<br />
视频：腾讯视频/优酷<br />
购物：阿里旺旺<br />
模拟器：VMwareworkstation_full<br />
U盘刻录工具：UltraISO_cn<br />
思维导图：mini8/visio<br />
画网络图：Cytoscape<br />
Markdown:马克飞象/小书匠<br />
修图工具：Adobe CC 2015 64位<br />
数学工具：Matlab R2016b<br />
游戏和软件：stream<br />
系统工具：CPU-Z<br />
编程类：<br />
C:C-free<br />
R:R+R studio<br />
python:pycham<br />
java:jdk+eclipse<br />
scala:ideaIC</p>
</blockquote>
<p>Ubuntu:<br />
每次安装完Ubuntu后都到网上找别人的“ubuntu安装后需要做的事情”，麻烦得很，现状结合自己的需求将安装完ubuntu后，还原之前工作状态的过程记录下来，以备不时之需！</p>
<p>系统语言的更换-&gt;源的更换与系统的更新-&gt;输入法的安装-&gt;应用的安装-&gt;其他配置</p>
<blockquote>
<p>输入法：搜狗输入法</p>
<p>浏览器：火狐浏览器/Vivaldi<br />
办公：wps</p>
<p>思维导图：Xmind8<br />
音乐：网易云音乐<br />
翻墙：lantern(<a href="https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-beta-64-bit.deb">https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-beta-64-bit.deb</a>) / Shadowsocks-Qt5<br />
画网络图：Cytoscape<br />
英语词典：有道<br />
备份：坚果云<br />
壁纸：variety<br />
天气:gis-weather<br />
截图工具：shutter<br />
系统清理：stacer<br />
屏幕录制工具(gif):peek<br />
屏幕录制:kazam<br />
makedown:typroa/小书匠<br />
文档管理：Zotero/mendeley</p>
<p>PDF阅读器：Foxit Reader</p>
<p>相册管理：Pix相册</p>
<p>邮件：雷鸟邮件</p>
<p>Windows软件模拟工具：crossover（QQ/微信）  独立的Wine-QQ与Wechat<br />
服务器文档编辑：vim/notepadqq<br />
编程类：VS/sublime3/git</p>
<p>远程桌面工具：TeamViewer</p>
<p>视频播放器：VLC</p>
<p>終端：zsh</p>
</blockquote>
<blockquote>
<p><strong>升级Ubuntu系统</strong>：<br />
ubuntu14…10怎么升级到ubuntu15.04_百度经验</p>
<p>安装Ubuntu要做的事：<br />
安装Ubuntu 16.04后要做的事 - skykingf的专栏 - 博客频道 - <a href="http://CSDN.NET">CSDN.NET</a></p>
<p><strong>美化：</strong><br />
ubuntu16.04主题美化和软件推荐 - ZeeCoder - 博客频道 - <a href="http://CSDN.NET">CSDN.NET</a></p>
<p><strong>其他问题：</strong></p>
<ul>
<li>
<p>升级过程遇到boot空间不足：<br />
Ubuntu升级出现/boot空间不足解决 - 海涛的CSDN博客 - 博客频道 - <a href="http://CSDN.NET">CSDN.NET</a></p>
</li>
<li>
<p>更换控制台语言：</p>
</li>
<li>
<p>改变ubuntu终端显示语言（桌面系统是中文，终端提示是英文） - Linux系统教程<br />
字体安装：</p>
</li>
<li>
<p>linux终端中最漂亮的几款字体介绍及安装 - 郭大侠的专栏 - 博客频道 - <a href="http://CSDN.NET">CSDN.NET</a></p>
</li>
<li>
<p>网易云音乐无法启动：</p>
</li>
<li>
<p>zsh-通配符问题<br />
-&gt;在~/.zshrc文件中加入下面的设置<br />
setopt nonomatch</p>
</li>
<li>
<p>WPS for Linux提示“系统缺失字体symbol、wingdings、wingdings dinphy - 孜_行 | 小知识，大家享，你也行</p>
</li>
<li>
<p>设置开机启动:<br />
<a href="http://os.51cto.com/art/201508/487326.htm">http://os.51cto.com/art/201508/487326.htm</a><br />
<a href="http://blog.csdn.net/ocgcn2010/article/details/43260705">http://blog.csdn.net/ocgcn2010/article/details/43260705</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Calibre中使用DeDRM插件进行Kindle电子书解锁</title>
    <url>/2016/06/01/Calibre%E4%B8%AD%E4%BD%BF%E7%94%A8DeDRM%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8CKindle%E7%94%B5%E5%AD%90%E4%B9%A6%E8%A7%A3%E9%94%81/</url>
    <content><![CDATA[<p>本文利用calire的DeDRM插件解锁kindle的加密电子书，文中需要使用kindle的设备号，意味着待解锁的电子书必须是已经购买的</p>
<a id="more"></a>
<p>废话不多说，下面是Calibre和DeDRM插件的下载地址：</p>
<blockquote>
<p><a href="https://calibre-ebook.com/download">https://calibre-ebook.com/download</a><br />
<a href="https://github.com/apprenticeharper/DeDRM_tools/releases/tag/v6.5.5">https://github.com/apprenticeharper/DeDRM_tools/releases/tag/v6.5.5</a></p>
</blockquote>
<p>假设你已经安装好Calibre，并下载好DeDRM插件，只需走以下三个步骤即可完成解锁。</p>
<h1 id="1在calibre上安装dedrm插件"><a class="markdownIt-Anchor" href="#1在calibre上安装dedrm插件"></a> 1.在Calibre上安装DEDRM插件</h1>
<p>将下载的DeDRM插件进行解压，需要强调的是：插件文件在下面图示路径中。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613525776830.png" alt="图2-插件文件路径" /></p>
<p>在Calibre中点击<code>首选项</code>进入设置界面，点击<code>插件</code>按钮进入插件管理界面。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613525776966.png" alt="图3-插件管理界面" /></p>
<p>点击<code>从文件中加载插件</code>，然后选择上图2红框的文件，完成插件的安装，安装完成可以在<em>文件类型</em>中找到插件。</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613525776981.png" alt="图4-安装插件" /></p>
<h1 id="2配置dedrm插件"><a class="markdownIt-Anchor" href="#2配置dedrm插件"></a> 2.配置DeDRM插件</h1>
<p>双击进入插件配置界面，填入<strong>Kindle设备序列号</strong>，即完成配置，步骤如下：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613525776982.png" alt="图5-配置插件" /></p>
<p><strong>Kindle设备序列号</strong>通过登录自己的亚马逊帐号找到，步骤如下：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613525776983.png" alt="图6-查找Kindle设备序列号" /></p>
<p>注意：填入序列号不能包含空格</p>
<h1 id="3添加书籍"><a class="markdownIt-Anchor" href="#3添加书籍"></a> 3.添加书籍</h1>
<p>使用Calibre添加书籍或者将书籍直接拖入，即可完成解锁，书籍不在有DRM保护。</p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Calibre</tag>
      </tags>
  </entry>
  <entry>
    <title>linux上wps系统缺失字体</title>
    <url>/2016/06/01/linux%E4%B8%8Awps%E7%B3%BB%E7%BB%9F%E7%BC%BA%E5%A4%B1%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<p>在Linux上新安装WPS后，第一次打开就出现以下问题：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613525052698.png" alt="wps系统缺失字体" /></p>
<p><strong>问题原因：</strong><br />
Linux上缺少windows字体，把字体添加上去即可。</p>
<a id="more"></a>
<p><strong>操作步骤：</strong><br />
1.下载缺失字体</p>
<blockquote>
<p>国内下载地址：<a href="https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps_symbol_fonts.zip">https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps_symbol_fonts.zip</a><br />
国外下载地址：<a href="https://pan.baidu.com/s/17-glCiVNTc70ZDu35dpDjg">https://pan.baidu.com/s/17-glCiVNTc70ZDu35dpDjg</a><br />
<mark>字体下载后，将其解压到/usr/share/fonts中,终端执行以下命令即可</mark></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip wps_symbol_fonts.zip</span><br><span class="line">sudo mv  wps_symbol_fonts  /usr/share/fonts</span><br></pre></td></tr></table></figure>
<p>2.修改字体权限，终端执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/fonts/</span><br><span class="line">chmod 755 wps_symbol_fonts</span><br><span class="line"><span class="built_in">cd</span> /usr/share/fonts/wps_symbol_fonts</span><br><span class="line">chmod 644 *</span><br></pre></td></tr></table></figure>
<p>3.生成字体索引,终端执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/fonts/wps_symbol_fonts</span><br><span class="line">sudo mkfontscale</span><br><span class="line">sudo mkfontdir</span><br></pre></td></tr></table></figure>
<p>4.更新字体缓存,终端执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fc-cache</span><br></pre></td></tr></table></figure>
<p>5.重启WPS</p>
<blockquote>
<p>问题解决</p>
</blockquote>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Zotero使用教程(1)-安装及配置</title>
    <url>/2016/06/01/Zotero%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(1)-%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>作为一名科研人员，经常要阅读大量文献（当然我收集&gt;&gt;阅读，哎！），收集来的文献一般我们使用文件夹管理，通常使用文件夹命名和层级分布解决论文的分类问题。</p>
<p>但是，实际上，我需要一种不打开文档就能知道文档说啥的工具，不需要打开文档一点点看标注，才能理解论文说了啥的工具。并且，文档不仅可以在电脑端查看，还可以在移动设备进行查看，甚至推送到Kindle上进行阅读。</p>
<p>下面从Zotero的安装和配置的过程进行讲解，方便搞科研的小伙伴们。</p>
<a id="more"></a>
<h1 id="zotero的安装"><a class="markdownIt-Anchor" href="#zotero的安装"></a> Zotero的安装</h1>
<p>官方链接： <a href="https://www.zotero.org/">https://www.zotero.org/</a></p>
<p>根据自己的系统下载相应文件：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546961981.jpg" alt="下载Zotero" /></p>
<blockquote>
<p>注：右边框是浏览器插件，用于从浏览器保存信息到Zotero。</p>
</blockquote>
<p>安装过程不详细说了，如果你的系统是Linux,把下载的压缩包解压缩后，里面就有可运行程序，将解压缩后的文件夹整个拷贝到相应目录（比如：/opt/Zotero_linux-x86_64），为方便启动，也可以配置路径到系统中。</p>
<h1 id="配置根据个人喜好"><a class="markdownIt-Anchor" href="#配置根据个人喜好"></a> 配置（根据个人喜好）</h1>
<p>启动Zotero成功后，在<code>编辑</code>那里找到<code>首选项</code>，配置以下信息：</p>
<blockquote>
<p>1.中文界面：在<code>高级</code>里的<code>常规</code>中配置语言<br />
2.文件存储位置：这个文件存储位置就是首次启动是设置的位置，如果首次启动没设置好，可以在<code>高级</code>里的<code>文件和文件夹</code>中配置<br />
3.登录个人账号（我没有用Zotero的账号）：这个打开设置界面，在<code>同步</code>下进行设置。只有登录这个账号后才可以选择远程同步方式，比如：同步到Zotero（空间小），WebDav同步（可以用坚果云，不过我同样没用，因为同步上去的东西我看不懂，后面我同样用坚果云备份，但是是同步一个插件规范后的文件）</p>
</blockquote>
<p>注：设置的对应英文名字我在这不进行另外标注</p>
<h1 id="zotero的插件"><a class="markdownIt-Anchor" href="#zotero的插件"></a> Zotero的插件</h1>
<p>Zotero的插件是让我爱上它真正的原因，没找到Zotero之前，我也用过类似工具，始终觉得不顺手，不是收费（原谅学生党这样说，有钱还是可以支持的），就是存储空间受限。</p>
<p><strong>(1) ZotFile</strong><br />
Zotero的神级插件，这玩意可以自动获取导入文件的元数据，自动命名附件（这真的太神奇了 ）！</p>
<p>安装方式<br />
点击 <a href="https://github.com/jlegewie/zotfile/releases">ZotFile</a> 下载插件后，在Zotero的菜单栏的<code>工具</code>找到<code>插件</code>，点击下面红框：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546961965.jpg" alt="本地安装插件" /></p>
<p>然后选择<code>Install Add-on From File</code></p>
<p>配置<br />
在工具目录下，点击<code>ZotFile Preferences</code></p>
<ul>
<li>配置附加文件默认目录</li>
</ul>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546961980.jpg" alt="附加文件默认目录" /></p>
<p>这个目录是为了快速添加附件，当你保存下来的条目没有任何附加时，而你又想为条目添加一些pdf,ppt等附件，你将文件下载到该目录后，右键点击该条目，选择<code>Attach new file</code>，插件会自动加载该目录下最新更新的文件到该条目下。</p>
<ul>
<li>配置文档存储样式</li>
</ul>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546961983.jpg" alt="定义附件存储位置" /></p>
<p>勾选红框上面的勾选框，然后设置相应目录，这个设置是为了快速按一定命名方式导出附件，比如论文可以按下面格式导出：</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613546961982.jpg" alt="附件导出格式" /></p>
<p>这里的文档命名格式：时间_作者_文档名</p>
<p>是不是很清新的命名，包含很多信息吧，更多命名方式参考：<a href="http://zotfile.com/">http://zotfile.com/</a>   中的“RENAMING RULES”</p>
<p>更为神奇的是，这个目录设置为坚果云的同步目录，这样文档可以跨设备进行浏览了，等我下次更新吧。</p>
<p><strong>(2) Zotero Scholar Citations</strong><br />
<a href="https://github.com/beloglazov/zotero-scholar-citations">Zotero Scholar Citations</a> 开源在github上。是一个引用次数更新插件，不过这个插件需要翻出去才能使用。</p>
<p>安装方式<br />
点击上面链接，把相应的.xpi文件下载下来，然后像前面一样进行本地安装。</p>
<p>配置<br />
不需要配置，直接在相应目录下右键，然后点击<code>update citations</code>，插件会去谷歌学术搜索把当前引用次数下载下来，但是由于谷歌的限制，一次不要更新太多，我曾经一次更新很多，现在到不好使了。</p>
<p><font color="red">注：文献引用次数会在条目的<code>其他</code>列下显示。</font></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Zotero</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文本处理三剑客之awk</title>
    <url>/2016/06/01/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bawk/</url>
    <content><![CDATA[<p>本文针对linux中的文本处理“三剑客”之一的awk命令进行使用解释，awk对以行为单位对文本数据进行处理</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看系统环境</span></span><br><span class="line">!lsb_release -a</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<h2 id="-code1-"><a class="markdownIt-Anchor" href="#-code1-"></a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:	LinuxMint</span><br><span class="line">Description:	Linux Mint 19.3 Tricia</span><br><span class="line">Release:	19.3</span><br><span class="line">Codename:	tricia</span><br></pre></td></tr></table></figure></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看文本内容</span></span><br><span class="line">!cat awk_text</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 M.Tansley     05/99     48311     Green     8     40     44</span><br><span class="line">2 J.Lulu     06/99     48317     green     9     24     26</span><br><span class="line">3 P.Bunny,02/99,48,Yellow,12,35,28</span><br><span class="line">4 J.Troll:07/99:4842:Brown-3:12:26:26</span><br><span class="line">5 L.Tansley:05/99:4712:Brown-2:12:30:28</span><br></pre></td></tr></table></figure>
<p>注意：jupyter运行linux指令需要在指令前加<code>!</code></p>
<h2 id="命令格式"><a class="markdownIt-Anchor" href="#命令格式"></a> 命令格式</h2>
<p><strong>awk 命令的基本格式为：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN&#123; 命令1 &#125; 模式&#123; 命令2 &#125; END&#123; 命令3 &#125;&#x27;</span> 文件</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613526010218.png" alt="awk工作流程" /></p>
<ul>
<li>1、BEGIN 执行 BEGIN 块的内容，即<code>命令1</code>内容,可选。</li>
<li>2、完成 BEGIN 块的执行，开始执行body块。</li>
<li>3、读入有 \n 换行符分割的记录。</li>
<li>4、将记录按指定的域分隔符划分域，填充域。</li>
<li>5、依次执行各 BODY 块，pattern 部分匹配该行内容成功后，才会执行<code>命令2</code>的内容。</li>
<li>6、循环读取并执行各行直到文件结束，完成body块执行。</li>
<li>7、开始 END 块执行，<code>命令3</code>内容，END 块可以输出最终结果,可选。</li>
</ul>
<p><strong>选用参数</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-F fs</td>
<td>指定以 fs 作为输入行的分隔符，awk 命令默认分隔符为空格或制表符。</td>
</tr>
<tr>
<td>-f file</td>
<td>从脚本文件中读取 awk 脚本指令，以取代直接在命令行中输入指令。</td>
</tr>
<tr>
<td>-v var=val</td>
<td>在执行处理过程之前，设置一个变量 var，并给其设备初始值为 val。</td>
</tr>
</tbody>
</table>
<p><strong>awk 命令的脚本命令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;匹配规则&#123;执行命令&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.匹配规则：可以使用字符串（比如 /demo/，表示查看含有 demo 字符串的行）或者正则表达式指定</p>
<p>2.执行命令：需要用大括号（{}）括起来</p>
</blockquote>
<p>注意：</p>
<ul>
<li>整个脚本命令是用单引号（’’）括起</li>
<li>在 awk 程序执行时，如果没有指定执行命令，则默认会把匹配的行输出；如果不指定匹配规则，则默认匹配文本中所有的行。</li>
</ul>
<p><strong>awk 命令的运行方式：</strong></p>
<ul>
<li>1.awk命令行: #awk</li>
<li>2.awk程序文件: #awk -f  /data/awk_script//将swk命令写到文件中，然后调用这个文件</li>
<li>3.awk脚本: #!/bin/awk -f</li>
</ul>
<h2 id="详细使用"><a class="markdownIt-Anchor" href="#详细使用"></a> 详细使用</h2>
<h3 id="指定分隔符"><a class="markdownIt-Anchor" href="#指定分隔符"></a> 指定分隔符</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!awk -F: <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> awk_text</span><br><span class="line">print(<span class="string">&#x27;--------------------------------------------------------------&#x27;</span>)   </span><br><span class="line">!awk -F: <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> awk_text</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 M.Tansley     05/99     48311     Green     8     40     44</span><br><span class="line">2 J.Lulu     06/99     48317     green     9     24     26</span><br><span class="line">3 P.Bunny,02/99,48,Yellow,12,35,28</span><br><span class="line">4 J.Troll</span><br><span class="line">5 L.Tansley</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">1 M.Tansley     05/99     48311     Green     8     40     44</span><br><span class="line">2 J.Lulu     06/99     48317     green     9     24     26</span><br><span class="line">3 P.Bunny,02/99,48,Yellow,12,35,28</span><br><span class="line">4 J.Troll</span><br><span class="line">5 L.Tansley</span><br></pre></td></tr></table></figure>
<h3 id="从文件中读取程序"><a class="markdownIt-Anchor" href="#从文件中读取程序"></a> 从文件中读取程序</h3>
<p>跟 sed 一样，awk 允许将脚本命令存储到文件中，然后再在命令行中引用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!cat awk.sh</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<h2 id="-code9-"><a class="markdownIt-Anchor" href="#-code9-"></a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;print  &quot;The fifth number after&quot;  $1  &quot;is&quot;   $6&#125;</span><br></pre></td></tr></table></figure></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!awk -f awk.sh awk_text</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<h2 id="-code11-"><a class="markdownIt-Anchor" href="#-code11-"></a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The fifth number after1is8</span><br><span class="line">The fifth number after2is9</span><br><span class="line">The fifth number after3is</span><br><span class="line">The fifth number after4is</span><br><span class="line">The fifth number after5is</span><br></pre></td></tr></table></figure></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!cat awk.func</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<h2 id="-code13-"><a class="markdownIt-Anchor" href="#-code13-"></a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/awk -f</span></span><br><span class="line"><span class="meta">#</span><span class="bash">运行前</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line">    math = 0</span><br><span class="line">    english = 0</span><br><span class="line">    computer = 0</span><br><span class="line">    printf &quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n&quot;</span><br><span class="line">    printf &quot;---------------------------------------------\n&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">运行中</span></span><br><span class="line">&#123;</span><br><span class="line">    math+=$3</span><br><span class="line">    english+=$4</span><br><span class="line">    computer+=$5</span><br><span class="line">    printf &quot;%-6s %-6s %4d %8d %8d %8d\n&quot;, $1, $2, $3,$4,$5, $3+$4+$5</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">运行后</span></span><br><span class="line">END &#123;</span><br><span class="line">    printf &quot;---------------------------------------------\n&quot;</span><br><span class="line">    printf &quot;  TOTAL:%10d %8d %8d \n&quot;, math, english, computer</span><br><span class="line">    printf &quot;AVERAGE:%10.2f %8.2f %8.2f\n&quot;, math/NR, english/NR, computer/NR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!awk -f awk.func score</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL</span><br><span class="line">---------------------------------------------</span><br><span class="line">Marry  2143     78       84       77      239</span><br><span class="line">Jack   2321     66       78       45      189</span><br><span class="line">Tom    2122     48       77       71      196</span><br><span class="line">Mike   2537     87       97       95      279</span><br><span class="line">Bob    2415     40       57       62      159</span><br><span class="line">---------------------------------------------</span><br><span class="line">  TOTAL:       319      393      350 </span><br><span class="line">AVERAGE:     63.80    78.60    70.00</span><br></pre></td></tr></table></figure>
<h3 id="设置变量"><a class="markdownIt-Anchor" href="#设置变量"></a> 设置变量</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!awk -v a=<span class="number">1</span> <span class="string">&#x27;&#123;print NR,$2,$2+a&#125;&#x27;</span> awk_text</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 M.Tansley 1</span><br><span class="line">2 J.Lulu 1</span><br><span class="line">3 P.Bunny,02/99,48,Yellow,12,35,28 1</span><br><span class="line">4 J.Troll:07/99:4842:Brown-3:12:26:26 1</span><br><span class="line">5 L.Tansley:05/99:4712:Brown-2:12:30:28 1</span><br></pre></td></tr></table></figure>
<h3 id="内建变量"><a class="markdownIt-Anchor" href="#内建变量"></a> 内建变量</h3>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">变量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">$n</td>
<td style="text-align:left">当前记录的第n个字段，字段间由FS分隔</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">$0</td>
<td style="text-align:left">完整的输入记录</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">ARGC</td>
<td style="text-align:left">命令行参数的数目</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">ARGIND</td>
<td style="text-align:left">命令行中当前文件的位置(从0开始算)</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">ARGV</td>
<td style="text-align:left">包含命令行参数的数组</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">CONVFMT</td>
<td style="text-align:left">数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">ERRNO</td>
<td style="text-align:left">最后一个系统错误的描述</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">FIELDWIDTHS</td>
<td style="text-align:left">字段宽度列表(用空格键分隔)</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">FILENAME</td>
<td style="text-align:left">当前文件名</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">FNR</td>
<td style="text-align:left">各文件分别计数的行号</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">FS</td>
<td style="text-align:left">字段分隔符(默认是任何空格)</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">IGNORECASE</td>
<td style="text-align:left">如果为真，则进行忽略大小写的匹配</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">NF</td>
<td style="text-align:left">一条记录的字段的数目</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">NR</td>
<td style="text-align:left">已经读出的记录数，就是行号，从1开始</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">OFMT</td>
<td style="text-align:left">数字的输出格式(默认值是%.6g)</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">OFS</td>
<td style="text-align:left">输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">ORS</td>
<td style="text-align:left">输出记录分隔符(默认值是一个换行符)</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center">RLENGTH</td>
<td style="text-align:left">由match函数所匹配的字符串的长度</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center">RS</td>
<td style="text-align:left">记录分隔符(默认是一个换行符)</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">RSTART</td>
<td style="text-align:left">由match函数所匹配的字符串的第一个位置</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">SUBSEP</td>
<td style="text-align:left">数组下标分隔符(默认值是/034)</td>
</tr>
</tbody>
</table>
<h4 id="数据字段变量"><a class="markdownIt-Anchor" href="#数据字段变量"></a> 数据字段变量</h4>
<p>awk 会自动给<code>一行</code>中的每个数据元素分配一个变量</p>
<table>
<thead>
<tr>
<th>变量</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>$0</td>
<td style="text-align:left">代表整个文本行；</td>
</tr>
<tr>
<td>$1</td>
<td style="text-align:left">代表文本行中的第 1 个数据字段；</td>
</tr>
<tr>
<td>$2</td>
<td style="text-align:left">代表文本行中的第 2 个数据字段；</td>
</tr>
<tr>
<td>$n</td>
<td style="text-align:left">代表文本行中的第 n 个数据字段。</td>
</tr>
</tbody>
</table>
<p>注意：在 awk 中，默认的字段分隔符是任意的空白字符（例如空格或制表符），awk 在读取一行文本时，会用预定义的字段分隔符划分每个数据字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看全部</span></span><br><span class="line">!awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> awk_text</span><br><span class="line">print(<span class="string">&#x27;--------------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="comment"># 查看每一行的第一个内容</span></span><br><span class="line">!awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> awk_text</span><br><span class="line">print(<span class="string">&#x27;--------------------------------------------------------&#x27;</span>)</span><br><span class="line"><span class="comment"># 查看每一行的最后一个内容</span></span><br><span class="line">!awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span> awk_text</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    1 M.Tansley     05/99     48311     Green     8     40     44</span><br><span class="line">    2 J.Lulu     06/99     48317     green     9     24     26</span><br><span class="line">    3 P.Bunny,02/99,48,Yellow,12,35,28</span><br><span class="line">    4 J.Troll:07/99:4842:Brown-3:12:26:26</span><br><span class="line">    5 L.Tansley:05/99:4712:Brown-2:12:30:28</span><br><span class="line">    --------------------------------------------------------</span><br><span class="line">    1</span><br><span class="line">    2</span><br><span class="line">    3</span><br><span class="line">    4</span><br><span class="line">    5</span><br><span class="line">    --------------------------------------------------------</span><br><span class="line">    8</span><br><span class="line">    9</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 其他参数</span></span></span><br><span class="line">```python</span><br><span class="line">!awk &#x27;BEGIN&#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\n&quot;&#125; &#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;&#x27; awk_text</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS</span><br><span class="line">    ---------------------------------------------</span><br><span class="line">    awk_text    2    1         8    1         </span><br><span class="line">    awk_text    2    2         8    2         </span><br><span class="line">    awk_text    2    3         2    3         </span><br><span class="line">    awk_text    2    4         2    4         </span><br><span class="line">    awk_text    2    5         2    5         </span><br><span class="line">```        </span><br><span class="line">  ---</span><br><span class="line">```python</span><br><span class="line">!awk &#x27;BEGIN&#123;FS=&quot;[ :]+&quot;&#125;&#123;print  $1,$2&#125;&#x27;   awk_text</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 M.Tansley</span><br><span class="line">2 J.Lulu</span><br><span class="line">3 P.Bunny,02/99,48,Yellow,12,35,28</span><br><span class="line">4 J.Troll</span><br><span class="line">5 L.Tansley</span><br></pre></td></tr></table></figure>
<h3 id="多个命令"><a class="markdownIt-Anchor" href="#多个命令"></a> 多个命令</h3>
<p>awk 允许将多条命令组合成一个正常的程序。要在命令行上的程序脚本中使用多条命令，只要在命令之间放个<code>分号</code>即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!echo <span class="string">&quot;My name is Tom&quot;</span> | awk <span class="string">&#x27;&#123;$4=&quot;ann&quot;;print $0&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">My name is ann</span><br></pre></td></tr></table></figure>
<h3 id="begin关键字与end关键字"><a class="markdownIt-Anchor" href="#begin关键字与end关键字"></a> BEGIN关键字与END关键字</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!awk <span class="string">&#x27;BEGIN &#123; for (i = 1; i &lt;= 5; ++i) print i &#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h3 id="printf指定输出格式"><a class="markdownIt-Anchor" href="#printf指定输出格式"></a> printf指定输出格式</h3>
<p>printf “FORMAT” ,item1,item2,…//指格式化输出，必须指定FORMAT，不会自动换行，换行使用换行符\n;FORMAT中需要为每个item指定格式符:与item–对应</p>
<p>%c: 显示字符的ASCII码<br />
%d, %i: 显示十进制整数<br />
%e, %E:显示科学计数法数值<br />
%f：显示为浮点数<br />
%g, %G：以科学计数法或浮点形式显示数值<br />
%s：显示字符串<br />
%u：无符号整数<br />
%%: 显示%自身</p>
<p>修饰符：<br />
#[.#]：第一个数字控制显示的宽度；第二个#表示小数点后精度，%3.1f<br />
-: 左对齐（默认右对齐） %-15s<br />
+：显示数值的正负符号 %+d</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!awk <span class="string">&#x27;BEGIN &#123;printf &quot;%s %s %-4.2f\n&quot;,&quot;TOM&quot;,&quot;man&quot;,66.1234&#125;&#x27;</span></span><br><span class="line">!awk <span class="string">&#x27;BEGIN &#123;printf &quot;%-10s %-8s %-4.2f\n&quot;,&quot;TOM&quot;,&quot;man&quot;,66.1234&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TOM man 66.12</span><br><span class="line">TOM        man      66.12</span><br></pre></td></tr></table></figure>
<h3 id="操作符"><a class="markdownIt-Anchor" href="#操作符"></a> 操作符</h3>
<ul>
<li>算数操作符 ： x+y, x-y,x*y, x/y, x^y, x%y；-x: 转换为负数 ；+x: 转换为数值</li>
<li>赋值操作符 ： =, +=, -=, *=, /=, %=, ^=   ++, –</li>
<li>比较操作符：==, !=, &gt;, &gt;=, &lt;, &lt;=</li>
<li>模式匹配符：~：左边是否和右边匹配包含 !~：是否不匹配</li>
<li>逻辑操作符:与&amp;&amp;，或||，非!</li>
<li>条件表达式（三目表达式）：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!echo <span class="string">&quot;1.7 2.52&quot;</span> | awk <span class="string">&#x27;&#123;printf (&quot;%2f\n&quot;,$1)&#125;&#x27;</span></span><br><span class="line">!echo <span class="string">&quot;1.7 2.52&quot;</span> | awk <span class="string">&#x27;&#123;printf (&quot;%d\n&quot;,$2)&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.700000</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<h3 id="分支语句"><a class="markdownIt-Anchor" href="#分支语句"></a> 分支语句</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!awk <span class="string">&#x27;BEGIN &#123;num = 10; if (num % 2 == 0) printf &quot;%d 是偶数\n&quot;, num &#125;&#x27;</span></span><br><span class="line">!awk <span class="string">&#x27;BEGIN &#123;num = 11; if (num % 2 == 0) printf &quot;%d 是偶数\n&quot;, num; else printf &quot;%d 是奇数\n&quot;, num &#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">10 是偶数</span><br><span class="line">11 是奇数</span><br></pre></td></tr></table></figure>
<h3 id="循环语句"><a class="markdownIt-Anchor" href="#循环语句"></a> 循环语句</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;For----------------------------------------------&#x27;</span>)</span><br><span class="line">!awk <span class="string">&#x27;BEGIN &#123; for (i = 1; i &lt;= 2; ++i) print i &#125;&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;While----------------------------------------------&#x27;</span>)</span><br><span class="line">!awk <span class="string">&#x27;BEGIN &#123;i = 1; while (i &lt; 3) &#123; print i; ++i &#125; &#125;&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;Break----------------------------------------------&#x27;</span>)</span><br><span class="line">!awk <span class="string">&#x27;BEGIN &#123;sum = 0; for (i = 0; i &lt; 10; ++i) &#123;sum += i; if (sum &gt; 15) break; else print &quot;Sum =&quot;, sum &#125;&#125;&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;Continue----------------------------------------------&#x27;</span>)</span><br><span class="line">!awk <span class="string">&#x27;BEGIN &#123;for (i = 1; i &lt;= 10; ++i) &#123;if (i % 2 == 0) print i; else continue;&#125;&#125;&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;Exit----------------------------------------------&#x27;</span>)</span><br><span class="line">!awk <span class="string">&#x27;BEGIN &#123;sum = 0; for (i = 0; i &lt; 10; ++i) &#123;sum += i; if (sum &gt; 15) exit(10); else print &quot;Sum =&quot;, sum &#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">For----------------------------------------------</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">While----------------------------------------------</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">Break----------------------------------------------</span><br><span class="line">Sum = 0</span><br><span class="line">Sum = 1</span><br><span class="line">Sum = 3</span><br><span class="line">Sum = 6</span><br><span class="line">Sum = 10</span><br><span class="line">Sum = 15</span><br><span class="line">Continue----------------------------------------------</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line">Exit----------------------------------------------</span><br><span class="line">Sum = 0</span><br><span class="line">Sum = 1</span><br><span class="line">Sum = 3</span><br><span class="line">Sum = 6</span><br><span class="line">Sum = 10</span><br><span class="line">Sum = 15</span><br></pre></td></tr></table></figure>
<h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3>
<p><strong>语法格式:</strong></p>
<h2 id="-code34-"><a class="markdownIt-Anchor" href="#-code34-"></a> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array_name[index]=value</span><br></pre></td></tr></table></figure></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!awk <span class="string">&#x27;BEGIN &#123;sites[&quot;runoob&quot;]=&quot;www.runoob.com&quot;;sites[&quot;google&quot;]=&quot;www.google.com&quot;;print sites[&quot;runoob&quot;] &quot;\n&quot; sites[&quot;google&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">www.runoob.com</span><br><span class="line">www.google.com</span><br></pre></td></tr></table></figure>
<h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3>
<h4 id="自定义函数"><a class="markdownIt-Anchor" href="#自定义函数"></a> 自定义函数</h4>
<p><strong>语法格式:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> function_name(argument1, argument2, ...)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">function</span> body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>1.function_name 是用户自定义函数的名称。函数名称应该以字母开头，其后可以是数字、字母或下划线的自由组合。AWK 保留的关键字不能作为用户自定义函数的名称。</li>
<li>2.自定义函数可以接受多个输入参数，这些参数之间通过逗号分隔。参数并不是必须的。我们也可以定义没有任何输入参数的函数。</li>
<li>3.function body 是函数体部分，它包含 AWK 程序代码。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!cat awk.func2</span><br></pre></td></tr></table></figure>
<pre><code># 返回最小值
function find_min(num1, num2)
&#123;
  if (num1 &lt; num2)
    return num1
  return num2
&#125;

# 返回最大值
function find_max(num1, num2)
&#123;
  if (num1 &gt; num2)
    return num1
  return num2
&#125;

# 主函数
function main(num1, num2)
&#123;
  # 查找最小值
  result = find_min(10, 20)
  print &quot;Minimum =&quot;, result

  # 查找最大值
  result = find_max(10, 20)
  print &quot;Maximum =&quot;, result
&#125;

# 脚本从这里开始执行
BEGIN &#123;
  main(10, 20)
&#125;  
</code></pre>
<hr />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!awk -f awk.func2</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Minimum = 10</span><br><span class="line">Maximum = 20</span><br></pre></td></tr></table></figure>
<h4 id="内置函数"><a class="markdownIt-Anchor" href="#内置函数"></a> 内置函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!awk <span class="string">&#x27;BEGIN &#123;param = 5; result = exp(param); printf &quot;The exponential value of %f is %f.\n&quot;, param, result;&#125;&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br><span class="line">!awk <span class="string">&#x27;BEGIN &#123;str = &quot;Hello, World&quot;;print &quot;String before replacement = &quot; str;sub(&quot;World&quot;, &quot;Jerry&quot;, str);print &quot;String after replacement = &quot; str&#125;&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;------------------------------------------&#x27;</span>)</span><br><span class="line">!awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print index(info,&quot;11111&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The exponential value of 5.000000 is 148.413159.</span><br><span class="line">------------------------------------------</span><br><span class="line">String before replacement = Hello, World</span><br><span class="line">String after replacement = Hello, Jerry</span><br><span class="line">------------------------------------------</span><br><span class="line">no found</span><br></pre></td></tr></table></figure>
<h2 id="实例列举"><a class="markdownIt-Anchor" href="#实例列举"></a> 实例列举</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从文件中找出长度大于10的行</span></span><br><span class="line">!awk <span class="string">&#x27;length&gt;38&#x27;</span> awk_text</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<h2 id="-code44-"><a class="markdownIt-Anchor" href="#-code44-"></a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 M.Tansley     05/99     48311     Green     8     40     44</span><br><span class="line">2 J.Lulu     06/99     48317     green     9     24     26</span><br><span class="line">5 L.Tansley:05/99:4712:Brown-2:12:30:28</span><br></pre></td></tr></table></figure></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印Hello world</span></span><br><span class="line">!awk <span class="string">&#x27;BEGIN &#123; print &quot;Hello, world!&quot; &#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<h2 id="-code46-"><a class="markdownIt-Anchor" href="#-code46-"></a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#9*9乘法表</span></span><br><span class="line">!seq <span class="number">9</span> | sed <span class="string">&#x27;H;g&#x27;</span> | awk -v RS=<span class="string">&#x27;&#x27;</span> <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++)printf(&quot;%dx%d=%d%s&quot;, i, NR, i*NR, i==NR?&quot;\n&quot;:&quot;\t&quot;)&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1x1=1</span><br><span class="line">1x2=2	2x2=4</span><br><span class="line">1x3=3	2x3=6	3x3=9</span><br><span class="line">1x4=4	2x4=8	3x4=12	4x4=16</span><br><span class="line">1x5=5	2x5=10	3x5=15	4x5=20	5x5=25</span><br><span class="line">1x6=6	2x6=12	3x6=18	4x6=24	5x6=30	6x6=36</span><br><span class="line">1x7=7	2x7=14	3x7=21	4x7=28	5x7=35	6x7=42	7x7=49</span><br><span class="line">1x8=8	2x8=16	3x8=24	4x8=32	5x8=40	6x8=48	7x8=56	8x8=64</span><br><span class="line">1x9=9	2x9=18	3x9=27	4x9=36	5x9=45	6x9=54	7x9=63	8x9=72	9x9=81</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>文本处理</tag>
      </tags>
  </entry>
  <entry>
    <title>linux的文件夹共享功能设置</title>
    <url>/2016/06/01/linux%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E5%85%B1%E4%BA%AB%E5%8A%9F%E8%83%BD%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>本文解释linux系统向其他系统共享文件的流程，并以ipad访问过程演示</p>
<a id="more"></a>
<p>1.新建共享文件夹<br />
<img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613526191640.png" alt="enter description here" /></p>
<p>2.设置共享用户<br />
<img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613526191641.png" alt="enter description here" /></p>
<blockquote>
<p>好像要求用户wu先是系统用户</p>
</blockquote>
<p>3.终端访问</p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613526191645.png" alt="enter description here" /></p>
<p><img src="https://gitee.com/savecoding/imagesbed/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1613526191646.png" alt="enter description here" /></p>
<blockquote>
<p>！需填写密码</p>
</blockquote>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>文件共享</tag>
      </tags>
  </entry>
</search>
